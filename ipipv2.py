#
# 6to4 Configuration Script
# Author: github.com/Azumi67
# This is for educational use and my own learning, please provide me with feedback if possible
# This script is designed to simplify the configuration of 6to4 tunnels.
#
# Supported operating systems: Ubuntu 20, Debian 12
#
# Usage:
#   - Run the script with root privileges.
#   - Follow the on-screen prompts to install, configure, or uninstall the tunnel.
#
#
# Disclaimer:
# This script comes with no warranties or guarantees. Use it at your own risk.
import sys
import os
import time
import colorama
from colorama import Fore, Style
import subprocess
from time import sleep
import readline
import netifaces
import netifaces as ni
import io

sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='utf-8', errors='replace')

if os.geteuid() != 0:
    print("\033[91mThis script must be run as root. Please use sudo -i.\033[0m")
    sys.exit(1)


def display_progress(total, current):
    width = 40
    percentage = current * 100 // total
    completed = width * current // total
    remaining = width - completed

    print('\r[' + '=' * completed + '>' + ' ' * remaining + '] %d%%' % percentage, end='')


def display_checkmark(message):
    print('\u2714 ' + message)


def display_error(message):
    print('\u2718 Error: ' + message)


def display_notification(message):
    print('\u2728 ' + message)


def display_loading():
    frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']
    delay = 0.1
    duration = 5  

    end_time = time.time() + duration

    while time.time() < end_time:
        for frame in frames:
            print('\r[' + frame + '] Loading...  ', end='')
            time.sleep(delay)
            print('\r[' + frame + ']             ', end='')
            time.sleep(delay)

    
def display_logo2():
    colorama.init()
    logo2 = colorama.Style.BRIGHT + colorama.Fore.GREEN + """
     _____       _     _      
    / ____|     (_)   | |     
   | |  __ _   _ _  __| | ___ 
   | | |_ | | | | |/ _` |/ _ \\
   | |__| | |_| | | (_| |  __/
    \_____|\__,_|_|\__,_|\___|
""" + colorama.Style.RESET_ALL
    print(logo2)
    
def display_logo():
    colorama.init()  
    logo = """ 
\033[1;96m          
                 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠀⢀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠀⡀⠤⠒⠊⠉⠀⠀⠀⠀⠈⠁⠢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀\033[1;93m⠀⢀⠔⠉⠀⠀⠀⠀⢀⡠⠤⠐⠒⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠀⣀⡠⠤⠤⠀⠀⠂⠐\033[1;96m⠀⠠⢤⠎⢑⡭⣽⣳⠶⣖⡶⣤⣖⣬⡽⡭⣥⣄\033[1;93m⠒⠒⠀⠐⠁⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⢀⠴⠊⠁⠀⠀⠀⠀⡀⠀\033[1;96m⣠⣴⡶⣿⢏⡿⣝⡳⢧⡻⣟⡻⣞⠿⣾⡽⣳⣯⣳⣞⡻⣦⡀⠀⠀\033[1;93m⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⢨⠀⠀⠀⢀⠤⠂⠁\033[1;96m⢠⣾⡟⣧⠿⣝⣮⣽⢺⣝⣳⡽⣎⢷⣫⡟⡵⡿⣵⢫⡷⣾⢷⣭⢻⣦⡄\033[1;93m⠤⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠘⡄⠀⠀⠓⠂⠀\033[1;96m⣴⣿⢷⡿⣝⣻⣏⡷⣾⣟⡼⣣⢟⣼⣣⢟⣯⢗⣻⣽⣏⡾⡽⣟⣧⠿⡼⣿⣦\033[1;93m⣃⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⢀⠇⠀⠀⠀⠀\033[1;96m⣼⣿⢿⣼⡻⣼⡟⣼⣧⢿⣿⣸⡧⠿⠃⢿⣜⣻⢿⣤⣛⣿⢧⣻⢻⢿⡿⢧⣛⣿⣧⠀\033[1;93m⠛⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⢸⠁⠀⠀⠀⠀\033[1;96m⣼⣻⡿⣾⣳⡽⣾⣽⡷⣻⣞⢿⣫⠕⣫⣫⣸⢮⣝⡇⠱⣏⣾⣻⡽⣻⣮⣿⣻⡜⣞⡿⣷\033[1;93m⢀⠀⠀⠑⠢⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠘⣧⠀⠀⠀\033[1;96m⣼⣳⢯⣿⣗⣿⣏⣿⠆⣟⣿⣵⢛⣵⡿⣿⣏⣟⡾⣜⣻⠀⢻⡖⣷⢳⣏⡶⣻⡧⣟⡼⣻⡽⣇\033[1;93m⠁⠢⡀⠠⡀⠑⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠈⢦⠀\033[1;96m⣰⣯⣟⢯⣿⢾⣹⢾⡟⠰⣏⡾⣾⣟⡷⣿⣻⣽⣷⡶⣟⠿⡆⠀⢻⣝⣯⢷⣹⢧⣿⢧⡻⣽⣳⢽⡀\033[1;93m⠀⠈⠀⠈⠂⡼⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠀⡀⢵\033[1;96m⣟⣾⡟⣾⣿⣻⢽⣺⠇⠀⣿⡱⢿⡞⣵⡳⣭⣿⡜⣿⣭⣻⣷⠲⠤⢿⣾⢯⢯⣛⢿⣳⡝⣾⣿⢭⡇⠀\033[1;93m⠀⠀⠀⡰⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⢀⠤⠊⠀\033[1;96m⣼⢻⣿⢞⣯⢿⡽⣸⣹⡆⠀⢷⣏⢯⣿⣧⣛⠶⣯⢿⣽⣷⣧⣛⣦⠀⠀⠙⢿⣳⣽⣿⣣⢟⡶⣿⣫⡇⠀⠀\033[1;93m⠀⠰⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⣠⠖⠁⠀⠀⡄\033[1;96m⡿⣯⣷⣻⡽⣞⡟⣿⣿⣟⠉⠈⢯⣗⣻⣕⢯⣛⡞⣯⢮⣷⣭⡚⠓⠋⠀⠀⠀⠈⠉⣿⡽⣎⠷⡏⡷⣷⠀⠀⠀\033[1;93m⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠐⣇⠀⠀⢀⠊\033[1;96m⣼⣇⣿⡗⣿⣽⣷⡿⣿⣱⡿⣆⠀⠀⠙⠒⠛⠓⠋⠉⠉⠀⠀⠀\033[1;91m⢠⣴⣯⣶⣶⣤⡀\033[1;96m ⠀⣿⣟⡼⣛⡇⣟⣿⡆\033[1;93m⡀⠀⢀⠇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠘⢤⠀⠃⠌\033[1;96m⣸⣿⢾⡽⣹⣾⠹⣞⡵⣳⣽⡽⣖⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\033[1;91m⣤⣖⣻⣾⣝⢿⡄\033[1;96m ⢸⣯⢳⣏⡿⣏⣾⢧\033[1;93m⠈⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠘⠀⠈⠀\033[1;96m⡿⣿⣻⡽⣽⣿⢧⠌⠉\033[1;91m⠉⣴⣿⣿⣫⣅⡀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣛⠿⠿⢟⢙⡄⠙\033[1;96m ⠘⣯⢳⣞⡟⣯⢾⣻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⡇⠀⠀⠀\033[1;96m⡿⣿⣿⢵⣫⣿⣆⠁⠂\033[1;91m⣼⡿⢹⣿⡿⠽⠟⢢⠀⠀⠀⠀⠀⠀⠀⢹⠀⢄⢀⠀⡿⠀⠀\033[1;96m ⢰⣯⢷⣺⣏⣯⢻⡽⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⡇⠀⢀⠠\033[1;96m⣿⣿⢾⣛⡶⣽⠈⢓⠀\033[1;91m⢻⠁⢸⠇⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠑⠠⠤⠔⠂⠀⠀\033[1;96m ⢸⣿⢮⣽⠿⣜⣻⡝⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀\033[1;93m⠀⠑⠊⠁\033[1;96m⢠⡷⡇⣿⣿⢼⣹⡀⠀⠑⢄⠀\033[1;91m⠀⠃⠌⣁⠦⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠂⠀⠀\033[1;96m⢀⣿⢾⡝⣾⡽⣺⢽⣹⣽⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣻⢽⣻⡟⣮⣝⡷⢦⣄⣄⣢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣯⢿⡺⣟⢷⡹⢾⣷⡞⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣟⡿⣎⢿⡽⣳⢮⣿⣹⣾⣯⡝⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠀⠀⠀⠀⣀⣴⡟⣿⢧⣏⢷⡟⣮⠝⢿⣹⣯⡽⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣯⡷⣏⣾⡳⣽⢺⣷⡹⣟⢶⡹⣾⡽⣷⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠔⣾⢯⣷⡇⣿⢳⣎⢿⡞⣽⢦⣼⡽⣧⢻⡽⣆⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣟⢾⡷⣭⣿⢳⣭⢻⣷⡻⣜⣻⡵⣻⡼⣿⠾⠫\033[1;96m⣽⣟⣶⣶⣶⠒⠒⠂⠉⠀\033[1;96m⢸⣽⢺⡷⣷⣯⢗⣮⣟⢾⢧⣻⠼⡿⣿⢣⡟⣼⣆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⣝⣾⢳⢧⣟⡳⣎⣿⣿⣱⢏⣾⣽⣳⠟\033[1;92m⠁⠀⡌⠈\033[1;96m⢹⡯⠟⠛⠀⠀⠀⠀⠀⠈\033[1;96m⣷⢻⣼⣽⣿⡾⣼⣏⣾⣻⡜⣯⣷⢿⣟⣼⡳⣞⣦⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⢿⡸⣎⠿⣾⡏⣷⣉⣷⣿⢹⣎⡿\033[1;92m⠎⡎⠀⠀⠀⡇⠀⣾⠱⡀⠀⠀⠀⠀⠀⠀⠀⠈⣹⠉⡏⠀\033[1;96m⠹⣾⣏⢹⣶⢹⣶⢿⡾⣿⢶⣿⣸⠾⣇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣠⣾⢫⣞⡽⣯⢿⣹⡟⣶⣹⢷⣻\033[1;92m⡷⠊⠀⡜⠀⠀⠀⠀⢱⠀⣿⡀⠈⠢⢀⣀⣀⠠⠄⠒⢈⡏⡰⠀⠀⠀\033[1;96m⠀⣿⡜⣮⢟⡼⣻⡵⣻⣗⠾⣟⣯⢻⣆⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣴⣿⢣⣟⡾⣽⣯⢳⣿⡹⣖⣿⡳\033[1;92m⠋⠀⠀⡸⠀⠀⠀⠀⠀⢸⠀⢺⢂⠀⠀⠀⠀⠀⠀⠀⢠⡺⡱⠁⠀⠀⠀⠀\033[1;96m⢹⣧⣻⢮⡳⣝⡷⢧⣻⢯⢿⣻⣳⢞⡆⠀⠀⠀
⠀⠀⠀⠀⢀⡾⣽⣣⡿⣼⣏⡿⣼⣳⡯⢷⣹⣯⠇\033[1;92m⠀⠀⢠⠁⠀⠀⠀⠀⠀⠈⡆⠈⢹⡰⠤⡀⠀⠀⠀⢠⡼⢱⠁⠀⠀⠀⠀⠀⠀\033[1;96m⠹⣿⣿⣱⣻⣼⣏⢷⣯⣿⡳⣿⣎⢿⡀⠀⠀
⠀⠀⠀⠀⣾⣽⠷⣿⣵⡿⣼⡟⣭⣷⡟⣿⢯⡏⠀\033[1;92m⠀⠀⠘⠀⠀⠒⠈⢡⠀⠀⢗⢄⠀⠃⠀⠺⢁⢈⠥⠋⣀⠇⠀⠀⠀⠀⠀⠀⡀⠀\033[1;96m⠈⠙⢿⣳⢞⣽⢯⣞⣾⣯⡝⣿⡾⡇⠀⠀⠀
           \033[96m __    \033[1;94m  ________  \033[1;92m ____  ____ \033[1;93m ___      ___  \033[1;91m __     
      \033[96m     /""\   \033[1;94m ("      "\ \033[1;92m("  _||_ " |\033[1;93m|"  \    /"  | \033[1;91m|" \    
      \033[96m    /    \   \033[1;94m \___/   :)\033[1;92m|   (  ) : |\033[1;93m \   \  //   | \033[1;91m||  |   
      \033[96m   /' /\  \   \033[1;94m  /  ___/ \033[1;92m(:  |  | . )\033[1;93m /\   \/.    |\033[1;91m |:  |   
     \033[96m   //  __'  \  \033[1;94m //  \__  \033[1;92m \  \__/  / \033[1;93m|: \.        | \033[1;91m|.  |   
      \033[96m  /  /  \   \ \033[1;94m(:   / "\ \033[1;92m /\  __  /\ \033[1;93m|.  \    /:  |\033[1;91m /\  |\  
      \033[96m(___/    \___) \033[1;94m\_______)\033[1;92m(__________)\033[1;93m|___|\__/|___|\033[1;91m(__\_|_) \033[1;92mAuthor: github.com/Azumi67  \033[1;96m                                                          
"""
    print(logo)
def main_menu():
    try:
        while True:
            display_logo()
            border = "\033[93m+" + "="*70 + "+\033[0m"
            content = "\033[93m║            ▌║█║▌│║▌│║▌║▌█║ \033[92mMain Menu\033[93m  ▌│║▌║▌│║║▌█║▌                  ║"
            footer = " \033[92m    Open issues at \033[34mhttps://github.com/Azumi67/6TO4-GRE-IPIP-SIT\033[0m "

            border_length = len(border) - 2
            centered_content = content.center(border_length)

            print(border)
            print(centered_content)
            print(border)


            print(border)
            print(footer)
            print(border)
            print("\033[93m─────────────────────────────────────────────────────────────────────\033[0m")
            display_notification("\033[92mSingle Server\033[0m")
            print("\033[93m─────────────────────────────────────────────────────────────────────\033[0m")
            print("1. \033[36mExtra Native IPV6\033[0m")
            print("2. \033[93mEdit \033[92mMTU\033[0m")
            print("3. \033[92mGeneve UDP \033[0m")
            print("4. \033[97mERSPAN [test][Some of them will be removed]\033[0m")
            print("41.\033[97mGeneve \033[93mgre6\033[97m ipsec [Test-no ufw]\033[93m[NEW]\033[0m")
            print("42.\033[97mGeneve + IPsec [Test-no ufw]\033[93m[NEW]\033[0m")
            print("43.\033[97mICMP + IPsec [Test]\033[93m[NEW]\033[0m")
            print("44.\033[97mICMPV4 + Erspan + IPsec [Test- last shot]\033[0m")
            print("45.\033[97mHans + Erspan + IPsec [Test]\033[0m")
            print("46.\033[97mIPsec Reset Timer \033[92m[test] \033[0m")
            print("5. \033[96mIP6IP6\033[0m")
            print("6. \033[93mPrivate IP\033[0m")
            print("7. \033[92mGRE\033[0m")
            print("8. \033[96mGRE6\033[0m")
            print("9. \033[97mGRE6tap\033[0m")
            print("10. \033[93m6TO4 \033[0m")
            print("11. \033[92m6TO4 \033[97m[Anycasnt] \033[0m")
            print("12. \033[91mUninstall\033[0m")
            print("\033[93m─────────────────────────────────────────────────────────────────────\033[0m")
            display_notification("\033[93m Multiple Servers\033[0m")
            print("\033[93m─────────────────────────────────────────────────────────────────────\033[0m")
            print("13. \033[96mIP6IP6 Multiple Servers\033[0m")
            print("14. \033[92mGRE6 Multiple Servers\033[0m")
            print("15. \033[93m6tO4 Multiple Servers\033[0m")
            print("16. \033[96mAnycast Multiple Servers\033[0m")
            print("17. \033[93mEdit \033[92mMTU\033[0m")
            print("18. \033[91mUninstall\033[0m")
            print("q. Exit")
            print("\033[93m╰─────────────────────────────────────────────────────────────────────╯\033[0m")

            choice = input("\033[5mEnter your choice Please: \033[0m")
            print("choice:", choice)
            if choice == '1':
                Native_menu()
            elif choice == '2':
                mtu_menu() 
            elif choice == '3':
                genz_ip()  
            elif choice == '4':
                espn_menu()
            elif choice == '41':
                gengre_ipsec()
            elif choice == '42':
                gen4_ipsec()    
            elif choice == '43':
                icmp_ipsec()   
            elif choice == '44':
                icmp_erspan4()
            elif choice == '45':
                icmp_erspan5()  
            elif choice == '46':
                choose_reset()
            elif choice == '5':
                ipip_menu()                
            elif choice == '6':
                private_ip()
            elif choice == '7':
                gre_menu()
            elif choice == '8':
                gre6_menu()
            elif choice == '9':
                gre6tap_mnu()
            elif choice == '10':
                i6to4_no()
            elif choice == '11':
                i6to4_any()
            elif choice == '12':
                remove_menu()
            elif choice == '13':
                ip6_mnu_ip()
            elif choice == '14':
                gre6_mnu_ip()
            elif choice == '15':
                priv_mnu_ip()
            elif choice == '16':
                i6to41_any()
            elif choice == '17':
                mtu2_menu()
            elif choice == '18':
                remove2_menu()
            elif choice == 'q':
                print("Exiting...")
                sys.exit()
            else:
                print("Invalid choice.")

            input("Press Enter to continue...")

    except KeyboardInterrupt:
        display_error("\033[91m\nProgram interrupted. Exiting...\033[0m")
        sys.exit()

## gre6tap simple

def gre6tap_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGRE6tap\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mGRE6tap IPV4 \033[0m")
    print("2. \033[93mGRE6tap Native \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gretap4()
            break
        elif server_type == '2':
            gretapn()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')    


def gretapn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[96mNative \033[93m+\033[92m Gretap6 \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6tap_k()
            break
        elif server_type == '2':
            gre6tap_i()
            break
        elif server_type == '3':
            clear()
            gre6tap_mnu()
            break
        else:
            print('Invalid choice.')

            
def gre6tapk_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)

    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


def kharej_gre6tap_tunnel():
    global local_ip, remote_ip
    gre6tapk_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
    

def gre6tap_k():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    kharej_gre6tap_tunnel()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    display_checkmark("\033[92mConfiguration is done!\033[0m")
 

# iran  native 

def gre6tapi_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:        
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
   

def iran_gre6tap_tunnel():
    global local_ip, remote_ip
    gre6tapi_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()
    
            
def gre6tap_i():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    iran_gre6tap_tunnel()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    display_checkmark("\033[92mConfiguration is done!\033[0m")

## gre6tap ip4

def gretap4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[96mGRE6tap \033[93m+ \033[92mIPV4 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6tap6_kharej()
            break
        elif server_type == '2':
            gre6tap6_iran()
            break
        elif server_type == '3':
            clear()
            gre6tap_mnu()
            break
        else:
            print('Invalid choice.')
            
               
def gre6tap6_kharej():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

            
def gre6tap6_iran():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    display_checkmark("\033[92mConfiguration is done!\033[0m")



def espn_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mERSPAN\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan \033[0m")
    print("2. \033[93mErspan + \033[92mNative \033[0m")
    print("3. \033[96mErspan + ip6ip6 [NEW] \033[0m")
    print("4. \033[93mErspan + Gretap6 \033[0m")
    print("5. \033[92mErspan + IPsec Tunnels \033[0m")
    print('0. \033[91mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ip4_spn()
            break
        elif server_type == '2':
            ip6_spn()
            break
        elif server_type == '3':
            spn_ipip6()
            break
        elif server_type == '4':
            spn_gre6tap()
            break
        elif server_type == '5':
            ipsec_mnu()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

# simple ip4 & native ipip6           
def spn_ipip6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mIP6IP6 \033[93m+ \033[96mErspan\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mMethod 1 \033[0m")
    print("2. \033[92mMethod 2 \033[0m")
    print("3. \033[93mMethod 3 Native \033[0m")
    print('0. \033[91mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_ipip4()
            break
        elif server_type == '2':
            spn_m2_sit4() 
            break
        elif server_type == '3':
            spn_ipipn()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')    

# native ipip spn
def spn_ipipn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mERSPAN +  \033[96mNative \033[93m+\033[92m IP6IP6 \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipip_gre6k()
            break
        elif server_type == '2':
            spn_ipip_gre6i()
            break
        elif server_type == '3':
            clear()
            spn_ipip6()
            break
        else:
            print('Invalid choice.')
            
def spn_ipip_gre6k():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipip_grek1()
            break
        elif server_type == '2':
            spn_ipip_grek2()
            break
        else:
            print('Invalid choice.')
            
def ipip6rn_kharej1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/sys.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip6 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
            with open('/etc/sys.sh', 'a') as f:
                f.write(rt_command)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip6 mtu {mtu_value}\n"
        with open('/etc/sys.sh', 'a') as f:
            f.write(mtu_command)

    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)

def ip6ip6_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/sys.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/sys.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def ipip6rn_kharej1():
    ipip6rn_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    ip6ip6_cronjob()
    

def spn_ipip_grek1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    ipip6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def spn_ipip_grek2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    ipip6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
  
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

# iran    

def ipip6rn_iran1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/sys.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
	
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip6 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
            with open('/etc/sys.sh', 'a') as f:
                f.write(rt_command)
    else:        
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip6 mtu {mtu_value}\n"
        with open('/etc/sys.sh', 'a') as f:
            f.write(mtu_command)
    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
   

def ipip6rn_iran1():
    ipip6rn_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    ip6ip6_cronjob()
    
def spn_ipip_gre6i():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipip_grei1()
            break
        elif server_type == '2':
            spn_ipip_grei2()
            break
        else:
            print('Invalid choice.')
            
def spn_ipip_grei1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    ipip6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def spn_ipip_grei2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    ipip6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

  
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 	

# ip4 ip6ip6 erspan

def spn_ipip4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[96mMethod 1 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipip_kharej()
            break
        elif server_type == '2':
            spn_ipip_iran()
            break
        elif server_type == '3':
            clear()
            spn_ipip6()
            break
        else:
            print('Invalid choice.')
            
def spn_ipip_kharej():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_ipipkh()
    
def spn_ipipkh():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipipk_1()
            break
        elif server_type == '2':
            spn_ipipk_2()
            break
        else:
            print('Invalid choice.')
#prequisite 
def ipip64_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/sys.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip6 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumip6' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
        with open('/etc/sys.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip6 mtu {mtu_value}\n" 
        with open('/etc/sys.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::1               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


def ip6ip64_kharej():
    remote_ip = "fd1d:fc98:b73e:b481::2" #iran-ip
    local_ip = "fd1d:fc98:b73e:b481::1"   #kharej ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mIP6IP6\033[97m tunnel: "))
    ipip64_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre6_service()

    ip6ip6_cronjob()
   
#espn_gre
def kharej1_ip6ip64_menu():
    global local_ip, remote_ip
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::1/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mServer Configuration Completed!\033[0m")
    ip6ip64_kharej()
    sleep(1)    
##    
def spn_ipipk_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def spn_ipipk_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def spn_ipip_iran():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn2_ipipir()
    
def spn2_ipipir():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipipi_1()
            break
        elif server_type == '2':
            spn_ipipi_2()
            break
        else:
            print('Invalid choice.')

## prequisite 
def ip6ip64_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/sys.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumip6' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
        with open('/etc/sys.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip6 mtu {mtu_value}\n"
        with open('/etc/sys.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


def ip6ip64_iran():
    remote_ip = "fd1d:fc98:b73e:b481::1" #kharej ip
    local_ip = "fd1d:fc98:b73e:b481::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mIP6IP6\033[97m tunnel: "))
    ip6ip64_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre6_service()

    ip6ip6_cronjob()
   
## ip6ip6 erspan iran
def iran1_ip6ip64_menu():
    global local_ip, remote_ip
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mIran\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::2/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ip6ip64_iran()
    sleep(1)	
    display_checkmark("\033[92mServer Configuration Completed!\033[0m")   
##    
def spn_ipipi_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def spn_ipipi_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
## method2
# ip4 ipip erspan

def spn_m2_ipip4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[92mMethod 1 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_ipip_kharej()
            break
        elif server_type == '2':
            spn_m2_ipip_iran()
            break
        elif server_type == '3':
            clear()
            spn_m2_ipip6()
            break
        else:
            print('Invalid choice.')
            
def spn_m2_ipip_kharej():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_m2_ipipkh()
    
def spn_m2_ipipkh():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_ipipk_1()
            break
        elif server_type == '2':
            spn_m2_ipipk_2()
            break
        else:
            print('Invalid choice.')
            
  ## method2 menu
def spn_m2_sit4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[92mMethod 2 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_sit_kharej()
            break
        elif server_type == '2':
            spn_m2_sit_iran()
            break
        elif server_type == '3':
            clear()
            spn_m2_ipip6()
            break
        else:
            print('Invalid choice.')
            
def spn_m2_sit_kharej():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_m2_sitkh()
    
def spn_m2_sitkh():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_sitk_1()
            break
        elif server_type == '2':
            spn_m2_sitk_2()
            break
        else:
            print('Invalid choice.')
#prequisite 
def ipip64_m2_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/sys.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo '/sbin/modprobe fou' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link add name azumip6 type ipip remote {remote_ip} local {local_ip} encap fou encap-sport auto encap-dport 5555' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip addr add 192.168.1.1/30 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip6 mtu {mtu_value}\n" 
        with open('/etc/sys.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

def ip6ip64_m2_kharej():

    ipip64_m2_tunnel()


    ip_address = "192.168.1.2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre6_service()

    ip6ip6_cronjob()
   
#espn_sit
def kharej1_m2_ip6ip64_menu():
    global local_ip, remote_ip
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "link", "add", "name", "azumi", "type", "sit", "remote", remote_ip, "local", local_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    subprocess.run(["ip", "addr", "add", "192.168.1.1/30", "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip link add name azumi type sit remote {remote_ip} local {local_ip}\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add 192.168.1.1/30 dev azumi\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="192.168.1.2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_checkmark("\033[92mServer Configuration Completed!\033[0m")
  
    
## for ipip
def spn_m2_ipipk_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip6ip64_m2_kharej()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.1", "remote", "192.168.1.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.1 remote 192.168.1.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

## for sit
def spn_m2_sitk_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_m2_sitk_1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.1", "remote", "192.168.1.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.1 remote 192.168.1.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
    
##ipv6 for ipip    
def spn_m2_ipipk_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip6ip64_m2_kharej()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.1", "remote", "192.168.1.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.1 remote 192.168.1.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

##ipv6 for sit  
def spn_m2_sitk_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_m2_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.1", "remote", "192.168.1.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.1 remote 192.168.1.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
# iran side
   
def spn_m2_ipip_iran():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn2_m2_ipipir()
    
def spn2_m2_ipipir():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_ipipi_1()
            break
        elif server_type == '2':
            spn_m2_ipipi_2()
            break
        else:
            print('Invalid choice.')
            
# method 2 iran ip6 erspan
def spn_m2_sit_iran():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn2_m2_sitir()
    
def spn2_m2_sitir():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_m2_siti_1()
            break
        elif server_type == '2':
            spn_m2_siti_2()
            break
        else:
            print('Invalid choice.')

## prequisite ipip
def ip6ip64_m2_iran_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/sys.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo '/sbin/modprobe fou' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumip6 type ipip remote {remote_ip} local {local_ip} encap fou encap-sport auto encap-dport 5555' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip addr add 192.168.1.2/30 dev azumip6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip6 mtu {mtu_value}\n"
        with open('/etc/sys.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

#prequisite sit
def ip6ip64_m2_iran():
    global local_ip, remote_ip
    ip6ip64_m2_iran_tunnel()


    ip_address = "192.168.1.1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre6_service()

    ip6ip6_cronjob()
   
## IP6IP6 erspan iran
def iran1_m2_ip6ip64_menu():
    global local_ip, remote_ip
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mIran\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "link", "add", "name", "azumi", "type", "sit", "remote", remote_ip, "local", local_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    subprocess.run(["ip", "addr", "add", "192.168.1.2/30", "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip link add name azumi type sit remote {remote_ip} local {local_ip}\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add 192.168.1.2/30 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="192.168.1.1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
	
    display_checkmark("\033[92mServer Configuration Completed!\033[0m")   
## method2 ipip erspan6  
def spn_m2_ipipi_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip6ip64_m2_iran()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.2", "remote", "192.168.1.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.2 remote 192.168.1.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

## method3 sit erspan4  
def spn_m2_siti_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_m2_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.2", "remote", "192.168.1.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.2 remote 192.168.1.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def spn_m2_ipipi_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip6ip64_m2_iran()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.2", "remote", "192.168.1.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.2 remote 192.168.1.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")

## sit
def spn_m2_siti_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_m2_ip6ip64_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "192.168.1.2", "remote", "192.168.1.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 192.168.1.2 remote 192.168.1.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")    
## simple ip4 & native gretap6
def spn_gre6tap():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGRE6tap \033[93m+ \033[96mErspan\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan + GRE6tap IPV4 \033[0m")
    print("2. \033[93mErspan + GRE6tap Native \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_gretap4()
            break
        elif server_type == '2':
            spn_gretapn()
            break
        elif server_type == '0':
            clear()
            espn_menu()
            break
        else:
            print('Invalid choice.')    

# native gre spn
def spn_gretapn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mERSPAN +  \033[96mNative \033[93m+\033[92m Gretap6 \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_sim_gre6tapk()
            break
        elif server_type == '2':
            spn_sim_gre6tapi()
            break
        elif server_type == '3':
            clear()
            spn_gre6tap()
            break
        else:
            print('Invalid choice.')
            
def spn_sim_gre6tapk():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ip4_gretapk1()
            break
        elif server_type == '2':
            spn_ip4_gretapk2()
            break
        else:
            print('Invalid choice.')
            
def tap6rn_kharej1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)

    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)

def tap6rn_kharej1():
    tap6rn_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    create_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', '2002:831a::2'], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
    

def spn_ip4_gretapk1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    tap6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def spn_ip4_gretapk2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    tap6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
  
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

# iran    

def tap6rn_iran1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:        
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
   

def tap6rn_iran1():
    tap6rn_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()
    
def spn_sim_gre6tapi():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ip4_gretapi1()
            break
        elif server_type == '2':
            spn_ip4_gretapi2()
            break
        else:
            print('Invalid choice.')
            
def spn_ip4_gretapi1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    tap6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def spn_ip4_gretapi2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    tap6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

  
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 	

# ip4 gre6 erspan

def spn_gretap4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ \033[96mGRE6tap \033[93m+ \033[92mIPV4 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gretapk_spn()
            break
        elif server_type == '2':
            gretapi_spn()
            break
        elif server_type == '3':
            clear()
            spn_gre6tap()
            break
        else:
            print('Invalid choice.')
            
def gretapk_spn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_kh_tap()
    
def spn_kh_tap():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipk_tap1()
            break
        elif server_type == '2':
            spn_ipk_tap2()
            break
        else:
            print('Invalid choice.')
            
def spn_ipk_tap1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def spn_ipk_tap2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def gretapi_spn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn2_tapir()
    
def spn2_tapir():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_tapipi_1()
            break
        elif server_type == '2':
            spn_tapipi_2()
            break
        else:
            print('Invalid choice.')
            
def spn_tapipi_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def spn_tapipi_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
# simple ip4 & native gre6
def spn_gre6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGRE6 \033[93m+ \033[96mErspan\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan + GRE6 IPV4 \033[0m")
    print("2. \033[93mErspan + GRE6 Native \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_gre4()
            break
        elif server_type == '2':
            spn_gren()
            break
        elif server_type == '0':
            clear()
            espn_menu()
            break
        else:
            print('Invalid choice.')    

# native gre spn
def spn_gren():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mERSPAN +  \033[96mNative \033[93m+\033[92m Gre6 \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_sim_gre6k()
            break
        elif server_type == '2':
            spn_sim_gre6i()
            break
        elif server_type == '3':
            clear()
            spn_gre6()
            break
        else:
            print('Invalid choice.')
            
def spn_sim_gre6k():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ip4_grek1()
            break
        elif server_type == '2':
            spn_ip4_grek2()
            break
        else:
            print('Invalid choice.')
            
def gree6rn_kharej1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)

    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


def gree6rn_kharej1():
    gree6rn_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
    

def spn_ip4_grek1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    gree6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def spn_ip4_grek2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    gree6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
  
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

# iran    

def gree6rn_iran1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:        
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
   

def gree6rn_iran1():
    gree6rn_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()
    
def spn_sim_gre6i():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ip4_grei1()
            break
        elif server_type == '2':
            spn_ip4_grei2()
            break
        else:
            print('Invalid choice.')
            
def spn_ip4_grei1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    gree6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def spn_ip4_grei2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    gree6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

  
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 	

# ip4 gre6 erspan

def spn_gre4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ \033[96mGRE6 \033[93m+ \033[92mIPV4 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_spn_mnu()
            break
        elif server_type == '2':
            iran_spn_mnu()
            break
        elif server_type == '3':
            clear()
            spn_gre6()
            break
        else:
            print('Invalid choice.')
            
def kharej_spn_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_kh()
    
def spn_kh():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipk_1()
            break
        elif server_type == '2':
            spn_ipk_2()
            break
        else:
            print('Invalid choice.')
            
def spn_ipk_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def spn_ipk_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def iran_spn_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn2_ir()
    
def spn2_ir():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipi_1()
            break
        elif server_type == '2':
            spn_ipi_2()
            break
        else:
            print('Invalid choice.')
            
def spn_ipi_1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def spn_ipi_2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")


    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 

# gre6tap ip4 & ip6    

def ipsec_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan + IPsec\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan + IPsec \033[0m")
    print("2. \033[96mGRE6 | Erspan + IPsec  \033[0m")
    print("3. \033[93mGRE6tap | Erspan + IPsec  \033[0m")
    print("4. \033[96mIPsec Reset Timer \033[92m[Optional] \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            simple_ipsec_mn()
            break
        elif server_type == '2':
            espn_sec()
            break
        elif server_type == '3':
            espn_gretap()
            break
        elif server_type == '4':
            choose_reset()
            break
        elif server_type == '0':
            clear()
            espn_menu()
            break
        else:
            print('Invalid choice.')
# reset 
def ipsec_sh():
    subprocess.run(['rm', '-f', '/etc/ipsec.sh'])

    ipsec_script = """
#!/bin/bash

systemctl restart strongswan-starter
systemctl restart strongswan


"""

    with open('/etc/ipsec.sh', 'w') as file:
        file.write(ipsec_script)
    subprocess.run(['chmod', '+x', '/etc/ipsec.sh'])
def delete_cron1():
    entries_to_delete = [
        "0 * * * * /bin/bash /etc/ipsec.sh",
        "0 */2 * * * /bin/bash /etc/ipsec.sh",
        "0 */3 * * * /bin/bash /etc/ipsec.sh",
        "0 */4 * * * /bin/bash /etc/ipsec.sh",
        "0 */5 * * * /bin/bash /etc/ipsec.sh",
        "0 */6 * * * /bin/bash /etc/ipsec.sh",
        "0 */7 * * * /bin/bash /etc/ipsec.sh",
        "0 */8 * * * /bin/bash /etc/ipsec.sh",
        "0 */9 * * * /bin/bash /etc/ipsec.sh",
        "0 */10 * * * /bin/bash /etc/ipsec.sh",
        "0 */11 * * * /bin/bash /etc/ipsec.sh",
        "0 */12 * * * /bin/bash /etc/ipsec.sh",
        "0 */13 * * * /bin/bash /etc/ipsec.sh",
        "0 */14 * * * /bin/bash /etc/ipsec.sh",
        "0 */15 * * * /bin/bash /etc/ipsec.sh",
        "0 */16 * * * /bin/bash /etc/ipsec.sh",
        "0 */17 * * * /bin/bash /etc/ipsec.sh",
        "0 */18 * * * /bin/bash /etc/ipsec.sh",
        "0 */19 * * * /bin/bash /etc/ipsec.sh",
        "0 */20 * * * /bin/bash /etc/ipsec.sh",
        "0 */21 * * * /bin/bash /etc/ipsec.sh",
        "0 */22 * * * /bin/bash /etc/ipsec.sh",
        "0 */23 * * * /bin/bash /etc/ipsec.sh",
    ]

    existing_crontab = ""
    try:
        existing_crontab = subprocess.check_output("crontab -l", shell=True).decode()
    except subprocess.CalledProcessError:

        return

    new_crontab = existing_crontab
    for entry in entries_to_delete:
        if entry in existing_crontab:
            new_crontab = new_crontab.replace(entry, "")

    if new_crontab != existing_crontab:
        subprocess.call(f"echo '{new_crontab}' | crontab -", shell=True)
        display_notification("\033[92mDeleting Previous Crons..\033[0m")


def delete_cron2():
    entries_to_delete = [
        "*/1 * * * * /bin/bash /etc/ipsec.sh",  
        "*/2 * * * * /bin/bash /etc/ipsec.sh",  
        "*/3 * * * * /bin/bash /etc/ipsec.sh",  
        "*/4 * * * * /bin/bash /etc/ipsec.sh",  
        "*/5 * * * * /bin/bash /etc/ipsec.sh",  
        "*/6 * * * * /bin/bash /etc/ipsec.sh",
        "*/7 * * * * /bin/bash /etc/ipsec.sh",
        "*/8 * * * * /bin/bash /etc/ipsec.sh",
        "*/9 * * * * /bin/bash /etc/ipsec.sh",
        "*/10 * * * * /bin/bash /etc/ipsec.sh",  
        "*/11 * * * * /bin/bash /etc/ipsec.sh",  
        "*/12 * * * * /bin/bash /etc/ipsec.sh", 
        "*/13 * * * * /bin/bash /etc/ipsec.sh",
        "*/14 * * * * /bin/bash /etc/ipsec.sh",
        "*/15 * * * * /bin/bash /etc/ipsec.sh",
        "*/16 * * * * /bin/bash /etc/ipsec.sh",
        "*/17 * * * * /bin/bash /etc/ipsec.sh",
        "*/18 * * * * /bin/bash /etc/ipsec.sh",
        "*/19 * * * * /bin/bash /etc/ipsec.sh",
        "*/20 * * * * /bin/bash /etc/ipsec.sh",
        "*/21 * * * * /bin/bash /etc/ipsec.sh",
        "*/22 * * * * /bin/bash /etc/ipsec.sh",
        "*/23 * * * * /bin/bash /etc/ipsec.sh",
        "*/24 * * * * /bin/bash /etc/ipsec.sh",
        "*/25 * * * * /bin/bash /etc/ipsec.sh",
        "*/26 * * * * /bin/bash /etc/ipsec.sh",
        "*/27 * * * * /bin/bash /etc/ipsec.sh",
        "*/28 * * * * /bin/bash /etc/ipsec.sh",
        "*/29 * * * * /bin/bash /etc/ipsec.sh",
        "*/30 * * * * /bin/bash /etc/ipsec.sh",
        "*/31 * * * * /bin/bash /etc/ipsec.sh",
        "*/32 * * * * /bin/bash /etc/ipsec.sh",
        "*/33 * * * * /bin/bash /etc/ipsec.sh",
        "*/34 * * * * /bin/bash /etc/ipsec.sh",
        "*/35 * * * * /bin/bash /etc/ipsec.sh",
        "*/36 * * * * /bin/bash /etc/ipsec.sh",
        "*/37 * * * * /bin/bash /etc/ipsec.sh",
        "*/38 * * * * /bin/bash /etc/ipsec.sh",
        "*/39 * * * * /bin/bash /etc/ipsec.sh",
        "*/40 * * * * /bin/bash /etc/ipsec.sh",
        "*/41 * * * * /bin/bash /etc/ipsec.sh",
        "*/42 * * * * /bin/bash /etc/ipsec.sh",
        "*/43 * * * * /bin/bash /etc/ipsec.sh",
        "*/44 * * * * /bin/bash /etc/ipsec.sh",
        "*/45 * * * * /bin/bash /etc/ipsec.sh",
        "*/46 * * * * /bin/bash /etc/ipsec.sh",
        "*/47 * * * * /bin/bash /etc/ipsec.sh",
        "*/48 * * * * /bin/bash /etc/ipsec.sh",
        "*/49 * * * * /bin/bash /etc/ipsec.sh",
        "*/50 * * * * /bin/bash /etc/ipsec.sh",
        "*/51 * * * * /bin/bash /etc/ipsec.sh",
        "*/52 * * * * /bin/bash /etc/ipsec.sh",
        "*/53 * * * * /bin/bash /etc/ipsec.sh",
        "*/54 * * * * /bin/bash /etc/ipsec.sh",
        "*/55 * * * * /bin/bash /etc/ipsec.sh",
        "*/56 * * * * /bin/bash /etc/ipsec.sh",
        "*/57 * * * * /bin/bash /etc/ipsec.sh",
        "*/58 * * * * /bin/bash /etc/ipsec.sh",
        "*/59 * * * * /bin/bash /etc/ipsec.sh",
        
        
    ]

    existing_crontab = ""
    try:
        existing_crontab = subprocess.check_output("crontab -l", shell=True).decode()
    except subprocess.CalledProcessError:
        
        return

    new_crontab = existing_crontab
    for entry in entries_to_delete:
        if entry in existing_crontab:
            new_crontab = new_crontab.replace(entry, "")

    if new_crontab != existing_crontab:
        subprocess.call(f"echo '{new_crontab}' | crontab -", shell=True)
        display_notification("\033[92mDeleting Previous Crons..\033[0m")
     
        
def reset_hour():
    hours = int(input("\033[93mEnter the \033[92mReset Timer\033[93m [in hours]:\033[0m "))
    delete_cron1()
    delete_cron2()

    if hours == 1:
        cron_entry = "0 * * * * /bin/bash /etc/ipsec.sh"
    else:
        cron_entry = f"0 */{hours} * * * /bin/bash /etc/ipsec.sh"

    try:
        process = subprocess.run('crontab -l', shell=True, capture_output=True, text=True)
        existing_crontab = process.stdout

        if existing_crontab.strip() != "":
            new_crontab = f"{existing_crontab.rstrip()}\n{cron_entry}"
        else:
            new_crontab = cron_entry

        new_crontab += '\n'

        process = subprocess.run('crontab -', shell=True, input=new_crontab, text=True, capture_output=True)

        if process.returncode == 0:
            print("\033[92mCron entry added successfully!\033[0m")
        else:
            print(f"Failed to add cron entry. Error: {process.stderr}")
    except Exception as e:
        print(f"Error: {e}")

def reset_minutes():
    minutes = int(input("\033[93mEnter the \033[92mReset Timer\033[93m [in minutes]:\033[0m "))
    delete_cron1()
    delete_cron2()

    cron_entry = f"*/{minutes} * * * * /bin/bash /etc/ipsec.sh"

    try:
        process = subprocess.run('crontab -l', shell=True, capture_output=True, text=True)
        existing_crontab = process.stdout

        if existing_crontab.strip() != "":
            new_crontab = f"{existing_crontab.rstrip()}\n{cron_entry}"
        else:
            new_crontab = cron_entry

        new_crontab += '\n'

        process = subprocess.run('crontab -', shell=True, input=new_crontab, text=True, capture_output=True)

        if process.returncode == 0:
            print("\033[92mCron entry added successfully!\033[0m")
        else:
            print(f"Failed to add cron entry. Error: {process.stderr}")
    except Exception as e:
        print(f"Error: {e}")

def choose_reset():
    reset_unit = input("\033[93mChoose the reset timer unit:\n1. \033[92mHours\n\033[93m2.\033[96m Minutes\n\033[93mEnter your choice (\033[92m1\033[93m or\033[96m 2\033[93m): \033[0m")

    if reset_unit == "1":
        reset_hour()
    elif reset_unit == "2":
        reset_minutes()
    else:
        print("\033[91mInvalid choice. Plz enter 1 or 2.\033[0m")

    ipsec_sh()

## simpe ip4 
def ip4_spn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ IPV4 \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            simple_spnkh()
            break
        elif server_type == '2':
            simple_spnir()
            break
        elif server_type == '3':
            clear()
            espn_menu()
            break
        else:
            print('Invalid choice.')
            
def simple_spnkh():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_sim_kharej()
    
def spn_sim_kharej():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ip4_simpk1()
            break
        elif server_type == '2':
            ip4_simk2()
            break
        else:
            print('Invalid choice.')

    
def ip4_simpk1():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def ip4_simk2():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    
    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def simple_spnir():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_sim_iran()
    
def spn_sim_iran():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ip4_simpi1()
            break
        elif server_type == '2':
            ip4_simpi2()
            break
        else:
            print('Invalid choice.')

def ip4_simpi1():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def ip4_simpi2():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 

## simple ip6
def ip6_spn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ Native  \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            simple_ip6_n()
            break
        elif server_type == '2':
            simple_ip6i_n()
            break
        elif server_type == '3':
            clear()
            espn_menu()
            break
        else:
            print('Invalid choice.')
            
def simple_ip6_n():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip6_simple1_n()
    
def ip6_simple1_n():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ip6_simk1_n()
            break
        elif server_type == '2':
            ip6_simk2_n()
            break
        else:
            print('Invalid choice.')
    
def ip6_simk1_n():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def ip6_simk2_n():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    


    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def simple_ip6i_n():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ip6_simple2_n()
    
def ip6_simple2_n():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ip6_simpi1_n()
            break
        elif server_type == '2':
            ip6_simpi2_n()
            break
        else:
            print('Invalid choice.')

def ip6_simpi1_n():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def ip6_simpi2_n():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")    


    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 

    
## simple ipsec
def simple_ipsec_mn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ \033[92mIPsec Menu \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mNative + Erspan\033[0m')
    print('2. \033[93mIPV4 + Erspan\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            simple_ipsec_n()
            break
        elif server_type == '2':
            simple_ipsec()
            break
        elif server_type == '3':
            clear()
            ipsec_mnu()
            break
        else:
            print('Invalid choice.')
            
def simple_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ IPV4 + \033[92mIPsec \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            simple_ipseck()
            break
        elif server_type == '2':
            simple_ipseci()
            break
        elif server_type == '3':
            clear()
            simple_ipsec_mn()
            break
        else:
            print('Invalid choice.')
            
def simple_ipseck():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_simple1()
    
def espan_simple1():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_simpk1()
            break
        elif server_type == '2':
            espan_simpk2()
            break
        else:
            print('Invalid choice.')

def config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simk2(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simi2(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def espan_simpk1():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def espan_simpk2():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simk2(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def simple_ipseci():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_simple2()
    
def espan_simple2():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_simpi1()
            break
        elif server_type == '2':
            espan_simpi2()
            break
        else:
            print('Invalid choice.')

def espan_simpi1():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def espan_simpi2():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simi2(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
# native erspan
def simple_ipsec_n():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ Native + \033[92mIPsec \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            simple_ipseck_n()
            break
        elif server_type == '2':
            simple_ipseci_n()
            break
        elif server_type == '3':
            clear()
            simple_ipsec_mn()
            break
        else:
            print('Invalid choice.')
            
def simple_ipseck_n():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_simple1_n()
    
def espan_simple1_n():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_simk1_n()
            break
        elif server_type == '2':
            espan_simk2_n()
            break
        else:
            print('Invalid choice.')

def config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simk2(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simi2(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.") 
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def espan_simk1_n():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def espan_simk2_n():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simk2(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def simple_ipseci_n():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_simple2_n()
    
def espan_simple2_n():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_simpi1_n()
            break
        elif server_type == '2':
            espan_simpi2_n()
            break
        else:
            print('Invalid choice.')

def espan_simpi1_n():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def espan_simpi2_n():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simi2(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", local_ip, "remote", remote_ip, "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local {local_ip} remote {remote_ip} seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")
## gre6tap erspan
  
def gre6tap_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig6' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n" 
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::1               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")    
    
def gre6tap_kharej():
    remote_ip = "fd1d:fc98:b73e:b481::2" #iran-ip
    local_ip = "fd1d:fc98:b73e:b481::1"   #kharej ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6tap\033[97m tunnel: "))
    gre6tap_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre6_service()

    gre6_cronjob()
    
def kharej_gretap6_menu():
    os.system("clear")
    global local_ip, remote_ip
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GREtap6 \033[92mKharej\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::1/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6tap Configuration Completed!\033[0m")
    gre6tap_kharej()
    sleep(1)	

def gretap6_iran():
    remote_ip = "fd1d:fc98:b73e:b481::1" #kharej ip
    local_ip = "fd1d:fc98:b73e:b481::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6tap\033[97m tunnel: "))
    gretap6_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre6_service()

    gre6_cronjob()

def gretap6_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig6' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GREtap6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
def iran_gretap6_menu():
    os.system("clear")
    global local_ip, remote_ip
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6tap \033[92mIran\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::2/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    gretap6_iran()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    sleep(1)	
    display_checkmark("\033[92mGRE6tap Configuration Completed!\033[0m")
	
def espn_gretap():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGRE6tap \033[93m+ \033[96mErspan\033[93m + \033[91mIPsec\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan + GRE6tap | IPsec + IPV4 \033[0m")
    print("2. \033[93mErspan + GRE6tap | IPsec + Native \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espn_gretap_ipsec()
            break
        elif server_type == '2':
            espn_gretap_ipsec2()
            break
        elif server_type == '0':
            clear()
            ipsec_mnu()
            break
        else:
            print('Invalid choice.')       
    
def espn_gretap_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ \033[96mGre6tap \033[93m+ \033[92mIPV4 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_gretap_espn()
            break
        elif server_type == '2':
            iran_gretap_espn()
            break
        elif server_type == '3':
            clear()
            espn_gretap()
            break
        else:
            print('Invalid choice.')
            
def kharej_gretap_espn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_ipgre1()
    
def espan_ipgre1():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_ipk_gre1()
            break
        elif server_type == '2':
            espan_ipk_gre2()
            break
        else:
            print('Invalid choice.')
            
def espan_ipk_gre1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    kharej_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    config_strongswank_gre62(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def espan_ipk_gre2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    kharej_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswank_gre6(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def iran_gretap_espn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_ipgre2()
    
def espan_ipgre2():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_ipi_gre1()
            break
        elif server_type == '2':
            espan_ipi_gre2()
            break
        else:
            print('Invalid choice.')
            
def espan_ipi_gre1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
   
    iran_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gre62(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def espan_ipi_gre2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 

    iran_gretap6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gre6(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
## gre6tap native
def espn_gretap_ipsec2():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ \033[96mGre6tap \033[93m+ \033[92mNative \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharejna_gretap_espn()
            break
        elif server_type == '2':
            iranna_gretap_espn()
            break
        elif server_type == '3':
            clear()
            espn_gretap()
            break
        else:
            print('Invalid choice.')
            
def kharejna_gretap_espn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_ipgrena1()
    
def espan_ipgrena1():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_ipk_grena1()
            break
        elif server_type == '2':
            espan_ipk_grena2()
            break
        else:
            print('Invalid choice.')

# kharej prequisite
def gre6tapna_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6tap]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n" 
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::1               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")    
    
def gre6tapna_kharej():
    global local_ip, remote_ip
    gre6tapna_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre6_service()

    gre6_cronjob()            
def espan_ipk_grena1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")

    gre6tapna_kharej()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    config_strongswank_gre62(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def espan_ipk_grena2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")

    gre6tapna_kharej()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswank_gre6(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
## iran prequisite 
def gretap6na_iran():
    global local_ip, remote_ip
    gretap6na_iran_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre6_service()

    gre6_cronjob()

def gretap6na_iran_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link add name azumig6 type ip6gretap local {local_ip} remote {remote_ip}' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)



    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GREtap6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::2               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
def iranna_gretap_espn():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_ipgrena2()
    
def espan_ipgrena2():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_ipi_grena1()
            break
        elif server_type == '2':
            espan_ipi_grena2()
            break
        else:
            print('Invalid choice.')
            
def espan_ipi_grena1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
   
    gretap6na_iran()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gre62(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def espan_ipi_grena2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m") 

    gretap6na_iran()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gre6(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 

## gre6 erspan            
def espn_sec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGRE6 \033[93m+ \033[96mErspan\033[93m + \033[91mIPsec\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan + GRE6 | IPsec + IPV4 \033[0m")
    print("2. \033[93mErspan + GRE6 | IPsec + Native \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espn_ipsec()
            break
        elif server_type == '2':
            spn_ip()
            break
        elif server_type == '0':
            clear()
            ipsec_mnu()
            break
        else:
            print('Invalid choice.')    

# native gre spn
def spn_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mERSPAN +  \033[96mNative \033[93m+\033[92m Gre6 \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn_ipger()
            break
        elif server_type == '2':
            spn_ipgeri()
            break
        elif server_type == '3':
            clear()
            espn_sec()
            break
        else:
            print('Invalid choice.')
            
def spn_ipger():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan2_ipk_ngre1()
            break
        elif server_type == '2':
            espan2_ipk_ngre2()
            break
        else:
            print('Invalid choice.')
            
def gree6rn_kharej1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)

    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


def gree6rn_kharej1():
    gree6rn_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
    
            
def config_strongswank_gren(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
  
conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::1
  right=2002:831a::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::2 2002:831a::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongswank_gren4(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::1
  right=2002:831a::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::2 2002:831a::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def config_strongswani_gren(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::2
  right=2002:831a::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::1 2002:831a::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) 


def config_strongswani_gren4(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::2
  right=2002:831a::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::1 2002:831a::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)  
    
def espan2_ipk_ngre1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")

    gree6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswank_gren4(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def espan2_ipk_ngre2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")

    gree6rn_kharej1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswank_gren(psk)
  
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

# iran    

def gree6rn_iran1_tunnel():
    global local_ip, remote_ip
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:        
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
   

def gree6rn_iran1():
    gree6rn_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()
    
def spn_ipgeri():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan2_ipi_ngre1()
            break
        elif server_type == '2':
            espan2_ipi_ngre2()
            break
        else:
            print('Invalid choice.')
            
def espan2_ipi_ngre1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m") 

    gree6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gren4(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def espan2_ipi_ngre2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address: \033[0m")
   
    gree6rn_iran1()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gren(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

  
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 

def espan4_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "2001:db8::1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)
        
def espan3_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "2001:db8::2"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)

def espan_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.200.2.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)
       
        
def espan2_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.200.1.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)
        
def ping_kh2_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_espan.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_espan.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_espan.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_espan.service'])
    
        
def espan_job():
    file_path = '/etc/spn.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def permissions():
    print("Setting permissions for config files...")
    subprocess.run(["sudo", "chmod", "600", "/etc/ipsec.secrets"])
    subprocess.run(["sudo", "chmod", "600", "/etc/ipsec.conf"])
    print("Setting permissions was successful.")
    
def install_strongswan():
     
    subprocess.run(["sudo", "apt", "install", "strongswan", "-y"])
    print("IPSEC Installation complete.")
 


def config_strongswan(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def config_strongswank_gre62(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

 
conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::1
  right=2002:831a::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::2 2002:831a::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def config_strongswank_gre6(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::1
  right=2002:831a::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::2 2002:831a::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongswani_gre6(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::2
  right=2002:831a::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::1 2002:831a::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def config_strongswani_gre62(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea

conn erspan
  left=%defaultroute
  leftsubnet=64
  leftid=2002:831a::2
  right=2002:831a::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:831a::1 2002:831a::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def espn_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan \033[93m+ \033[96mGRE6 \033[93m+ \033[92mIPV4 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_espn_menu()
            break
        elif server_type == '2':
            iran_espn_menu()
            break
        elif server_type == '3':
            clear()
            ipsec_mnu()
            break
        else:
            print('Invalid choice.')
            
def kharej_espn_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan_ipvers()
    
def espan_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_ipk_version1()
            break
        elif server_type == '2':
            espan_ipk_version2()
            break
        else:
            print('Invalid choice.')
            
def espan_ipk_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswank_gre62(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def espan_ipk_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswank_gre6(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::1", "remote", "2002:831a::2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::1 remote 2002:831a::2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def iran_espn_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    espan2_ipvers()
    
def espan2_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espan_ipi_version1()
            break
        elif server_type == '2':
            espan_ipi_version2()
            break
        else:
            print('Invalid choice.')
            
def espan_ipi_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongswani_gre62(psk)

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def espan_ipi_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    config_strongswani_gre6(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "ip6erspan", "local", "2002:831a::2", "remote", "2002:831a::1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type ip6erspan local 2002:831a::2 remote 2002:831a::1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumiespn\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
def genz_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mGeneve UDP \033[0m")
    print("2. \033[93mGeneve UDP \033[93m+ \033[92mNative \033[93m| \033[92mTunnelbroker \033[0m")
    print("3. \033[96mGeneve UDP + GRE6 \033[0m")
    print('0. \033[91mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_ip()
            break
        elif server_type == '2':
            gen2_ip()
            break
        elif server_type == '3':
            genf_ip()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')        
def gen_icmp_install():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGen + ICMP\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_ipicmp()
            break
        elif server_type == '2':
            gen_ipicmpi()
            break
        elif server_type == '0':
            clear()
            genz_ip()
            break
        else:
            print('Invalid choice.')
            
def remove2_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m Multiple Servers Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mUninstall IP6IP6\033[0m')
    print('2. \033[93mUninstall 6to4\033[0m')
    print('3. \033[93mUninstall anycast\033[0m')
    print('4. \033[92mUninstall Gre6\033[0m')
    print('0. \033[91mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            rmv_ipip6()
            break
        elif server_type == '2':
            rmv_private()
            break
        elif server_type == '3':
            remove_6to41()
            break
        elif server_type == '4':
            rmv_gre6()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

def rmv_ipip6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m IP6IP6\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92m[3]Kharej | [1]IRAN\033[0m')
    print('2. \033[93m[1]Kharej | [3]IRAN\033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kh_ipip6()
            break
        elif server_type == '2':
            ir_ipip6()
            break
        elif server_type == '0':
            clear()
            remove2_menu()
            break
        else:
            print('Invalid choice.')

def kh_ipip6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m IP6IP6 [3]Kharej\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[1]\033[0m')
    print('2. \033[93mKharej[2]\033[0m')
    print('3. \033[92mKharej[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mIRAN \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_ipip61()
            break
        elif server_type == '2':
            remove_ipip62()
            break
        elif server_type == '3':
            remove_ipip63()
            break
        elif server_type == '4':
            rmv1_q()
            break
        elif server_type == '0':
            clear()
            rmv_ipip6()
            break
        else:
            print('Invalid choice.')
def rmv1_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "remove_ipip6{}".format(i)
        globals()[menu_name]()  
def ir_ipip6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m IP6IP6 [3]IRAN\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN[1]\033[0m')
    print('2. \033[93mIRAN[2]\033[0m')
    print('3. \033[92mIRAN[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mKharej \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_ipip61()
            break
        elif server_type == '2':
            remove_ipip62()
            break
        elif server_type == '3':
            remove_ipip63()
            break
        elif server_type == '4':
            rmv2_q()
            break
        elif server_type == '0':
            clear()
            rmv_ipip6()
            break
        else:
            print('Invalid choice.')

def rmv2_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "remove_ipip6{}".format(i)
        globals()[menu_name]()  
        
def remove_ipip64():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mIPIP6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/ipip1.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip1.sh", shell=True)
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)
        if subprocess.call("test -f /etc/ipip2.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip2.sh", shell=True)
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)
        if subprocess.call("test -f /etc/ipip3.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip3.sh", shell=True)
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip1.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private1.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip2.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private2.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip3.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private3.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_ip1.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_ip2.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_ip3.sh", shell=True)

        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl disable ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip3.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumip1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip1 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumip2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip2 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumip3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip3 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi1 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi2 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi3 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove_ipip61():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mIPIP6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/ipip1.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip1.sh", shell=True)
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip1.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private1.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        sleep(1)
        subprocess.run("sudo rm /etc/ping_ip1.sh", shell=True)

        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl disable ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip1.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumip1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip1 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi1 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def remove_ipip62():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mIPIP6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/ipip2.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip2.sh", shell=True)
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip2.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private2.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        sleep(1)
        subprocess.run("sudo rm /etc/ping_ip2.sh", shell=True)

        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl disable ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip2.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumip2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip2 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi2 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def remove_ipip63():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mIPIP6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/ipip3.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip3.sh", shell=True)
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip3.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private3.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        sleep(1)
        subprocess.run("sudo rm /etc/ping_ip3.sh", shell=True)

        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl disable ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip3.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumip3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip3 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi3 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())	
        
def rmv_gre6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m GRE6\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[3] | IRAN[1]\033[0m')
    print('2. \033[93mKharej[1] | IRAN[3]\033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kh_gre6()
            break
        elif server_type == '2':
            ir_gre6()
            break
        elif server_type == '0':
            clear()
            remove2_menu()
            break
        else:
            print('Invalid choice.')

def kh_gre6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m GRE6 [3]Kharej\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[1]\033[0m')
    print('2. \033[93mKharej[2]\033[0m')
    print('3. \033[92mKharej[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mIRAN \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_gre61()
            break
        elif server_type == '2':
            remove_gre62()
            break
        elif server_type == '3':
            remove_gre63()
            break
        elif server_type == '4':
            rmv3_q()
            break
        elif server_type == '0':
            clear()
            rmv_gre6()
            break
        else:
            print('Invalid choice.')
def rmv3_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "remove_gre6{}".format(i)
        globals()[menu_name]()  
def ir_gre6():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m GRE6 [3]IRAN\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN[1]\033[0m')
    print('2. \033[93mIRAN[2]\033[0m')
    print('3. \033[92mIRAN[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mKharej \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_gre61()
            break
        elif server_type == '2':
            remove_gre62()
            break
        elif server_type == '3':
            remove_gre63()
            break
        elif server_type == '4':
            rmv4_q()
            break
        elif server_type == '0':
            clear()
            rmv_gre6()
            break
        else:
            print('Invalid choice.')

def rmv4_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "remove_gre6{}".format(i)
        globals()[menu_name]()  
        
def remove_gre64():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre61.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre61.sh", shell=True)
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)
        if subprocess.call("test -f /etc/gre62.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre62.sh", shell=True)
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)
        if subprocess.call("test -f /etc/gre63.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre63.sh", shell=True)
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre61.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private1.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre62.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private2.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre63.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private3.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_ip1.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_ip2.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_ip3.sh", shell=True)

        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl disable ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi1 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi2 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi3 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumig61 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig61 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumig62 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig62 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumig63 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig63 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
		
def remove_gre61():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre61.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre61.sh", shell=True)
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre61.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private1.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        time.sleep(1)
        subprocess.run("sudo rm /etc/ping_ip1.sh", shell=True)

        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl disable ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip1.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip1.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi1 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumig61 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig61 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def remove_gre62():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre62.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre62.sh", shell=True)
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre62.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private2.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        time.sleep(1)
        subprocess.run("sudo rm /etc/ping_ip2.sh", shell=True)

        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl disable ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip2.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip2.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi2 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumig62 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig62 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def remove_gre63():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre63.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre63.sh", shell=True)
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre63.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private3.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        time.sleep(1)
        subprocess.run("sudo rm /etc/ping_ip3.sh", shell=True)

        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl disable ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip3.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip3.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi3 > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumig63 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig63 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def rmv_private():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m Private\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[5] | IRAN[1]\033[0m')
    print('2. \033[93mKharej[1] | IRAN[5] \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kh_private()
            break
        elif server_type == '2':
            ir_private()
            break
        elif server_type == '0':
            clear()
            remove2_menu()
            break
        else:
            print('Invalid choice.')

def rmv5_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "remove_private{}".format(i)
        globals()[menu_name]() 
        
def kh_private():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m Private [5]Kharej\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[1]\033[0m')
    print('2. \033[93mKharej[2]\033[0m')
    print('3. \033[92mKharej[3]\033[0m')
    print('4. \033[92mKharej[4]\033[0m')
    print('5. \033[92mKharej[5]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('6. \033[93mIRAN \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_private1()
            break
        elif server_type == '2':
            remove_private2()
            break
        elif server_type == '3':
            remove_private3()
            break
        elif server_type == '4':
            remove_private4()
            break
        elif server_type == '5':
            remove_private5()
            break
        elif server_type == '6':
            rmv5_q()
            break
        elif server_type == '0':
            clear()
            rmv_private()
            break
        else:
            print('Invalid choice.')

def ir_private():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m Private [5]IRAN\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN[1]\033[0m')
    print('2. \033[93mIRAN[2]\033[0m')
    print('3. \033[92mIRAN[3]\033[0m')
    print('4. \033[92mIRAN[4]\033[0m')
    print('5. \033[92mIRAN[5]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('6. \033[93mKharej \033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_private1()
            break
        elif server_type == '2':
            remove_private2()
            break
        elif server_type == '3':
            remove_private3()
            break
        elif server_type == '4':
            remove_private4()
            break
        elif server_type == '5':
            remove_private5()
            break
        elif server_type == '6':
            rmv6_q()
            break
        elif server_type == '0':
            clear()
            rmv_private()
            break
        else:
            print('Invalid choice.')

def rmv6_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "remove_private{}".format(i)
        globals()[menu_name]() 
        
def remove_private6():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)
        if subprocess.call("test -f /etc/private4.sh", shell=True) == 0:
            subprocess.run("rm /etc/private4.sh", shell=True)
        if subprocess.call("test -f /etc/private5.sh", shell=True) == 0:
            subprocess.run("rm /etc/private5.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private1.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private2.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private3.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private4.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private5.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v64.sh", shell=True)
        subprocess.run("sudo rm /etc/ping_v65.sh", shell=True)
        
        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v65.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi1 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi2 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi3 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi4 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi4 > /dev/null", shell=True)
        subprocess.run("ip link set dev azumi5 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi5 > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove_private1():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private1.sh", shell=True) == 0:
            subprocess.run("rm /etc/private1.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private1.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v61.sh", shell=True)
        
        time.sleep(1)
        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi1 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi1 > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove_private2():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private2.sh", shell=True) == 0:
            subprocess.run("rm /etc/private2.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private2.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v62.sh", shell=True)
        
        time.sleep(1)
        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi2 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi2 > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove_private3():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private3.sh", shell=True) == 0:
            subprocess.run("rm /etc/private3.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private3.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v63.sh", shell=True)
        
        time.sleep(1)
        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi3 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi3 > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())


def remove_private4():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private4.sh", shell=True) == 0:
            subprocess.run("rm /etc/private4.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private4.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v64.sh", shell=True)
        
        time.sleep(1)
        subprocess.run("systemctl disable ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v64.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi4 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi4 > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1 
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove_private5():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private5.sh", shell=True) == 0:
            subprocess.run("rm /etc/private5.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private5.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v65.sh", shell=True)
        
        time.sleep(1)
        subprocess.run("systemctl disable ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v65.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi5 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi5 > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1 
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
## 11
def gre6_mnu_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE6 \033[92m Multiple Servers\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[96mKHAREJ\033[92m[3]  \033[93mIRAN\033[92m[1]\033[0m')
    print('2. \033[96mKHAREJ\033[92m[1]  \033[93mIRAN\033[92m[3]\033[0m')
    print('0. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6_kh_ip()
            break
        elif server_type == '2':
            gre6_ir_ip()
            break
        elif server_type == '0':
            os.system("clear")
            main_menu()
            break
        else:
            print('Invalid choice.')    
       
def gre6_kh_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE6 \033[92m[3]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[1]\033[0m')
    print('2. \033[93mKharej[2]\033[0m')
    print('3. \033[92mKharej[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mIRAN\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_gre61_menu()
            break
        elif server_type == '2':
            kharej_gre62_menu()
            break
        elif server_type == '3':
            kharej_gre63_menu()
            break
        elif server_type == '4':
            kharejgre_q()
            break
        elif server_type == '0':
            os.system("clear")
            gre6_mnu_ip()
            break
        else:
            print('Invalid choice.')

def kharejgre_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "iran_gre6{}_menu".format(i)
        globals()[menu_name]()

def gre6_ir_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIP6IP6 \033[92m[3]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN[1]\033[0m')
    print('2. \033[93mIRAN[2]\033[0m')
    print('3. \033[92mIRAN[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mKharej\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            iran2_gre61_menu()
            break
        elif server_type == '2':
            iran2_gre62_menu()
            break
        elif server_type == '3':
            iran2_gre63_menu()
            break
        elif server_type == '4':
            irangre_q()
            break
        elif server_type == '0':
            os.system("clear")
            gre6_mnu_ip()
            break
        else:
            print('Invalid choice.')
           
def irangre_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "kharej2_gre6{}_menu".format(i)
        globals()[menu_name]()     
			
   ##kharej1       
def run1_ping():
    try:
        subprocess.run(["ping", "-c", "2", "2001:831b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_kharej1_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:831b::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		


def gre61_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/gre61.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre61.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
		
def ping_gre61_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip1.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip1.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip1.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip1.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip1.service'])

def gre61_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre61.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig61 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig61' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig61 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig61' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig61' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumig61 mtu {mtu_value}'
        with open('/etc/gre61.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    
    print("\033[93mCreated IPv6 Addresses \033[92mServer 1:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::1               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


def create_ping1_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def gre61_kharej():
    remote_ip = "2001:831b::2" #iran-ip
    local_ip = "2001:831b::1"   #kharej ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre61_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping1_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre61_service()

    gre61_cronjob()
   
def kharej_gre61_menu():
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej[1]\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[1]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"

    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre61_kharej()
    sleep(1)	
    
## kharej1 for iran 1
def kharej2_gre61_menu():
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej[1]\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[1]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre61_kharej()
    sleep(1)	    
   ##kharej2       
def run2_ping():
    try:
        subprocess.run(["ping", "-c", "2", "2001:841b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def ping_v62_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v62.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v62.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v62.service'])
    subprocess.run(['systemctl', 'start', 'ping_v62.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v62.service'])
    

	
def display_kharej2_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:841b::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		

def add_cron2_job():
    file_path = '/etc/private2.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

def gre62_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/gre62.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre62.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
		
def ping_gre62_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip2.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip2.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip2.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip2.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip2.service'])

def gre62_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre62.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig62 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:841a::1/64 dev azumig62' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig62 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig62' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:84{i}a::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig62' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumig62 mtu {mtu_value}'
        with open('/etc/gre62.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    
    print("\033[93mCreated IPv6 Addresses \033[92mServer 2:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:841a::1               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


def create_ping2_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def gre62_kharej():
    remote_ip = "2001:841b::2" #iran-ip
    local_ip = "2001:841b::1"   #kharej ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre62_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:841a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping2_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre62_service()

    gre62_cronjob()
   
def kharej_gre62_menu():
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej[2]\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[2]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:841b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre62_kharej()
    sleep(1)	

## kharej 2 for iran 2
def kharej2_gre62_menu():
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej[2]\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[2]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:841b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre62_kharej()
    sleep(1)	
   ##kharej3       
def run3_ping():
    try:
        subprocess.run(["ping", "-c", "2", "2001:851b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def ping_v63_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v63.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v63.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v63.service'])
    subprocess.run(['systemctl', 'start', 'ping_v63.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v63.service'])
    

	
def display_kharej3_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:851b::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		

def add_cron3_job():
    file_path = '/etc/private3.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

def gre63_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/gre63.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre63.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
		
def ping_gre63_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip3.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip3.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip3.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip3.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip3.service'])

def gre63_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre63.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig63 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:851a::1/64 dev azumig63' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig63 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig63' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:85{i}a::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig63' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumig63 mtu {mtu_value}'
        with open('/etc/gre63.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    
    print("\033[93mCreated IPv6 Addresses \033[92mServer 3:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:851a::1               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


def create_ping3_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def gre63_kharej():
    remote_ip = "2001:851b::2" #iran-ip
    local_ip = "2001:851b::1"   #kharej ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre63_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:851a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping3_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre63_service()

    gre63_cronjob()
   
def kharej_gre63_menu():
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej[3]\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[3]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::1/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:851b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre63_kharej()
    sleep(1)
## kharej 3 for iran 3
def kharej2_gre63_menu():
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej[3]\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[3]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::1/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:851b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre63_kharej()
    sleep(1)    
 ##### IRAN gre6 server 1
def iran_ping1():
    try:
        subprocess.run(["ping", "-c", "2", "2001:831b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran1_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:831b::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		


def iran_gre61_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip1.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip1.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip1.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip1.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip1.service'])

def gre61_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre61.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig61 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig61' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig61 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig61' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig61' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumig61 mtu {mtu_value}'
        with open('/etc/gre61.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 1:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

##default route iran server 1
def gre61_iran2_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre61.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig61 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig61' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig61 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig61' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig61' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
        with open('/etc/gre61.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig61 mtu {mtu_value}\n"
        with open('/etc/gre61.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 1:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def iran_ping1_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    

def gre61_iran():
    remote_ip = "2001:831b::1" #kharej ip
    local_ip = "2001:831b::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre61_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping1_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre61_service()

    gre61_cronjob()
## default route iran1
def gre61_iran2():
    remote_ip = "2001:831b::1" #kharej ip
    local_ip = "2001:831b::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre61_iran2_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping1_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre61_service()

    gre61_cronjob()   

def iran_gre61_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[96m Server\033[92m[1]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[1]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping1()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:831b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre61_iran()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
##default route iran1 command
def iran2_gre61_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[96m Server\033[92m[1]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[96m [1]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping1()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:831b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre61_iran2()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")  
    
 ##### IRAN gre6 server 2
def iran_ping2():
    try:
        subprocess.run(["ping", "-c", "2", "2001:841b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran2_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:841b::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		


def iran_gre62_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip2.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip2.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip2.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip2.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip2.service'])

def gre62_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre62.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig62 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:841a::2/64 dev azumig62' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig62 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig62' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:84{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig62' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumig62 mtu {mtu_value}'
        with open('/etc/gre62.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)    

    sleep(1)
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 2:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:841a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
## default route iran server 2
def gre62_iran2_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre62.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig62 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:841a::2/64 dev azumig62' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig62 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig62' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:84{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig62' >> {file_path}"
        subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:841a::2\n".format(interface)
        with open('/etc/gre62.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig62 mtu {mtu_value}\n"
        with open('/etc/gre62.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 2:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:841a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def iran_ping2_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    

def gre62_iran():
    remote_ip = "2001:841b::1" #kharej ip
    local_ip = "2001:841b::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre62_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:841a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping2_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre62_service()

    gre62_cronjob()
#default route server iran 2 
def gre62_iran2():
    remote_ip = "2001:841b::1" #kharej ip
    local_ip = "2001:841b::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre62_iran2_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:841a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping2_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre62_service()

    gre62_cronjob()
    
def iran_gre62_menu():
 
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[96m Server\033[92m[2]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[2]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping2()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:841b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre62_iran()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")

# default route iran 2 menu
def iran2_gre62_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[96m Server\033[92m[2]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[2]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping2()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:841b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre62_iran2()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    
 ##### IRAN gre6 server 3
def iran_ping3():
    try:
        subprocess.run(["ping", "-c", "2", "2001:851b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran3_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:851b::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		


def iran_gre63_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip3.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip3.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip3.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip3.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip3.service'])

def gre63_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre63.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig63 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:851a::2/64 dev azumig63' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig63 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig63' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:85{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig63' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumig63 mtu {mtu_value}'
        with open('/etc/gre63.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 3:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:851a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

## default route server iran 3

def gre63_iran2_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre63.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig63 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:851a::2/64 dev azumig63' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig63 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig63' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:85{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig63' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:851a::2\n".format(interface)
        with open('/etc/gre63.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = "ip link set dev azumig63 mtu {mtu_value}\n"
        with open('/etc/gre63.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 3:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:851a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def iran_ping3_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    

def gre63_iran():
    remote_ip = "2001:851b::1" #kharej ip
    local_ip = "2001:851b::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre63_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:851a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping3_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre63_service()

    gre63_cronjob()
   
## default route iran server 3
def gre63_iran2():
    remote_ip = "2001:851b::1" #kharej ip
    local_ip = "2001:851b::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre63_iran2_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:851a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping3_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre63_service()

    gre63_cronjob()
    
def iran_gre63_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[96m Server\033[92m[3]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[3]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)


    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping3()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:851b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre63_iran()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
#default route
def iran2_gre63_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[96m Server\033[92m[3]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[3]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping3()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:851b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre63_iran2()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    
## 10
def ip6_mnu_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIP6IP6 \033[92m Multiple Servers\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[96mKHAREJ\033[92m[3]  \033[93mIRAN\033[92m[1]\033[0m')
    print('2. \033[96mKHAREJ\033[92m[1]  \033[93mIRAN\033[92m[3]\033[0m')
    print('0. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ip6_kh_ip()
            break
        elif server_type == '2':
            ip6_ir_ip()
            break
        elif server_type == '0':
            os.system("clear")
            main_menu()
            break
        else:
            print('Invalid choice.')    
       
def ip6_kh_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIP6IP6 \033[92m[3]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[1]\033[0m')
    print('2. \033[93mKharej[2]\033[0m')
    print('3. \033[92mKharej[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mIRAN\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_ipip61_menu()
            break
        elif server_type == '2':
            kharej_ipip62_menu()
            break
        elif server_type == '3':
            kharej_ipip63_menu()
            break
        elif server_type == '4':
            kharejip_q()
            break
        elif server_type == '0':
            os.system("clear")
            ip6_mnu_ip()
            break
        else:
            print('Invalid choice.')

def kharejip_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "iran_ipip6{}_menu".format(i)
        globals()[menu_name]()

def ip6_ir_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIP6IP6 \033[92m[3]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN[1]\033[0m')
    print('2. \033[93mIRAN[2]\033[0m')
    print('3. \033[92mIRAN[3]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('4. \033[93mKharej\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            iran2_ipip61_menu()
            break
        elif server_type == '2':
            iran2_ipip62_menu()
            break
        elif server_type == '3':
            iran2_ipip63_menu()
            break
        elif server_type == '4':
            iranip_q()
            break
        elif server_type == '0':
            os.system("clear")
            ip6_mnu_ip()
            break
        else:
            print('Invalid choice.')
            
def iranip_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "kharej2_ipip6{}_menu".format(i)
        globals()[menu_name]()     
        
def run_ping1():
    try:
        subprocess.run(["ping", "-c", "2", "2001:831b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_kharej1_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:831b::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    

##ipip6 kharej
def ping_ipip1_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip1.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip1.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip1.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip1.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip1.service'])


def ipip61_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip1 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:0db8:1234:a220::1/64 dev azumip1' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip1 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip1' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:0db8:1234:a22{i}::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumip1' >> {file_path}"
        subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip1 mtu {mtu_value}\n"
        with open('/etc/ipip1.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 1:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:0db8:1234:a220::1    |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def ipip1_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip1.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip1.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def create_ping1_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip1_kharej():
    remote_ip = "2001:831b::2" #iran-ip
    local_ip = "2001:831b::1"   #kharej ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip61_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a220::2" #iranip
    max_pings = 3
    interval = 20
    create_ping1_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)
    
    ping_ipip1_service()

    ipip1_cronjob()
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")
    
def kharej_ipip61_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[92m[1]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[1]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip1_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

## kharej 1 for iran 1
def kharej2_ipip61_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[92m[1]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[1]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip1_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
##kharej2

def run_ping2():
    try:
        subprocess.run(["ping", "-c", "2", "2001:841b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
	
def display_kharej2_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:841b::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


##ipip6 kharej
def ping_ipip2_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip2.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip2.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip2.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip2.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip2.service'])


def ipip62_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip2 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:0db8:1234:a320::1/64 dev azumip2' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip2 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip2' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:0db8:1234:a32{i}::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumip2' >> {file_path}"
        subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip2 mtu {mtu_value}\n"
        with open('/etc/ipip2.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 2:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:0db8:1234:a320::1    |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def ipip2_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip2.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip2.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def create_ping2_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip2_kharej():
    remote_ip = "2001:841b::2" #iran-ip
    local_ip = "2001:841b::1"   #kharej ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip62_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a320::2" #iranip
    max_pings = 3
    interval = 20
    create_ping2_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)
    
    ping_ipip2_service()

    ipip2_cronjob()
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")
    
def kharej_ipip62_menu():
 
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[92m[2]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[2]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:841b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip2_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

# kharej 2 for iran 2
def kharej2_ipip62_menu():
 
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[92m[2]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[2]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:841b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip2_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

##kharej3

def run_ping3():
    try:
        subprocess.run(["ping", "-c", "2", "2001:851b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
	
def display_kharej3_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:851b::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    


##ipip6 kharej
def ping_ipip3_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip3.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip3.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip3.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip3.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip3.service'])


def ipip63_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip3 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:0db8:1234:a420::1/64 dev azumip3' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip3 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip3' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:0db8:1234:a42{i}::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumip3' >> {file_path}"
        subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip3 mtu {mtu_value}\n"
        with open('/etc/ipip3.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    

    print("\033[93mCreated IPv6 Addresses \033[92mServer 3:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:0db8:1234:a420::1    |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def ipip3_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip3.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip3.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def create_ping3_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip3_kharej():
    remote_ip = "2001:851b::2" #iran-ip
    local_ip = "2001:851b::1"   #kharej ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip63_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a420::2" #iranip
    max_pings = 3
    interval = 20
    create_ping3_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)
    
    ping_ipip3_service()

    ipip3_cronjob()
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")
    
def kharej_ipip63_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[92m[3]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[3]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::1/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:851b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip3_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

# kharej 3 for iran 3

def kharej2_ipip63_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IP6IP6 \033[92mKharej\033[93m server\033[92m[3]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[3]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::1/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:851b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip3_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")   
 ##### IRAN IPIP6 server 1
def iran_ping1():
    try:
        subprocess.run(["ping", "-c", "2", "2001:831b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran1_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:831b::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

##ipip6 iran


def iran_ipip1_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip1.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip1.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip1.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip1.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip1.service'])


def ipip61_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip1 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a220::2/64 dev azumip1\n')
        f.write('ip link set azumip1 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip1\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a22{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip1\n')

        

    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f'bash {file_path}', shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumip1 mtu {mtu_value}'
        with open('/etc/ipip1.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 1:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a220::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')

# default route ipip_iran1
def ipip61_iran2_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip1 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a220::2/64 dev azumip1\n')
        f.write('ip link set azumip1 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip1\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a22{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip1\n')

    subprocess.run(f'bash {file_path}', shell=True, check=True)   
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:0db8:1234:a220::2\n".format(interface)
        with open('/etc/ipip1.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip1 mtu {mtu_value}\n"
        with open('/etc/ipip1.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 1:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a220::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    
def ipip1_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip1.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip1.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def iran_ping1_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip1.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip1_iran():
    remote_ip = "2001:831b::1" #kharej-ip
    local_ip = "2001:831b::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip61_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a220::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping1_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip1_service()

    ipip1_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")

# default route iran 1
def ipip1_iran2():
    remote_ip = "2001:831b::1" #kharej-ip
    local_ip = "2001:831b::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip61_iran2_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a220::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping1_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip1_service()

    ipip1_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")   
#sit iran
def iran_ipip61_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[1]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[1]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping1()


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip1_iran()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
##default route iran server 1 menu
def iran2_ipip61_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[1]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[1]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private1.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping1()


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip1_iran2()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
 ##### IRAN IPIP6 server 2
def iran_ping2():
    try:
        subprocess.run(["ping", "-c", "2", "2001:841b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran2_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:841b::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

##ipip6 iran2


def iran_ipip2_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip2.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip2.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip2.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip2.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip2.service'])


def ipip62_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip2 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a320::2/64 dev azumip2\n')
        f.write('ip link set azumip2 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip2\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a32{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip2\n')

        

    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f'bash {file_path}', shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip2 mtu {mtu_value}\n"
        with open('/etc/ipip2.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)


    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 2:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a320::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')

##defaul route ipip iran2
def ipip62_iran2_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip2 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a320::2/64 dev azumip2\n')
        f.write('ip link set azumip2 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip2\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a32{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip2\n')

    subprocess.run(f'bash {file_path}', shell=True, check=True)    
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:0db8:1234:a320::2\n".format(interface)
        with open('/etc/ipip2.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip2 mtu {mtu_value}\n"
        with open('/etc/ipip2.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)


    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 2:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a320::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')

def ipip2_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip2.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip2.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def iran_ping2_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip2.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip2_iran():
    remote_ip = "2001:841b::1" #kharej-ip
    local_ip = "2001:841b::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip62_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a320::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping2_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip2_service()

    ipip2_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")

#default route iran server 2
def ipip2_iran2():
    remote_ip = "2001:841b::1" #kharej-ip
    local_ip = "2001:841b::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip62_iran2_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a320::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping2_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip2_service()

    ipip2_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")
   
#sit iran
def iran_ipip62_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[2]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[2]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)           
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping2()


    script_content1 = '''#!/bin/bash


ip_address="2001:841b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip2_iran()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

##default route iran server 2 menu
def iran2_ipip62_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[2]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[2]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private2.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping2()


    script_content1 = '''#!/bin/bash


ip_address="2001:841b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip2_iran2()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")   
    
 ##### IRAN IPIP6 server 3
def iran_ping3():
    try:
        subprocess.run(["ping", "-c", "2", "2001:851b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran3_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "2001:851b::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

##ipip6 iran3


def iran_ipip3_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip3.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip3.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip3.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip3.service'])
    subprocess.run(['systemctl', 'restart', 'ping_ip3.service'])


def ipip63_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip3 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a420::2/64 dev azumip3\n')
        f.write('ip link set azumip3 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip3\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a42{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip3\n')

        

    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f'bash {file_path}', shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip3 mtu {mtu_value}\n"
        with open('/etc/ipip3.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 3:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a420::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')

##default route ipip iran3
def ipip63_iran2_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip3 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a420::2/64 dev azumip3\n')
        f.write('ip link set azumip3 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip3\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a42{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip3\n')

    subprocess.run(f'bash {file_path}', shell=True, check=True)    
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:0db8:1234:a420::2\n".format(interface)
        with open('/etc/ipip3.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip3 mtu {mtu_value}\n"
        with open('/etc/ipip3.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 3:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a420::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')

def ipip3_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip3.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip3.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def iran_ping3_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip3.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip3_iran():
    remote_ip = "2001:851b::1" #kharej-ip
    local_ip = "2001:851b::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip63_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a420::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping3_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip3_service()

    ipip3_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")

#default route iran server 2
def ipip3_iran2():
    remote_ip = "2001:851b::1" #kharej-ip
    local_ip = "2001:851b::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip63_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a420::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping3_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip3_service()

    ipip3_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")
    
#sit iran
def iran_ipip63_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[3]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[3]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)         
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping3()


    script_content1 = '''#!/bin/bash


ip_address="2001:851b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip3_iran()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

##default route iran server 3 menu
def iran2_ipip63_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[3]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[3]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)           
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private3.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping3()


    script_content1 = '''#!/bin/bash


ip_address="2001:851b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip3_iran2()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
 ##### IRAN IPIP6 server 4
def iran_ping4():
    try:
        subprocess.run(["ping", "-c", "2", "fd1d:fc98:b73e:b781::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran4_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "fd1d:fc98:b73e:b781::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

##ipip6 iran4


def iran_ipip4_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip4.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip4.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip4.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip4.service'])
    subprocess.run(['systemctl', 'restart', 'ping_ip4.service'])


def ipip64_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip4.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip4 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a520::2/64 dev azumip4\n')
        f.write('ip link set azumip4 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip4\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a52{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip4\n')

        

    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f'bash {file_path}', shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumip4 mtu {mtu_value}'
        with open('/etc/ipip4.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 4:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a520::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')



def ipip4_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip4.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip4.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def iran_ping4_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip4.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip4_iran():
    remote_ip = "fd1d:fc98:b73e:b781::1" #kharej-ip
    local_ip = "fd1d:fc98:b73e:b781::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip64_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a520::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping4_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip4_service()

    ipip4_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")

   
#sit iran
def iran_ipip64_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[4]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[4]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi4", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b781::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add fd1d:fc98:b73e:b781::2/64 dev azumi4\n")
        f.write("ip -6 route add fd1d::/16 dev azumi4\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private4.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron4_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping4()


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b681::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v64.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v64.sh', 0o755)
    ping_v64_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip4_iran()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
 ##### IRAN IPIP6 server 5
def iran_ping5():
    try:
        subprocess.run(["ping", "-c", "2", "fd1d:fc98:b73e:b881::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran5_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "fd1d:fc98:b73e:b881::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

##ipip6 iran4


def iran_ipip5_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip5.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip5.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip5.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip5.service'])
    subprocess.run(['systemctl', 'restart', 'ping_ip5.service'])


def ipip65_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip5.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip5 mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a620::2/64 dev azumip5\n')
        f.write('ip link set azumip5 up\n')
        f.write('ip -6 route add 2002::/16 dev azumip5\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a62{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip5\n')

    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f'bash {file_path}', shell=True, check=True)
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f'ip link set dev azumip5 mtu {mtu_value}'
        with open('/etc/ipip5.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    
    


    print('\033[93mCreated IPv6 Addresses \033[92mServer 5:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a620::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')



def ipip5_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip5.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip5.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def iran_ping5_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip5.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip5_iran():
    remote_ip = "fd1d:fc98:b73e:b881::1" #kharej-ip
    local_ip = "fd1d:fc98:b73e:b881::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip65_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a620::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping5_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip5_service()

    ipip5_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")

   
#sit iran
def iran_ipip65_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mServer\033[93m\033[96m[5]\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[5]\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi5", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b881::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add fd1d:fc98:b73e:b881::2/64 dev azumi5\n")
        f.write("ip -6 route add fd1d::/16 dev azumi5\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private5.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron5_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping5()


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b681::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v65.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v65.sh', 0o755)
    ping_v65_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip5_iran()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
## 12

    ##### PRIVATE 5 kharej 1 iran
def priv_mnu_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mPrivateIP \033[92m Multiple Servers\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[96mKharej\033[92m[5] \033[93mIRAN\033[92m[1]\033[0m')
    print('2. \033[96mKharej\033[92m[1] \033[93mIRAN\033[92m[5]  \033[0m')
    print('0. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            priv_kh_ip()
            break
        elif server_type == '2':
            priv_ir_ip()
            break
        elif server_type == '0':
            os.system("clear")
            main_menu()
            break
        else:
            print('Invalid choice.')    
       
def priv_kh_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mPrivate IP \033[92m[5]Kharej\033[96m [1]IRAN\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej[1]\033[0m')
    print('2. \033[92mKharej[2]\033[0m')
    print('3. \033[93mKharej[3]\033[0m')
    print('4. \033[92mKharej[4]\033[0m')
    print('5. \033[92mKharej[5]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('6. \033[93mIRAN\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej1_private_menu()
            break
        elif server_type == '2':
            kharej2_private_menu()
            break
        elif server_type == '3':
            kharej3_private_menu()
            break
        elif server_type == '4':
            kharej4_private_menu()
            break
        elif server_type == '5':
            kharej5_private_menu()
            break
        elif server_type == '6':
            kharej_q()
            break
        elif server_type == '0':
            os.system("clear")
            priv_mnu_ip()
            break
        else:
            print('Invalid choice.')
            
def kharej_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mkharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "iran{}_private_menu".format(i)
        globals()[menu_name]()       

def priv_ir_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mPrivate IP \033[92m[5]IRAN\033[96m [1]Kharej\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN[1]\033[0m')
    print('2. \033[92mIRAN[2]\033[0m')
    print('3. \033[93mIRAN[3]\033[0m')
    print('4. \033[92mIRAN[4]\033[0m')
    print('5. \033[92mIRAN[5]\033[0m')
    print("\033[93m───────────────────────────────────────\033[0m")
    print('6. \033[93mKharej\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            iran1_private2_menu()
            break
        elif server_type == '2':
            iran2_private2_menu()
            break
        elif server_type == '3':
            iran3_private2_menu()
            break
        elif server_type == '4':
            iran4_private2_menu()
            break
        elif server_type == '5':
            iran5_private2_menu()
            break
        elif server_type == '6':
            iran_q()
            break
        elif server_type == '0':
            os.system("clear")
            priv_mnu_ip()
            break
        else:
            print('Invalid choice.')
            
def iran_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "kharej{}_private2_menu".format(i)
        globals()[menu_name]()       		
## Kharej 1
def add_cron1_job():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/private1.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private1.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def run_ping1():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:831b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

        
def ping_v61_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v61.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v61.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v61.service'])
    subprocess.run(['systemctl', 'start', 'ping_v61.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v61.service'])
    
        

            
def kharej1_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[1]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [1]...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[1]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi1"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi1"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:83{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")
# kharej1 for iran 1
def kharej1_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[1]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [1]...\033[0m")

    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[1]\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi1"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi1"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi1"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:83{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi1\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron1_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping1()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v61.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")    
## Kharej 2
def add_cron2_job():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/private2.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private2.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def run_ping2():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:841b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

        
def ping_v62_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v62.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v62.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v62.service'])
    subprocess.run(['systemctl', 'start', 'ping_v62.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v62.service'])
    
        

            
def kharej2_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[2]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [2]...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[2]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi2"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi2"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:84{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:841b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")
 
# kharej 2 for iran 2

def kharej2_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[2]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [2]...\033[0m")

    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[2]\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:841b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi2"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi2"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi2"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::1/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:84{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi2\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping2()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:841b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v62.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")
    
## Kharej 3
def add_cron3_job():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/private3.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private3.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def run_ping3():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:851b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

        
def ping_v63_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v63.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v63.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v63.service'])
    subprocess.run(['systemctl', 'start', 'ping_v63.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v63.service'])
    
        

            
def kharej3_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[3]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [3]...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[3]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi3"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi3"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::1/64 dev azumi3\n")
        f.write("ip -6 route add fd1d::/16 dev azumi3\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:85{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:851b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")

# kharej 3 for iran 3

def kharej3_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[3]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [3]...\033[0m")

    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[3]\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:851b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi3"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi3"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi3"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::1/64 dev azumi3\n")
        f.write("ip -6 route add fd1d::/16 dev azumi3\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:85{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi3\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping3()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:851b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v63.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")
    
## Kharej 4
def add_cron4_job():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/private4.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private4.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def run_ping4():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:861b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

        
def ping_v64_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v64.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v64.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v64.service'])
    subprocess.run(['systemctl', 'start', 'ping_v64.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v64.service'])
    
def kharej4_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[4]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [4]...\033[0m")

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[4]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi4", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:861b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi4"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi4"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi4"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2001:861b::1/64 dev azumi4\n")
        f.write("ip -6 route add 2001::/16 dev azumi4\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:86{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi4\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron4_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping4()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:861b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v64.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v64.sh', 0o755)
    ping_v64_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")

# kharej 4 for iran 4
def kharej4_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[4]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [4]...\033[0m")

    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[4]\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi4", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:861b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi4"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi4"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi4"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2001:861b::1/64 dev azumi4\n")
        f.write("ip -6 route add 2001::/16 dev azumi4\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:86{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi4\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron4_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping4()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:861b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v64.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v64.sh', 0o755)
    ping_v64_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")
    
## Kharej 5
def add_cron5_job():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/private5.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/private5.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def run_ping5():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:871b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)

        
def ping_v65_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v65.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v65.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v65.service'])
    subprocess.run(['systemctl', 'start', 'ping_v65.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v65.service'])
    
def kharej5_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[5]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [5]...\033[0m")

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej \033[96m[5]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi5", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:871b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi5"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi5"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi5"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2001:871b::1/64 dev azumi5\n")
        f.write("ip -6 route add 2001::/16 dev azumi5\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:87{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi5\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron5_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping5()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:871b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v65.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v65.sh', 0o755)
    ping_v65_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")

# kharej 5 for iran 5 
def kharej5_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server \033[92m[5]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server [5]...\033[0m")

    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN \033[96m[5]\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi5", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:871b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi5"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi5"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi5"], stdout=subprocess.DEVNULL)

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2001:871b::1/64 dev azumi5\n")
        f.write("ip -6 route add 2001::/16 dev azumi5\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:87{ip_suffix}b::1/64"
            f.write(f"ip addr add {ip_addr} dev azumi5\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron5_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping5()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:871b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v65.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v65.sh', 0o755)
    ping_v65_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")
    
## IRAN1
def run_ping1_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:831b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def iran1_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[1]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[1]...\033[0m")
    
    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[1]\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi1"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi1"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi1"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:83{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi1\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron1_job()

    sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping1_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:831b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v61.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()

## route for iran1_private_menu
def iran1_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[1]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[1]...\033[0m")
    
    if os.path.isfile("/etc/private1.sh"):
        os.remove("/etc/private1.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[1]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi1", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi1", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi1"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi1"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi1"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi1"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private1.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi1 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi1 up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi1\n")
        f.write("ip -6 route add 2001::/16 dev azumi1\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:83{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi1\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:831b::2\n".format(interface)
        with open('/etc/private1.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"
        with open("/etc/private1.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron1_job()

    sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping1_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:831b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v61.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v61.sh', 0o755)
    ping_v61_service()
## IRAN2
def run_ping2_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:841b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def iran2_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[2]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[2]...\033[0m")
    
    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[2]\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:841b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi2"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi2"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi2"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:84{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi2\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping2_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:841b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v62.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()

## default route iran2_private_menu
def iran2_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[2]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[2]...\033[0m")
    
    if os.path.isfile("/etc/private2.sh"):
        os.remove("/etc/private2.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[2]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi2", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi2", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:841b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi2"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi2"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi2"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi2"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private2.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi2 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi2 up\n")
        f.write("ip addr add 2001:841b::2/64 dev azumi2\n")
        f.write("ip -6 route add 2001::/16 dev azumi2\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:84{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi2\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:841b::2\n".format(interface)
        with open('/etc/private2.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"
        with open("/etc/private2.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron2_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping2_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:84{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:841b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v62.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v62.sh', 0o755)
    ping_v62_service()
## IRAN3
def run_ping3_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:851b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def iran3_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[3]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[3]...\033[0m")
    
    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[3]\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:851b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi3"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi3"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi3"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:85{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi3\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping3_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:851b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v63.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()
## default route iran3_private_menu
def iran3_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[3]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[3]...\033[0m")
    
    if os.path.isfile("/etc/private3.sh"):
        os.remove("/etc/private3.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[3]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi3", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi3", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:851b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi3"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi3"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi3"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi3"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private3.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi3 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi3 up\n")
        f.write("ip addr add 2001:851b::2/64 dev azumi3\n")
        f.write("ip -6 route add 2001::/16 dev azumi3\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:85{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi3\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:851b::2\n".format(interface)
        with open('/etc/private3.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"
        with open("/etc/private3.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron3_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping3_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:85{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:851b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v63.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v63.sh', 0o755)
    ping_v63_service()    
## IRAN4
def run_ping4_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:861b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def iran4_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[4]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[4]...\033[0m")
    
    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[4]\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi4", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:861b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi4"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi4"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi4"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2001:861b::2/64 dev azumi4\n")
        f.write("ip -6 route add 2001::/16 dev azumi4\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:86{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi4\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron4_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping4_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:861b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v64.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v64.sh', 0o755)
    ping_v64_service()
##default route iran4_private_menu
def iran4_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[4]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[4]...\033[0m")
    
    if os.path.isfile("/etc/private4.sh"):
        os.remove("/etc/private4.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[4]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi4", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi4", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:861b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi4"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi4"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi4"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi4"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private4.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi4 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi4 up\n")
        f.write("ip addr add 2001:861b::2/64 dev azumi4\n")
        f.write("ip -6 route add 2001::/16 dev azumi4\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:86{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi4\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:861b::2\n".format(interface)
        with open('/etc/private4.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"
        with open("/etc/private4.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron4_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping4_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:86{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:861b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v64.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v64.sh', 0o755)
    ping_v64_service()    
## IRAN5
def run_ping5_iran():
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:871b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def iran5_private_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[5]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[5]...\033[0m")
    
    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej \033[96m[5]\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi5", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:871b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi5"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi5"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi5"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2001:871b::2/64 dev azumi5\n")
        f.write("ip -6 route add 2001::/16 dev azumi5\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:87{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi5\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron5_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping5_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:871b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v65.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v65.sh', 0o755)
    ping_v65_service()

#default route iran5_private_menu
def iran5_private2_menu():

    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Server\033[96m[5]\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Server[5]...\033[0m")
    
    if os.path.isfile("/etc/private5.sh"):
        os.remove("/etc/private5.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN \033[96m[5]\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi5", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi5", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:871b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi5"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi5"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92madditional private IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "addr", "show", "dev", "azumi5"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "addr", "add", ip_addr, "dev", "azumi5"], stdout=subprocess.DEVNULL)
    

    display_notification("\033[93mAdding commands...\033[0m")
    with open("/etc/private5.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi5 mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi5 up\n")
        f.write("ip addr add 2001:871b::2/64 dev azumi5\n")
        f.write("ip -6 route add 2001::/16 dev azumi5\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:87{ip_suffix}b::2/64"
            f.write(f"ip addr add {ip_addr} dev azumi5\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:871b::2\n".format(interface)
        with open('/etc/private5.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"
        with open("/etc/private5.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron5_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping5_iran()
    sleep(1)
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:87{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:871b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v65.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v65.sh', 0o755)
    ping_v65_service()
    
def mtu2_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mEdit MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92m6TO4\033[0m')
    print('2. \033[93mIP6IP6 \033[0m')
    print('3. \033[92mGRE6 \033[0m')
    print('4. \033[96manycast \033[0m')
    print('0. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            private_mnu()
            break
        elif server_type == '2':
            ip6_mnu()
            break
        elif server_type == '3':
            gre6_mnu()
            break      
        elif server_type == '4':
            i6to4any2_mtu()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

def private_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mPrivateIP Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92m[5]Kharej [1]IRAN\033[0m')
    print('2. \033[93m[1]Kharej [5]IRAN \033[0m')
    print('0. \033[94mback to the MTU menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            khprivate_mnu()
            break
        elif server_type == '2':
            irprivate_mnu()
            break
        elif server_type == '0':
            clear()
            mtu2_menu()
            break
        else:
            print('Invalid choice.')

def khprivate_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m[5]Kharej Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej [1]\033[0m')
    print('2. \033[93mKharej [2]\033[0m')
    print('3. \033[93mKharej [3]\033[0m')
    print('4. \033[92mKharej [4]\033[0m')
    print('5. \033[92mKharej [5]\033[0m')
    print("\033[93m──────────────────────────────────────\033[0m")
    print('6. \033[93mIRAN \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            priv_kh1_mtu()
            break
        elif server_type == '2':
            priv_kh2_mtu()
            break
        elif server_type == '3':
            priv_kh3_mtu()
            break
        elif server_type == '4':
            priv_kh4_mtu()
            break
        elif server_type == '5':
            priv_kh5_mtu()
            break
        elif server_type == '6':
            mtu1_q()
            break
        elif server_type == '0':
            clear()
            private_mnu()
            break
        else:
            print('Invalid choice.')  
            
def mtu1_q():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mTunnel [1]\033[0m')
    print('2. \033[93mTunnel [2]\033[0m')
    print('3. \033[93mTunnel [3]\033[0m')
    print('4. \033[92mTunnel [4]\033[0m')
    print('5. \033[92mTunnel [5]\033[0m')
    print('6. \033[96mAll OF Them\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            priv_ir1_mtu()
            break
        elif server_type == '2':
            priv_ir2_mtu()
            break
        elif server_type == '3':
            priv_ir3_mtu()
            break
        elif server_type == '4':
            priv_ir4_mtu()
            break
        elif server_type == '5':
            priv_ir5_mtu()
            break
        elif server_type == '6':
            mtu1_q1()
            break
        elif server_type == '0':
            clear()
            khprivate_mnu()
            break
        else:
            print('Invalid choice.')   

##later usage  
def mtu1_q1():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "priv_ir{}_mtu".format(i)
        globals()[menu_name]()   
        
def irprivate_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m[5]IRAN Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN [1]\033[0m')
    print('2. \033[93mIRAN [2]\033[0m')
    print('3. \033[93mIRAN [3]\033[0m')
    print('4. \033[92mIRAN [4]\033[0m')
    print('5. \033[92mIRAN [5]\033[0m')
    print("\033[93m──────────────────────────────────────\033[0m")
    print('6. \033[93mKharej \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            priv_ir1_mtu()
            break
        elif server_type == '2':
            priv_ir2_mtu()
            break
        elif server_type == '3':
            priv_ir3_mtu()
            break
        elif server_type == '4':
            priv_ir4_mtu()
            break
        elif server_type == '5':
            priv_ir5_mtu()
            break
        elif server_type == '6':
            mtu2_q()
            break
        elif server_type == '0':
            clear()
            private_mnu()
            break
        else:
            print('Invalid choice.')  
def mtu2_q():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKHAREJ MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mTunnel [1]\033[0m')
    print('2. \033[93mTunnel [2]\033[0m')
    print('3. \033[93mTunnel [3]\033[0m')
    print('4. \033[92mTunnel [4]\033[0m')
    print('5. \033[92mTunnel [5]\033[0m')
    print('6. \033[96mAll OF Them\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            priv_ir1_mtu()
            break
        elif server_type == '2':
            priv_ir2_mtu()
            break
        elif server_type == '3':
            priv_ir3_mtu()
            break
        elif server_type == '4':
            priv_ir4_mtu()
            break
        elif server_type == '5':
            priv_ir5_mtu()
            break
        elif server_type == '6':
            mtu1_q2()
            break
        elif server_type == '0':
            clear()
            irprivate_mnu()
            break
        else:
            print('Invalid choice.')   

#later usage
def mtu1_q2():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "priv_kh{}_mtu".format(i)
        globals()[menu_name]()   
        
## gre6 menu 

def gre6_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE6 Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92m[3]Kharej [1]IRAN\033[0m')
    print('2. \033[93m[1]Kharej [3]IRAN \033[0m')
    print('0. \033[94mback to the MTU menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            khgre6_mnu()
            break
        elif server_type == '2':
            irgre6_mnu()
            break
        elif server_type == '0':
            clear()
            mtu2_menu()
            break
        else:
            print('Invalid choice.')
            
## gre6 kharej menu            
def khgre6_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m[3]Kharej Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej [1]\033[0m')
    print('2. \033[93mKharej [2]\033[0m')
    print('3. \033[92mKharej [3]\033[0m')
    print("\033[93m──────────────────────────────────────\033[0m")
    print('4. \033[93mIRAN \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6_kh1_mtu()
            break
        elif server_type == '2':
            gre6_kh2_mtu()
            break
        elif server_type == '3':
            gre6_kh3_mtu()
            break
        elif server_type == '4':
            mtu3_q()
            break
        elif server_type == '0':
            clear()
            gre6_mnu()
            break
        else:
            print('Invalid choice.')  
def mtu3_q():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mTunnel [1]\033[0m')
    print('2. \033[93mTunnel [2]\033[0m')
    print('3. \033[92mTunnel [3]\033[0m')
    print('4. \033[92mAll Of Them\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6_ir1_mtu()
            break
        elif server_type == '2':
            gre6_ir2_mtu()
            break
        elif server_type == '3':
            gre6_ir3_mtu()
            break
        elif server_type == '4':
            m3_q()
            break
        elif server_type == '0':
            clear()
            khgre6_mnu()
            break
        else:
            print('Invalid choice.')
        
def m3_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "gre6_ir{}_mtu".format(i)
        globals()[menu_name]()  
        
def irgre6_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m[3]IRAN Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN [1]\033[0m')
    print('2. \033[93mIRAN [2]\033[0m')
    print('3. \033[92mIRAN [3]\033[0m')
    print("\033[93m──────────────────────────────────────\033[0m")
    print('4. \033[93mKharej \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6_ir1_mtu()
            break
        elif server_type == '2':
            gre6_ir2_mtu()
            break
        elif server_type == '3':
            gre6_ir3_mtu()
            break
        elif server_type == '4':
            mtu4_q()
            break
        elif server_type == '0':
            clear()
            gre6_mnu()
            break
        else:
            print('Invalid choice.') 
            
def mtu4_q():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKHAREJ Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mTunnel [1]\033[0m')
    print('2. \033[93mTunnel [2]\033[0m')
    print('3. \033[92mTunnel [3]\033[0m')
    print('4. \033[92mAll Of Them\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre6_kh1_mtu()
            break
        elif server_type == '2':
            gre6_kh2_mtu()
            break
        elif server_type == '3':
            gre6_kh3_mtu()
            break
        elif server_type == '4':
            m4_q()
            break
        elif server_type == '0':
            clear()
            irgre6_mnu()
            break
        else:
            print('Invalid choice.')
        
def m4_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "gre6_kh{}_mtu".format(i)
        globals()[menu_name]()  
        
## ipip6 menu 

def ip6_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIP6IP6 Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92m[3]Kharej [1]IRAN\033[0m')
    print('2. \033[93m[1]Kharej [3]IRAN \033[0m')
    print('0. \033[94mback to the MTU menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            khip6_mnu()
            break
        elif server_type == '2':
            irip6_mnu()
            break
        elif server_type == '0':
            clear()
            mtu2_menu()
            break
        else:
            print('Invalid choice.')

                      
def khip6_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m[3]Kharej Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej [1]\033[0m')
    print('2. \033[93mKharej [2]\033[0m')
    print('3. \033[92mKharej [3]\033[0m')
    print("\033[93m──────────────────────────────────────\033[0m")
    print('4. \033[93mIRAN \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipip_kh1_mtu()
            break
        elif server_type == '2':
            ipip_kh2_mtu()
            break
        elif server_type == '3':
            ipip_kh3_mtu()
            break
        elif server_type == '4':
            mtu5_q()
            break
        elif server_type == '0':
            clear()
            ip6_mnu()
            break
        else:
            print('Invalid choice.')  

def mtu5_q():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mTunnel [1]\033[0m')
    print('2. \033[93mTunnel [2]\033[0m')
    print('3. \033[92mTunnel [3]\033[0m')
    print('4. \033[92mAll Of Them\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipip_ir1_mtu()
            break
        elif server_type == '2':
            ipip_ir2_mtu()
            break
        elif server_type == '3':
            ipip_ir3_mtu()
            break
        elif server_type == '4':
            m5_q()
            break
        elif server_type == '0':
            clear()
            khip6_mnu()
            break
        else:
            print('Invalid choice.')

        
def m5_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mKharej Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "ipip_ir{}_mtu".format(i)
        globals()[menu_name]() 
        
def irip6_mnu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m[3]IRAN Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIRAN [1]\033[0m')
    print('2. \033[93mIRAN [2]\033[0m')
    print('3. \033[92mIRAN [3]\033[0m')
    print("\033[93m──────────────────────────────────────\033[0m")
    print('4. \033[93mKharej \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipip_ir1_mtu()
            break
        elif server_type == '2':
            ipip_ir2_mtu()
            break
        elif server_type == '3':
            ipip_ir3_mtu()
            break
        elif server_type == '4':
            mtu6_q()
            break
        elif server_type == '0':
            clear()
            ip6_mnu()
            break
        else:
            print('Invalid choice.') 
def mtu6_q():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKHAREJ Edit Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mTunnel [1]\033[0m')
    print('2. \033[93mTunnel [2]\033[0m')
    print('3. \033[92mTunnel [3]\033[0m')
    print('4. \033[92mAll Of Them\033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipip_kh1_mtu()
            break
        elif server_type == '2':
            ipip_kh2_mtu()
            break
        elif server_type == '3':
            ipip_kh3_mtu()
            break
        elif server_type == '4':
            m6_q()
            break
        elif server_type == '0':
            clear()
            irip6_mnu()
            break
        else:
            print('Invalid choice.')

        
def m6_q():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mQuestion time !\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    num_servers = int(input("\033[93mHow many \033[92mIRAN Servers\033[93m do you have?\033[0m "))
    
    for i in range(1, num_servers + 1):
        menu_name = "ipip_kh{}_mtu".format(i)
        globals()[menu_name]() 
        
def ipip_kh1_mtu():
    
    priv_kh1_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip1 mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip1.sh"):
        with open("/etc/ipip1.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumip1 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumip1 mtu" not in line]

            with open("/etc/ipip1.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/ipip1.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def ipip_kh2_mtu():
    
    priv_kh2_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip2 mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip2.sh"):
        with open("/etc/ipip2.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumip2 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumip2 mtu" not in line]

            with open("/etc/ipip2.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/ipip2.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def ipip_kh3_mtu():
    
    priv_kh3_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip3 mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip3.sh"):
        with open("/etc/ipip3.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumip3 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumip3 mtu" not in line]

            with open("/etc/ipip3.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/ipip3.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def ipip_ir1_mtu():
    
    priv_ir1_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip1 mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip1.sh"):
        with open("/etc/ipip1.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumip1 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumip1 mtu" not in line]

            with open("/etc/ipip1.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/ipip1.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def ipip_ir2_mtu():
    
    priv_ir2_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip2 mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip2.sh"):
        with open("/etc/ipip2.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumip2 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumip2 mtu" not in line]

            with open("/etc/ipip2.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/ipip2.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def ipip_ir3_mtu():
    
    priv_ir3_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip3 mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip3.sh"):
        with open("/etc/ipip3.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumip3 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumip3 mtu" not in line]

            with open("/etc/ipip3.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/ipip3.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def priv_kh1_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 1\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"

    if os.path.exists("/etc/private1.sh"):
        with open("/etc/private1.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi1 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi1 mtu" not in line]

            with open("/etc/private1.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private1.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def priv_kh2_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 2\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"

    if os.path.exists("/etc/private2.sh"):
        with open("/etc/private2.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi2 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi2 mtu" not in line]

            with open("/etc/private2.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private2.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def priv_kh3_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 3\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"

    if os.path.exists("/etc/private3.sh"):
        with open("/etc/private3.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi3 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi3 mtu" not in line]

            with open("/etc/private3.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private3.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")  

def priv_kh4_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 4\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"

    if os.path.exists("/etc/private4.sh"):
        with open("/etc/private4.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi4 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi4 mtu" not in line]

            with open("/etc/private4.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private4.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def priv_kh5_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 5\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"

    if os.path.exists("/etc/private5.sh"):
        with open("/etc/private5.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi5 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi5 mtu" not in line]

            with open("/etc/private5.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private5.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")   
        
#iran mtu private
def priv_ir1_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 1\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi1 mtu {mtu_value}\n"

    if os.path.exists("/etc/private1.sh"):
        with open("/etc/private1.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi1 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi1 mtu" not in line]

            with open("/etc/private1.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private1.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")     

def priv_ir2_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 2\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi2 mtu {mtu_value}\n"

    if os.path.exists("/etc/private2.sh"):
        with open("/etc/private2.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi2 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi2 mtu" not in line]

            with open("/etc/private2.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private2.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def priv_ir3_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    ddisplay_notification("\033[93m             Server 3\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi3 mtu {mtu_value}\n"

    if os.path.exists("/etc/private3.sh"):
        with open("/etc/private3.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi3 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi3 mtu" not in line]

            with open("/etc/private3.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private3.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")  

def priv_ir4_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    ddisplay_notification("\033[93m             Server 4\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi4 mtu {mtu_value}\n"

    if os.path.exists("/etc/private4.sh"):
        with open("/etc/private4.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi4 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi4 mtu" not in line]

            with open("/etc/private4.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private4.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def priv_ir5_mtu():
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93m             Server 5\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi5 mtu {mtu_value}\n"

    if os.path.exists("/etc/private5.sh"):
        with open("/etc/private5.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi5 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi5 mtu" not in line]

            with open("/etc/private5.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/private5.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")   
     
## gre6 mtu Kharej     
def gre6_kh1_mtu():
    priv_kh1_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig61 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre61.sh"):
        with open("/etc/gre61.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig61 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumig61 mtu" not in line]

            with open("/etc/gre61.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/gre61.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gre6_kh2_mtu():
    priv_kh2_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig62 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre62.sh"):
        with open("/etc/gre62.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig62 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumig62 mtu" not in line]

            with open("/etc/gre62.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/gre62.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gre6_kh3_mtu():
    priv_kh3_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig63 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre63.sh"):
        with open("/etc/gre63.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig63 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumig63 mtu" not in line]

            with open("/etc/gre63.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/gre63.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

##gre6 mtu iran
def gre6_ir1_mtu():
    priv_ir1_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig61 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre61.sh"):
        with open("/etc/gre61.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig61 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumig61 mtu" not in line]

            with open("/etc/gre61.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/gre61.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gre6_ir2_mtu():
    priv_ir2_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig62 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre62.sh"):
        with open("/etc/gre62.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig62 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumig62 mtu" not in line]

            with open("/etc/gre62.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/gre62.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gre6_ir3_mtu():
    priv_ir3_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig63 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre63.sh"):
        with open("/etc/gre63.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumig63 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumig63 mtu" not in line]

            with open("/etc/gre63.sh", "w") as file:
                file.writelines(sh_contents)
            
        with open("/etc/gre63.sh", "a") as file:
            file.write(mtu_command)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
       
        

def i6to4any2_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96m6to4 anycast \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumi6 mtu {mtu_value}\n"

    if os.path.exists("/etc/6to4.sh"):
        with open("/etc/6to4.sh", "r") as file:
            sh_contents = file.readlines()

        if any("link set dev azumi6 mtu" in line for line in sh_contents):
            sh_contents = [line for line in sh_contents if "link set dev azumi6 mtu" not in line]

            with open("/etc/6to4.sh", "w") as file:
                file.writelines(sh_contents)

        with open("/etc/6to4.sh", "a") as file:
            file.write(mtu_command)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")


## original mtu
def mtu_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mEdit MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mPrivate IP\033[0m')
    print('2. \033[93mIP6IP6 \033[0m')
    print('3. \033[96mGRE \033[0m')
    print('4. \033[92mGRE6 \033[0m')
    print('5. \033[92mGRE6tap \033[0m')
    print('6. \033[93m6to4 \033[0m')
    print('7. \033[96m6to4 anycast \033[0m')
    print('8. \033[92mGeneve \033[0m')
    print('9. \033[92mErspan \033[0m')
    print('0. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            private_mtu()
            break
        elif server_type == '2':
            ipip_mtu()
            break
        elif server_type == '3':
            gre_mtu()
            break
        elif server_type == '4':
            gre6_mtu()
            break
        elif server_type == '5':
            gre6tap_mtu()
            break
        elif server_type == '6':
            i6to4_mtu()
            break        
        elif server_type == '7':
            i6to4any_mtu()
            break
        elif server_type == '8':
            gen_mtu()
            break
        elif server_type == '9':
            erspan_mtu()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

def erspan_mtu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mErspan MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mErspan\033[0m')
    print('2. \033[97mErspan + Native\033[0m')
    print('3. \033[93mGRE6 + IPV4 Erspan  \033[0m')
    print('4. \033[96mGRE6 + Native Erspan \033[0m')
    print('5. \033[93mGRE6tap + IPV4 Erspan  \033[0m')
    print('6. \033[96mGRE6tap + Native Erspan \033[0m')
    print('7. \033[92mIPsec Tunnels \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn1_mtu()
            break
        elif server_type == '2':
            spn1_mtu()
            break
        elif server_type == '3':
            spn3_mtu()
            break
        elif server_type == '4':
            spn4_mtu()
            break
        elif server_type == '5':
            spn5_mtu()
            break
        elif server_type == '6':
            spn6_mtu()
            break
        elif server_type == '7':
            spn7_mtu()
            break
        elif server_type == '0':
            clear()
            mtu_menu()
            break
        else:
            print('Invalid choice.')

def spn7_mtu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mErspan + IPsec MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mErspan + IPsec\033[0m')
    print('2. \033[97mErspan + GRE6 IPV4\033[0m')
    print('3. \033[93mErspan + GRE6 Native  \033[0m')
    print('4. \033[96mErspan + GRE6tap IPV4 \033[0m')
    print('5. \033[92mErspan + GRE6tap Native \033[0m')
    print('0. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            spn1_mtu()
            break
        elif server_type == '2':
            spn3_mtu()
            break
        elif server_type == '3':
            spn4_mtu()
            break
        elif server_type == '4':
            spn5_mtu()
            break
        elif server_type == '5':
            spn6_mtu()
            break
        elif server_type == '0':
            clear()
            erspan_mtu()
            break
        else:
            print('Invalid choice.')

def gre6tap21_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6tap \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre6.sh"):
        with open("/etc/gre6.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumig6 mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/gre6.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gre6tap_mtu():
    private_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6tap \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre6.sh"):
        with open("/etc/gre6.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumig6 mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/gre6.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def spn1_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mErspan \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"

    if os.path.exists("/etc/spn.sh"):
        with open("/etc/spn.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumiespn mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/spn.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def spn3_mtu():
    private_mtu()
    gre621_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mErspan \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"

    if os.path.exists("/etc/spn.sh"):
        with open("/etc/spn.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumiespn mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/spn.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def spn4_mtu():
    gre621_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mErspan \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"

    if os.path.exists("/etc/spn.sh"):
        with open("/etc/spn.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumiespn mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/spn.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def spn5_mtu():

    gre6tap_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mErspan \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"

    if os.path.exists("/etc/spn.sh"):
        with open("/etc/spn.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumiespn mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/spn.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def spn6_mtu():
    private_mtu()
    gre6tap21_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mErspan \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"

    if os.path.exists("/etc/spn.sh"):
        with open("/etc/spn.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumiespn mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/spn.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        

            
def gen_mtu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGENEVE MTU Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mGENEVE\033[0m')
    print('2. \033[97mGENEVE + Native\033[0m')
    print('3. \033[93mGRE6 + IPV4 GENEVE  \033[0m')
    print('4. \033[96mGRE6 + Native GENEVE \033[0m')
    print('5. \033[92mGENEVE + IP6tnl + GRE6 \033[0m')
    print('0. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen1_mtu()
            break
        elif server_type == '2':
            gen1_mtu()
            break
        elif server_type == '3':
            gen4_mtu()
            break
        elif server_type == '4':
            gen2_mtu()
            break
        elif server_type == '5':
            gen3_mtu()
            break
        elif server_type == '6':
            gen1_mtu()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

def gen4_mtu():
    private_mtu()
    gre621_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGeneve \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"

    if os.path.exists("/etc/sys.sh"):
        with open("/etc/sys.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumigen mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/sys.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def gen1_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGeneve \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"

    if os.path.exists("/etc/sys.sh"):
        with open("/etc/sys.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumigen mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/sys.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gen2_mtu():
    gre621_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGeneve \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"

    if os.path.exists("/etc/sys.sh"):
        with open("/etc/sys.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumigen mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/sys.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gen3_mtu():
    private2_mtu()
    gre621_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGeneve \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"

    if os.path.exists("/etc/sys.sh"):
        with open("/etc/sys.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumigen mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/sys.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def private2_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[\033[96mIP6tnl\033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"

    if os.path.exists("/etc/private.sh"):
        with open("/etc/private.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumi mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/private.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def private_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mPrivate IP \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"

    if os.path.exists("/etc/private.sh"):
        with open("/etc/private.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumi mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/private.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def gre621_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre6.sh"):
        with open("/etc/gre6.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumig6 mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/gre6.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def gre6_mtu():
    private_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE6 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"

    if os.path.exists("/etc/gre6.sh"):
        with open("/etc/gre6.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumig6 mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/gre6.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        

def gre_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mGRE \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumig mtu {mtu_value}\n"

    if os.path.exists("/etc/gre.sh"):
        with open("/etc/gre.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumig mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/gre.sh", "w") as file:
            file.writelines(sh_contents)

        print("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
        
def i6to4_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96m6to4 \033[93m]:\033[0m ")
    mtu_command = f"ip link set dev azumi6 mtu {mtu_value}\n"

    if os.path.exists("/etc/6to4.sh"):
        with open("/etc/6to4.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumi6 mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/6to4.sh", "w") as file:
            file.writelines(sh_contents)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def i6to4any_mtu():
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96m6to4 anycast \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumi6 mtu {mtu_value}\n"

    if os.path.exists("/etc/6to4.sh"):
        with open("/etc/6to4.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumi6 mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/6to4.sh", "w") as file:
            file.writelines(sh_contents)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")

def ipip_mtu():
    private_mtu()
    mtu_value = input("\033[93mEnter the \033[92mMTU value \033[93m[ \033[96mIP6IP6 \033[93m]:\033[0m ")
    mtu_command = f"/sbin/ip -6 link set dev azumip mtu {mtu_value}\n"

    if os.path.exists("/etc/ipip.sh"):
        with open("/etc/ipip.sh", "r") as file:
            sh_contents = file.readlines()

        mtu_exists = False
        for i in range(len(sh_contents)):
            if "link set dev azumip mtu" in sh_contents[i]:
                sh_contents[i] = mtu_command
                mtu_exists = True
                break

        if not mtu_exists:
            sh_contents.append(mtu_command)

        with open("/etc/ipip.sh", "w") as file:
            file.writelines(sh_contents)

        display_checkmark("\033[92mMTU command edited successfully\033[0m")
        subprocess.run(mtu_command, shell=True)
    else:
        print("\033[91mCommand file doesn't exist\033[0m")
                                
def ip_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIPIP Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN \033[0m')
    print('3. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_ip_menu()
            break
        elif server_type == '2':
            iran_ip_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

def ip_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip.service'])
	
def ip_ping_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
	
def ip_iran():
    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")
    
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    sleep(1)
    

    ip_address = remote_prefix
    max_pings = 3
    interval = 20
    ip_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
    
    print(ping_result)

    ip_service()

    print("\033[92mIPIP6 Configuration Completed!\033[0m")
	
def ip_kharej():
    remote_ipv4 = input("\033[93mEnter \033[92mIran IPv4\033[93m address [Ping Service]: \033[0m")
    
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    sleep(1)
    

    ip_address = remote_prefix
    max_pings = 3
    interval = 20
    ip_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
    
    print(ping_result)

    ip_service()

    print("\033[92mIPIP6 Configuration Completed!\033[0m")
	
## kharej ip
def server_ipv4():

    command = "curl -s https://api.ipify.org"
    process = subprocess.run(command, shell=True, capture_output=True, text=True)
    if process.returncode != 0:
        print("Error retrieving server's IPv4 address.")
        return None
    ipv4 = process.stdout.strip()
    return ipv4

def kharej_ip_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIPIP \033[92mKharej\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    file_path = '/etc/ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPv4 address: \033[0m")


    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")

 

    num_additional_ips = int(input("Enter the number of additional IPv6 addresses: "))
    

    command = f"echo '/sbin/modprobe sit' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip tunnel add azumii mode ipip remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip addr add {ipv6}/16 dev azumii' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    

    for i in range(2, num_additional_ips + 2):
        ip_address = f"{ipv6[:-1]}{i}/16"  
        command = f"echo 'ip addr add {ip_address} dev azumii' >> {file_path}"
        subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link set azumii up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


   
    config_file_path = '/etc/ip.sh'
 
    subprocess.run(f"(crontab -l | grep -v -F '{file_path}') | crontab -", shell=True, check=True)

   
    cronjob_command = f"(crontab -l 2>/dev/null; echo '@reboot sh {config_file_path}') | crontab -"
    subprocess.run(cronjob_command, shell=True, check=True)

    print("GRE tunnel created and configured successfully.")
    print("Configuration saved to /etc/ip.sh.")
    print("Cronjob added to execute /etc/ip.sh on every reboot.")

    ip_kharej()
	
# iran ip

def iran_ip_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIPIP \033[92mIRAN\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    file_path = '/etc/ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPv4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address: \033[0m")


    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")



    num_additional_ips = int(input("Enter the number of additional IPv6 addresses: "))
    
    command = f"echo '/sbin/modprobe sit' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip tunnel add azumii mode ipip remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip addr add {ipv6}/16 dev azumii' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    

    for i in range(2, num_additional_ips + 2):
        ip_address = f"{ipv6[:-1]}{i}/16" 
        command = f"echo 'ip addr add {ip_address} dev azumii' >> {file_path}"
        subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip link set azumii up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


    config_file_path = '/etc/ip.sh'

    subprocess.run(f"(crontab -l | grep -v -F '{file_path}') | crontab -", shell=True, check=True)


    cronjob_command = f"(crontab -l 2>/dev/null; echo '@reboot sh {config_file_path}') | crontab -"
    subprocess.run(cronjob_command, shell=True, check=True)

    print("GRE tunnel created and configured successfully.")
    print("Configuration saved to /etc/ip.sh.")
    print("Cronjob added to execute /etc/ip.sh on every reboot.")
    ip_iran()
    
###menu ipip		
def ipip_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIPIP Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN \033[0m')
    print('3. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_ipip6_menu()
            break
        elif server_type == '2':
            iran_ipip6_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
            
def run_ping():
    try:
        subprocess.run(["ping", "-c", "2", "fd1d:fc98:b73e:b481::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def ping_v6_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v6.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v6.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v6.service'])
    subprocess.run(['systemctl', 'start', 'ping_v6.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v6.service'])
    

	
def display_kharej_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "fd1d:fc98:b73e:b481::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

def add_cron_job():
    file_path = '/etc/private.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

##ipip6 kharej
def ping_ipip_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip.service'])


def ipip6_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ipip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumip mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:0db8:1234:a220::1/64 dev azumip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumip up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumip' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:0db8:1234:a22{i}::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumip' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:0db8:1234:a220::1\n".format(interface)
        with open('/etc/ipip.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip mtu {mtu_value}\n"
        with open('/etc/ipip.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)


    
    

    print("\033[93mCreated IPv6 Addresses :\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:0db8:1234:a220::1    |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def ipip_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def create_ping_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip_kharej():
    remote_ip = "fd1d:fc98:b73e:b481::2" #iran-ip
    local_ip = "fd1d:fc98:b73e:b481::1"   #kharej ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip6_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a220::2" #iranip
    max_pings = 3
    interval = 20
    create_ping_script(ip_address, max_pings, interval)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_ipip_service()

    ipip_cronjob()
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")


   
#sit kharej
def kharej_ipip6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mKharej\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::1/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip_kharej()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")



    
 ##### IRAN IPIP6
def iran_ping():
    try:
        subprocess.run(["ping", "-c", "2", "fd1d:fc98:b73e:b481::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran_ip():
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "fd1d:fc98:b73e:b481::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
		

##ipip6 iran


def iran_ipip_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip.service'])


def ipip6_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/ipip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    with open(file_path, 'w') as f:
        f.write('/sbin/modprobe ipip\n')
        f.write(f'ip -6 tunnel add azumip mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n')
        f.write('ip -6 addr add 2002:0db8:1234:a220::2/64 dev azumip\n')
        f.write('ip link set azumip up\n')
        f.write('ip -6 route add 2002::/16 dev azumip\n')
        created_ips = []
        for i in range(2, num_additional_ips + 2):
            ip_address = f'2002:0db8:1234:a22{i}::2'
            created_ips.append(ip_address)
            f.write(f'ip -6 addr add {ip_address}/64 dev azumip\n')

        

    command = f'chmod +x {file_path}'
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f'bash {file_path}', shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:0db8:1234:a220::2\n".format(interface)
        with open('/etc/ipip.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [IP6IP6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumip mtu {mtu_value}\n"
        with open('/etc/ipip.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)


    
    

   
    print('\033[93mCreated IPv6 Addresses:\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')
    print('\033[92m' + '| 2002:0db8:1234:a220::2    |' + '\033[0m')
    for ip_address in created_ips:
        print('\033[92m' + f'| {ip_address}    |' + '\033[0m')
    print('\033[92m' + '+---------------------------+' + '\033[0m')



def ipip_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/ipip.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/ipip.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)


def iran_ping_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def ipip_iran():
    remote_ip = "fd1d:fc98:b73e:b481::1" #kharej-ip
    local_ip = "fd1d:fc98:b73e:b481::2"   #iran ip
    num_additional_ips = int(input("\033[93mHow many \033[92madditional ips\033[93m do you need? \033[0m"))
    ipip6_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:0db8:1234:a220::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_ipip_service()

    ipip_cronjob()
   
    display_checkmark("\033[92mIPIP6 Configuration Completed!\033[0m")

   
#sit iran
def iran_ipip6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring IPIP6 \033[92mIran\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═════════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::2/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    


    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    ipip_iran()
    sleep(1)	
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")


    
    
    ##### PRIVATE & NATIVE
    
       
def private_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mPrivate IP Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_private_menu()
            break
        elif server_type == '2':
            iran_private_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
        
        
def run_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:831b::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
 
def run_ping_iran():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "2001:831b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def ping_v6_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v6.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v6.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v6.service'])
    subprocess.run(['systemctl', 'start', 'ping_v6.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v6.service'])
    
        

            
def kharej_private_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Kharej server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  There is also a cronjob and a ping service that automatically installs")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "-6", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi"], stdout=subprocess.DEVNULL)

    num_ips = int(input("\033[93mHow many \033[92mprivate IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::1/64"

        result = subprocess.run(["ip", "-6", "addr", "show", "dev", "azumi"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "-6", "addr", "add", ip_addr, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip -6 addr add 2001:831b::1/64 dev azumi\n")
        f.write("ip -6 route add 2001::/16 dev azumi\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:83{ip_suffix}b::1/64"
            f.write(f"ip -6 addr add {ip_addr} dev azumi\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:831b::1\n".format(interface)
        with open('/etc/private.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::1"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    
    print("\033[92mKharej Server Configuration Completed!\033[0m")

def iran_private_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring Iran server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  There is also a cronjob and a ping service that automatically installs")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")
    
    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")
    

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    
    
    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)
    
    
    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "-6", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    
    subprocess.run(["ip", "-6", "route", "add", "2001::/16", "dev", "azumi"], stdout=subprocess.DEVNULL)
    
   
    num_ips = int(input("\033[93mHow many \033[92mprivate IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::2/64"
        

        result = subprocess.run(["ip", "-6", "addr", "show", "dev", "azumi"], capture_output=True, text=True)
        if ip_addr in result.stdout:
            print(f"IP address {ip_addr} already exists. Skipping...")
        else:
            subprocess.run(["ip", "-6", "addr", "add", ip_addr, "dev", "azumi"], stdout=subprocess.DEVNULL)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip -6 addr add 2001:831b::2/64 dev azumi\n")
        f.write("ip -6 route add 2001::/16 dev azumi\n")
        for i in range(1, num_ips + 1):
            ip_suffix = hex(i)[2:]
            ip_addr = f"2001:83{ip_suffix}b::2/64"
            f.write(f"ip -6 addr add {ip_addr} dev azumi\n")
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2001:831b::2\n".format(interface)
        with open('/etc/private.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    


    add_cron_job()

    sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   
    run_ping_iran()
    sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (IRAN):\033[0m")
    for i in range(1, num_ips + 1):
        ip_suffix = hex(i)[2:]
        ip_addr = f"2001:83{ip_suffix}b::2"
        print("\033[92m" + "+---------------------------+" + "\033[0m")
        print("\033[92m" + f" {ip_addr}    " + "\033[0m")
        print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="2001:831b::1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_v6.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

## Native

def Native_menu():
    subprocess.run("clear", shell=True)
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93mNative IP Menu\033[0m")
    print("\033[92m \"-\"\033[93m═════════════════════\033[0m")
    display_logo2()
    print("\033[93m.-------------------------------------------------------------------------------------------------------.\033[0m")
    print("\033[93m| \033[92mIf it didn't work, please uninstall it and add extra IP manually  \033[0m")
    print("\033[93m|\033[0m  If you don't have native IPv6, please use a private IP instead.                                             \033[0m")
    print("\033[93m'-------------------------------------------------------------------------------------------------------'\033[0m")
    display_notification("\033[93mAdding extra Native IPv6 [Kharej]...\033[0m")
    print("\033[93m╭──────────────────────────────────────────────────────────╮\033[0m")

    try:
        interface = subprocess.run("ip route | awk '/default/ {print $5; exit}'", shell=True, capture_output=True, text=True).stdout.strip()
        ipv6_addresses = subprocess.run(f"ip -6 addr show dev {interface} | awk '/inet6 .* global/ {{print $2}}' | cut -d'/' -f1", shell=True, capture_output=True, text=True).stdout.strip().split('\n')

        print("\033[92mCurrent IPv6 addresses on", interface + ":\033[0m")
        for address in ipv6_addresses:
            print(address)

        confirm = input("\033[93mAre these your current IPv6 addresses? (y/n): \033[0m")
        if confirm.lower() != "y":
            display_error("\033[91mAborted. Please manually configure the correct IPv6 addresses.\033[0m")
            return

        sorted_addresses = sorted(ipv6_addresses, reverse=True)
        additional_address = ""
        for i in range(len(sorted_addresses)):
            current_last_part = sorted_addresses[i].split(':')[-1]
            modified_last_part_hex = format(int(current_last_part, 16) + 1, '04x')
            modified_address = ":".join(sorted_addresses[i].split(':')[:-1]) + ":" + modified_last_part_hex

            if modified_address not in sorted_addresses:
                additional_address = modified_address
                break

        if not additional_address:
            display_error("\033[91mNo additional address to add.\033[0m")
            return

        subprocess.run(["ip", "addr", "add", f"{additional_address}/64", "dev", interface])

        script_file = "/etc/ipv6.sh"
        with open(script_file, "a") as file:
            file.write(f"ip addr add {additional_address}/64 dev {interface}\n")

        subprocess.run(["chmod", "+x", script_file])

        subprocess.run("crontab -l | grep -v '/etc/ipv6.sh' | crontab -", shell=True)

        display_notification("\033[93mAdding cronjob for the server..\033[0m")
        subprocess.run("(crontab -l 2>/dev/null; echo \"@reboot /bin/bash /etc/ipv6.sh\") | crontab -", shell=True)

        display_checkmark("\033[92mIPv6 addresses added successfully!\033[0m")
    except ValueError as e:
        display_error("\033[91mAn error occurred while adding IPv6 addresses:", str(e), "\033[0m")
        
###menu gre		
def gre_gre6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE | GRE6 Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mGRE\033[0m')
    print('2. \033[93mGRE6 \033[0m')
    print('3. \033[94mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gre_menu()
            break
        elif server_type == '2':
            gre6_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
			
def gre_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN \033[0m')
    print('3. \033[94mback to main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_gre_menu()
            break
        elif server_type == '2':
            iran_gre_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
			
def gre6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE6 Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN \033[0m')
    print('3. \033[94mback to main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_gre6_menu()
            break
        elif server_type == '2':
            iran_gre6_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
			
   ##gre6         
def run_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        subprocess.run(["ping", "-c", "2", "fd1d:fc98:b73e:b481::2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def ping_v6_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v6.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_v6.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v6.service'])
    subprocess.run(['systemctl', 'start', 'ping_v6.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_v6.service'])
    

	
def display_kharej_ip():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "fd1d:fc98:b73e:b481::1"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		

def add_cron_job():
    file_path = '/etc/private.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)

##gre6 kharej

def gre6_cronjob():
    try:
        
        subprocess.run(
            "crontab -l | grep -v '/etc/gre6.sh' | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
     
        subprocess.run(
            "(crontab -l ; echo '@reboot /bin/bash /etc/gre6.sh') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )
        
        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
		
def ping_gre6_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip.service'])

def gre6_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::1"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig6' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n" 
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::1               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")



def create_ping_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

def gre6_kharej():
    remote_ip = "fd1d:fc98:b73e:b481::2" #iran-ip
    local_ip = "fd1d:fc98:b73e:b481::1"   #kharej ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre6_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre6_service()

    gre6_cronjob()
   
#espn_gre
def kharej1_gre6_menu():
    global local_ip, remote_ip
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mKharej\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::1/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre6_kharej()
    sleep(1)    

   
#sit kharej
def kharej_gre6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[92mKharej\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    display_notification("\033[93mAdding private IP addresses for Kharej server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::1/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
    gre6_kharej()
    sleep(1)	
    
    
 ##### IRAN gre6
def iran_ping():
    try:
        subprocess.run(["ping", "-c", "2", "fd1d:fc98:b73e:b481::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
    
	
def display_iran_ip():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated Private IP Addresses (Kharej):\033[0m")
    ip_addr = "fd1d:fc98:b73e:b481::2"
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| {ip_addr}    |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
		


def iran_gre6_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip.service'])

def gre6_iran_tunnel(remote_ip, local_ip, num_additional_ips):
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    created_ips = []
    for i in range(2, num_additional_ips + 2):
        ip_address = f"2002:83{i}a::2"
        created_ips.append(ip_address)
        command = f"echo 'ip -6 addr add {ip_address}/64 dev azumig6' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IPv6 Addresses:\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + f"| 2002:831a::2               |" + "\033[0m")
    for ip_address in created_ips:
        print("\033[92m" + f"| {ip_address}               |" + "\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")



def iran_ping_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    

def gre6_iran():
    remote_ip = "fd1d:fc98:b73e:b481::1" #kharej ip
    local_ip = "fd1d:fc98:b73e:b481::2"   #iran ip
    num_additional_ips = int(input("\033[97mEnter the number of \033[92madditional IPs\033[97m for the \033[92mGRE6\033[97m tunnel: "))
    gre6_iran_tunnel(remote_ip, local_ip, num_additional_ips)


    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre6_service()

    gre6_cronjob()
   
## gre6 erspan iran
def iran1_gre6_menu():
    global local_ip, remote_ip
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE6 \033[92mIran\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")


    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::2/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre6_iran()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")   

   
#sit iran
def iran_gre6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mConfiguring GRE \033[92mIran\033[93m server\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    display_notification("\033[93mAdding private IP addresses for Iran server...\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "fd1d:fc98:b73e:b481::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add fd1d:fc98:b73e:b481::2/64 dev azumi\n")
        f.write("ip -6 route add fd1d::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="fd1d:fc98:b73e:b481::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gre6_iran()
    sleep(1)	
    display_checkmark("\033[92mGRE6 Configuration Completed!\033[0m")
	
## gre
def gre_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_ip.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_ip.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_ip.service'])
    subprocess.run(['systemctl', 'start', 'ping_ip.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_ip.service'])
	
def gre_ping_script(ip_address, max_pings, interval):
    file_path = '/etc/ping_ip.sh'

    if os.path.exists(file_path):
        os.remove(file_path)

    script_content = f'''#!/bin/bash

ip_address="{ip_address}"

max_pings={max_pings}

interval={interval}

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open(file_path, 'w') as file:
        file.write(script_content)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
	
def gre_iran():
    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")
    
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    sleep(1)
    

    ip_address = remote_prefix
    max_pings = 3
    interval = 20
    gre_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
    
    print(ping_result)

    gre_service()


	
def gre_kharej():
    remote_ipv4 = input("\033[93mEnter \033[92mIran IPv4\033[93m address [Ping Service]: \033[0m")
    
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    sleep(1)
    

    ip_address = remote_prefix
    max_pings = 3
    interval = 20
    gre_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
    
    print(ping_result)

    gre_service()

	
## kharej gre
def server_ipv4():

    command = "curl -s https://api.ipify.org"
    process = subprocess.run(command, shell=True, capture_output=True, text=True)
    if process.returncode != 0:
        print("Error retrieving server's IPv4 address.")
        return None
    ipv4 = process.stdout.strip()
    return ipv4

def kharej_gre_menu():
    clear_screen()
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE \033[92mKharej\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[97m  For ping service, enter \033[92mIRAN\033[97m IPV4 address")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    file_path = '/etc/gre.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────╮\033[0m")
    
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPv4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────╯\033[0m")

    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")



    num_additional_ips = int(input("Enter the number of \033[92madditional IPv6\033[93m addresses: "))
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    

    command = f"echo '/sbin/modprobe gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip tunnel add azumig mode gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip addr add {ipv6}/16 dev azumig' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    

    for i in range(2, num_additional_ips + 2):
        ip_address = f"{ipv6[:-1]}{i}/16"  
        command = f"echo 'ip addr add {ip_address} dev azumig' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("Error: No network interface with IPv6 address.")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src {}\n".format(interface, ipv6_address)
        with open('/etc/gre.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig mtu {mtu_value}\n"
        with open('/etc/gre.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
 
    



    config_file_path = '/etc/gre.sh'

    subprocess.run(f"(crontab -l | grep -v -F '{file_path}') | crontab -", shell=True, check=True)


    cronjob_command = f"(crontab -l 2>/dev/null; echo '@reboot sh {config_file_path}') | crontab -"
    subprocess.run(cronjob_command, shell=True, check=True)

    display_checkmark("\033[92mGRE Configuration Completed!\033[0m")



    gre_kharej()
	
# iran gre

def iran_gre_menu():
    clear_screen()
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGRE \033[92mIRAN\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[97m  For ping service, enter \033[92mKharej\033[97m IPV4 address")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    file_path = '/etc/gre.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
    display_notification("\033[93mConfiguring...\033[0m")
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────╮\033[0m")
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPv4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────╯\033[0m")


    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")



    num_additional_ips = int(input("Enter the number of \033[92madditional IPv6\033[93m addresses: "))
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    
    command = f"echo '/sbin/modprobe gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip tunnel add azumig mode gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip addr add {ipv6}/16 dev azumig' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    

    for i in range(2, num_additional_ips + 2):
        ip_address = f"{ipv6[:-1]}{i}/16"  
        command = f"echo 'ip addr add {ip_address} dev azumig' >> {file_path}"
        subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("Error: No network interface with IPv6 address.")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src {}\n".format(interface, ipv6_address)
        with open('/etc/gre.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig mtu {mtu_value}\n"
        with open('/etc/gre.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    

 
    config_file_path = '/etc/gre.sh'

    subprocess.run(f"(crontab -l | grep -v -F '{file_path}') | crontab -", shell=True, check=True)

  
    cronjob_command = f"(crontab -l 2>/dev/null; echo '@reboot sh {config_file_path}') | crontab -"
    subprocess.run(cronjob_command, shell=True, check=True)

    display_checkmark("\033[92mGRE Configuration Completed!\033[0m")
    gre_iran()
    
def clear_screen():
    os.system("clear")
    
def i6to4_menu():
    clear_screen()
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(O,O)\033[0m')
    print('\033[92m(   ) \033[93m6TO4 Menu\033[0m')
    print('\033[92m "-"\033[93m════════════════════════════\033[0m')
    
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92m6to4 \033[0m')
    print('2. \033[93m6to4 Anycast\033[0m')
    print('3. \033[94mback to main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    
    server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")

    if server_type == '1':
        i6to4_no()
    elif server_type == '2':
        i6to4_any()
    elif server_type == '3':
        clear_screen()
        main_menu()
    else:
        print("Invalid choice.")

def add_6to4_job():
    file_path = '/etc/6to4.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def i6to4_no():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6TO4 \033[92m[Not Anycast]\033[93m Menu\033[0m")
    print("\033[92m \"-\"\033[93m════════════════════════════\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print("\033[93mChoose what to do:\033[0m")
    print("1. \033[92mKharej\033[0m")
    print("2. \033[93mIRAN\033[0m")
    print("3. \033[94mback to main menu\033[0m")
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == "1":
            i6to4_kharej()
            break
        elif server_type == "2":
            i6to4_iran()
            break
        elif server_type == "3":
            clear_screen()
            main_menu()
            break
        else:
            print("Invalid choice.")
            
def ipv6_int():
    interfaces = netifaces.interfaces()
    for iface in interfaces:
        if iface != 'lo' and netifaces.AF_INET6 in netifaces.ifaddresses(iface):
            return iface
    return None
	
def i6to4_kharej():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6TO4 \033[92mKharej\033[93m Menu\033[0m")
    print("\033[92m \"-\"\033[93m════════════════════════════\033[0m")
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[97m  For ping service, enter \033[92mIRAN\033[97m IPV4 address")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")

    if subprocess.run(['test', '-f', '/etc/6to4.sh'], capture_output=True).returncode == 0:
        subprocess.run(['rm', '/etc/6to4.sh'])
        
    display_notification("\033[93mConfiguring...\033[0m")  
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return    
    sleep(1)
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPv4 address: \033[0m")

    ipv4 = subprocess.run(["curl", "-s", "https://api.ipify.org"], capture_output=True, text=True).stdout.strip()


    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split(".")))
    
    
    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")
    

    if prefix.endswith("::1"):
        gateway = prefix[:-3] + "::2"
    else:
        gateway = prefix[:-3] + "::1"
    
   
    with open("/etc/6to4.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe sit\n")
        f.write("/sbin/ip tunnel add azumi6 mode sit remote {} local {} ttl 255\n".format(remote_ip, local_ip))
        
        set_mtu = input('\033[93mDo you want to set \033[92m MTU?\033[93m (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m')
        if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
            mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
            f.write("/sbin/ip -6 link set dev azumi6 mtu {}\n".format(mtu_value))
        else:
            f.write("/sbin/ip -6 link set dev azumi6 mtu 1480\n")
        
        f.write("/sbin/ip link set dev azumi6 up\n")
        f.write("/sbin/ip -6 addr add {}/16 dev azumi6\n".format(prefix))
        f.write("/sbin/ip -6 route add 2000::/3 via {} dev azumi6 metric 1\n".format(gateway))
        f.write("ip -6 route add ::/0 dev azumi6\n")
        answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
        if answer.lower() in ['yes', 'y']:
            interface = ipv6_int()
            if interface is None:
               print("Error: No network interface with IPv6 address.")
            else:
               print("Interface:", interface)
               f.write("ip -6 route replace default via fe80::1 dev {} src {}\n".format(interface, prefix))
        else:
            print("Skipping changing the default route.")
    num_ips = int(input("\033[93mHow many \033[92madditional IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    
    start_index = 3
    

    with open("/etc/6to4.sh", "a") as f:
        for i in range(start_index, start_index + num_ips):
            ip_addr = "2002:{:02x}{:02x}:{:02x}{:02x}::{:02x}/16".format(*map(int, ipv4.split(".")), i)
            f.write("ip -6 addr add {} dev azumi6\n".format(ip_addr))

    display_notification("\033[93mAdding cronjob!\033[0m")
      
    add_6to4_job()
    
    display_notification("\033[93mStarting 6to4...\033[0m")
    subprocess.run(["/bin/bash", "/etc/6to4.sh"])

    remote_ipv4 = input("\033[93mEnter \033[92mIran IPv4 address\033[93m [Ping Service]: \033[0m")


    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split(".")))

    sleep(1)

    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(["ping6", "-c", "2", remote_prefix], capture_output=True, text=True).stdout.strip()


    print(ping_result)


    script_content = '''#!/bin/bash


ip_address="''' + remote_prefix + '''"

max_pings=3

interval=20

while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F"time=" "{print $1}" | cut -d "." -f1)
       
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done'''


    with open("/etc/ping_v6.sh", "w") as f:
        f.write(script_content)

    subprocess.run(["chmod", "+x", "/etc/ping_v6.sh"])


    service_content = '''[Unit]
Description=Ping Service
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v6.sh
Restart=always

[Install]
WantedBy=multi-user.target'''

    with open("/etc/systemd/system/ping_v6.service", "w") as f:
        f.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v6.service"])
    subprocess.run(["systemctl", "start", "ping_v6.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v6.service"])

    display_checkmark("\033[92m6to4 Service has been added successfully!\033[0m")

def i6to4_iran():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6TO4 \033[92mIRAN\033[93m Menu\033[0m")
    print("\033[92m \"-\"\033[93m════════════════════════════\033[0m")
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your Kharej and Iran IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[97m  For ping service, enter \033[92mKharej\033[97m IPV4 address")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")

    if subprocess.run(['test', '-f', '/etc/6to4.sh'], capture_output=True).returncode == 0:
        subprocess.run(['rm', '/etc/6to4.sh'])
        
    display_notification("\033[93mConfiguring...\033[0m") 
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return    
    sleep(1)    
    print("\033[93m╭───────────────────────────────────────╮\033[0m")    

    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPv4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address: \033[0m")

    ipv4 = subprocess.run(["curl", "-s", "https://api.ipify.org"], capture_output=True, text=True).stdout.strip()


    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split(".")))
    
    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")
    

    if prefix.endswith("::1"):
        gateway = prefix[:-3] + "::2"
    else:
        gateway = prefix[:-3] + "::1"
    

    with open("/etc/6to4.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe sit\n")
        f.write("/sbin/ip tunnel add azumi6 mode sit remote {} local {} ttl 255\n".format(remote_ip, local_ip))
        set_mtu = input('\033[93mDo you want to set \033[92m MTU?\033[93m (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m')
        if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
            mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
            f.write("/sbin/ip -6 link set dev azumi6 mtu {}\n".format(mtu_value))
        else:
            f.write("/sbin/ip -6 link set dev azumi6 mtu 1480\n")
        f.write("/sbin/ip link set dev azumi6 up\n")
        f.write("/sbin/ip -6 addr add {}/16 dev azumi6\n".format(prefix))
        f.write("/sbin/ip -6 route add 2000::/3 via {} dev azumi6 metric 1\n".format(gateway))
        answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
        if answer.lower() in ['yes', 'y']:
            interface = ipv6_int()
            if interface is None:
               print("Error: No network interface with IPv6 address.")
            else:
               print("Interface:", interface)
               f.write("ip -6 route replace default via fe80::1 dev {} src {}\n".format(interface, prefix))
        else:
            print("Skipping changing the default route.")
        

    num_ips = int(input("\033[93mHow many \033[92madditional IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    
    start_index = 3
    

    with open("/etc/6to4.sh", "a") as f:
        for i in range(start_index, start_index + num_ips):
            ip_addr = "2002:{:02x}{:02x}:{:02x}{:02x}::{:02x}/16".format(*map(int, ipv4.split(".")), i)
            f.write("ip -6 addr add {} dev azumi6\n".format(ip_addr))

    display_notification("\033[93mAdding cronjob!\033[0m")

    add_6to4_job()
    
    display_notification("\033[93mStarting 6to4...\033[0m")
    subprocess.run(["/bin/bash", "/etc/6to4.sh"])

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4 address\033[93m [Ping Service]: \033[0m")

    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split(".")))

    sleep(1)


    ping_result = subprocess.run(["ping6", "-c", "2", remote_prefix], capture_output=True, text=True).stdout.strip()


    print(ping_result)


    script_content = '''#!/bin/bash


ip_address="''' + remote_prefix + '''"

max_pings=3

interval=20

while true
do
  
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F"time=" "{print $1}" | cut -d "." -f1)
       
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done'''


    with open("/etc/ping_v6.sh", "w") as f:
        f.write(script_content)

    subprocess.run(["chmod", "+x", "/etc/ping_v6.sh"])


    service_content = '''[Unit]
Description=Ping Service
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v6.sh
Restart=always

[Install]
WantedBy=multi-user.target'''

    with open("/etc/systemd/system/ping_v6.service", "w") as f:
        f.write(service_content)

    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "ping_v6.service"])
    subprocess.run(["systemctl", "start", "ping_v6.service"])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v6.service"])

    display_checkmark("\033[92m6to4 Service has been added successfully!\033[0m")
	

def clear():
    subprocess.run(['clear'])

def i6to4_any():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6to4 \033[92m[Anycast]\033[93m Menu\033[0m")
    print("\033[92m \"-\"\033[93m════════════════════════════\033[0m")
    
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    
    server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")

    if server_type == '1':
        i6to4_any_kharej()
    elif server_type == '2':
        i6to4_any_iran()
    elif server_type == '3':
        clear()
        main_menu()
    else:
        print("Invalid choice.")
		
def i6to4_any_kharej():
    clear_screen()
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m6to4 \033[92mKharej\033[93m  Menu\033[92m[Anycast]\033[0m')  
    print('\033[92m "-"\033[93m════════════════════════════\033[0m')    
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your \033[92mKharej\033[93m IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[97m  For ping service, enter \033[92mIRAN\033[97m IPV4 address")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")
    
    
    if subprocess.run(['test', '-f', '/etc/6to4.sh'], capture_output=True).returncode == 0:
        subprocess.run(['rm', '/etc/6to4.sh'])
        
    display_notification("\033[93mConfiguring...\033[0m") 
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej IPv4\033[93m address: \033[0m")
           
    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    
    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")
    
    with open('/etc/6to4.sh', 'w') as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe sit\n")
        f.write("/sbin/ip tunnel add azumi6 mode sit remote any local {} ttl 255\n".format(local_ip))
        set_mtu = input('\033[93mDo you want to set \033[92m MTU?\033[93m (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m')
        if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
            mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
            f.write("/sbin/ip -6 link set dev azumi6 mtu {}\n".format(mtu_value))
        else:
            f.write("/sbin/ip -6 link set dev azumi6 mtu 1480\n")
        f.write("/sbin/ip link set dev azumi6 up\n")
        f.write("/sbin/ip -6 addr add {}/16 dev azumi6\n".format(prefix))
        f.write("/sbin/ip -6 route add 2000::/3 via ::192.88.99.1 dev azumi6 metric 1\n")
        
    num_ips = input("\033[93mHow many \033[92madditional IPs\033[93m do you need? \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    start_index = 3
    
    with open('/etc/6to4.sh', 'a') as f:
        for i in range(start_index, start_index + int(num_ips)):
            ip_addr = "2002:{:02x}{:02x}:{:02x}{:02x}::{:02x}/16".format(*map(int, ipv4.split('.')), i)
            f.write("ip -6 addr add {} dev azumi6\n".format(ip_addr))
    
    display_notification("\033[93mAdding cronjob!\033[0m")

    add_6to4_job()
    
    display_notification("\033[93mStarting 6to4...\033[0m")
    subprocess.run(['/bin/bash', '/etc/6to4.sh'])
    
    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")
    
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    sleep(1)
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
    
    print(ping_result)
    
    script_content = '''#!/bin/bash

ip_address="{}"

max_pings=3

interval=20

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
       
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''
    with open('/etc/ping_v6.sh', 'w') as f:
        f.write(script_content)
    
    subprocess.run(['chmod', '+x', '/etc/ping_v6.sh'])
    
    with open('/etc/systemd/system/ping_v6.service', 'w') as f:
        f.write('[Unit]\n')
        f.write('Description=Ping Service\n')
        f.write('After=network.target\n')
        f.write('\n')
        f.write('[Service]\n')
        f.write('ExecStart=/bin/bash /etc/ping_v6.sh\n')
        f.write('Restart=always\n')
        f.write('\n')
        f.write('[Install]\n')
        f.write('WantedBy=multi-user.target\n')
    
    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v6.service'])
    subprocess.run(['systemctl', 'start', 'ping_v6.service'])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v6.service"])
    
    display_checkmark("\033[92m6to4 Service has been added successfully!\033[0m")
	
def i6to4_any_iran():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6to4 \033[92mIRAN\033[93m  Menu\033[92m[Anycast]\033[0m")
    print("\033[92m\"-\"\033[93m════════════════════════════\033[0m")
    display_logo2()
    print("\033[93m╭───────────────────────────────────────────────────────────────────────────────────────╮")
    print("\033[92m  Please make sure to remove any private IPs that you have created before proceeding")
    print("\033[93m  Enter your \033[92mIRAN\033[93m IPV4 address, it will automatically configure your server")
    print("\033[96m  If you need additional IP address, you can enter the desired number")
    print("\033[97m  For ping service, enter \033[92mKharej\033[97m IPV4 address")
    print("\033[93m╰───────────────────────────────────────────────────────────────────────────────────────╯\033[0m")

    if subprocess.run(['test', '-f', '/etc/6to4.sh'], capture_output=True).returncode == 0:
        subprocess.run(['rm', '/etc/6to4.sh'])
        
    display_notification("\033[93mConfiguring...\033[0m")
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    sleep(1)    
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIran IPv4\033[93m address: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()

    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    
    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")

    with open('/etc/6to4.sh', 'w') as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe sit\n")
        f.write("/sbin/ip tunnel add azumi6 mode sit remote any local {} ttl 255\n".format(local_ip))
        set_mtu = input('\033[93mDo you want to set \033[92m MTU?\033[93m (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m')
        if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
            mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
            f.write("/sbin/ip -6 link set dev azumi6 mtu {}\n".format(mtu_value))
        else:
            f.write("/sbin/ip -6 link set dev azumi6 mtu 1480\n")
        f.write("/sbin/ip link set dev azumi6 up\n")
        f.write("/sbin/ip -6 addr add {}/16 dev azumi6\n".format(prefix))
        f.write("/sbin/ip -6 route add 2000::/3 via ::192.88.99.1 dev azumi6 metric 1\n")
        answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
        if answer.lower() in ['yes', 'y']:
            interface = ipv6_int()
            if interface is None:
               print("Error: No network interface with IPv6 address.")
            else:
               print("Interface:", interface)
               f.write("ip -6 route replace default via fe80::1 dev {} src {}\n".format(interface, prefix))
        else:
            print("Skipping changing the default route.")

    num_ips = int(input("\033[93mHow many \033[92madditional IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    start_index = 3

    with open('/etc/6to4.sh', 'a') as f:
        for i in range(start_index, start_index + num_ips):
            ip_addr = "2002:{:02x}{:02x}:{:02x}{:02x}::{:02x}/16".format(*map(int, ipv4.split('.')), i)
            f.write("ip -6 addr add {} dev azumi6\n".format(ip_addr))

    display_notification("\033[93mAdding cronjob!\033[0m")

    add_6to4_job()

    display_notification("\033[93mStarting 6to4...\033[0m")
    subprocess.run(['/bin/bash', '/etc/6to4.sh'])

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")
    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))

    subprocess.run(['sleep', '1'])
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    script_content = '''#!/bin/bash

ip_address="{}"
max_pings=3
interval=20

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
       
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix)

    with open('/etc/ping_v6.sh', 'w') as f:
        f.write(script_content)

    subprocess.run(['chmod', '+x', '/etc/ping_v6.sh'])

    with open('/etc/systemd/system/ping_v6.service', 'w') as f:
        f.write('''[Unit]
Description=Ping Service
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_v6.sh
Restart=always

[Install]
WantedBy=multi-user.target
''')

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_v6.service'])
    subprocess.run(['systemctl', 'start', 'ping_v6.service'])
    sleep(1)
    subprocess.run(["systemctl", "restart", "ping_v6.service"])

    display_checkmark("\033[92m6to4 Service has been added successfully!\033[0m")

#test gre gen ipsec 
def gengre_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ \033[96mGRE6 \033[93m+\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mMethod 1[Server Address]\033[0m')
    print('2. \033[93mMethod 2[Gre6 Address]\033[0m')
    print('3. \033[96mMethod 3[Geneve Address]\033[0m')
    print('4. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gengre_ipsec1()
            break
        elif server_type == '2':
            gengre_ipsec2()
            break
        elif server_type == '3':
            gengre_ipsec3()
            break
        elif server_type == '4':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
#method 1
def gengre_ipsec1():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ \033[96mGRE6 \033[93m+ \033[92mIPV4 \033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej_ipgen_menu()
            break
        elif server_type == '2':
            iran_ipgen_menu()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
            
def kharej_ipgen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipgen_ipvers()
    
def ipgen_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipgen_ipk_version1()
            break
        elif server_type == '2':
            ipgen_ipk_version2()
            break
        else:
            print('Invalid choice.')
            
def ipgen_ipk_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")

    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def ipgen_ipk_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def iran_ipgen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipgen2_ipvers()
    
def ipgen2_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipgen_ipi_version1()
            break
        elif server_type == '2':
            ipgen_ipi_version2()
            break
        else:
            print('Invalid choice.')
            
def ipgen_ipi_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def ipgen_ipi_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
# method 2
def gengre_ipsec2():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ \033[96mGRE6 \033[93m+ \033[92mIPV4 \033[93m M2\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharejm2_ipgen_menu()
            break
        elif server_type == '2':
            iranm2_ipgen_menu()
            break
        elif server_type == '3':
            clear()
            gengre_ipsec()
        else:
            print('Invalid choice.')
            
def kharejm2_ipgen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipgenm2_ipvers()
    
def ipgenm2_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipgenm2_ipk_version1()
            break
        elif server_type == '2':
            ipgenm2_ipk_version2()
            break
        else:
            print('Invalid choice.')
# for method 2 geneve
def configm2_strongsw_simkh1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2002:832a::1
  right=2002:832a::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:832a::2 2002:832a::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
##    
def ipgenm2_ipk_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    configm2_strongsw_simkh1(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def ipgenm2_ipk_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    configm2_strongsw_simkh1(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
# for method 2 geneve
def configm2_strongsw_simih1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2002:832a::2
  right=2002:832a::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2002:832a::1 2002:832a::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
## 
def iranm2_ipgen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipgen2m2_ipvers()
    
def ipgen2m2_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipgenm2_ipi_version1()
            break
        elif server_type == '2':
            ipgenm2_ipi_version2()
            break
        else:
            print('Invalid choice.')
            
def ipgenm2_ipi_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    configm2_strongsw_simih1(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def ipgenm2_ipi_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    configm2_strongsw_simih1(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
# method 3

def gengre_ipsec3():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ \033[96mGRE6 \033[93m+ \033[92mIPV4 \033[93m M3\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharejm3_ipgen_menu()
            break
        elif server_type == '2':
            iranm3_ipgen_menu()
            break
        elif server_type == '3':
            clear()
            gengre_ipsec()
        else:
            print('Invalid choice.')
            
def kharejm3_ipgen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipgenm3_ipvers()
    
def ipgenm3_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipgenm3_ipk_version1()
            break
        elif server_type == '2':
            ipgenm3_ipk_version2()
            break
        else:
            print('Invalid choice.')
# for method 3 geneve
def configm31_strongsw_simk1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.1.1
  right=80.200.2.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.2.1 80.200.1.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
##  

def configm32_strongsw_simk1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::1
  right=2001:db8::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::2 2001:db8::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
##   

## icmp test
def icmp_erspan4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmpV4 + Erspan + IPsec Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mErspan + IPsec Method 1 [Server Address] \033[0m')
    print('2. \033[96mErspan + IPsec Method 2 [Erspan Address] \033[0m')
    print('3. \033[94mBack to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp_ipsec1()
            break
        elif server_type == '2':
            icmp_ipsec2()
            break
        elif server_type == '3':
            os.system("clear")
            main_menu()
            break
        else:
            print('Invalid choice.')

# icmp erspan ipv4 and ipv6 server address
            
def icmp_ipsec1():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmpV4 + Erspan Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp_kharej_espnV4()
            break
        elif server_type == '2':
            icmp_iran_espnV4()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_erspan4()
            break
        else:
            print('Invalid choice.')
            
def install_icmp4():
    display_notification("\033[93mInstalling \033[92mIcmpV4\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_loading()


    ipv4_forward_status = subprocess.run(["sysctl", "-n", "net.ipv4.ip_forward"], capture_output=True, text=True)
    if int(ipv4_forward_status.stdout) != 1:
        subprocess.run(["sysctl", "net.ipv4.ip_forward=1"])

    subprocess.run(['sudo', 'apt', 'install', '-y', 'git'], capture_output=True, text=True)

    if os.path.exists("/root/icmpv4"):
        shutil.rmtree("/root/icmpv4")

    clone_command = 'git clone https://github.com/miyugundam/icmp.git icmpv4'
    clone_result = os.system(clone_command)
    if clone_result != 0:
        print("Error: Failed to clone Repo.")
        return

    if os.path.exists("/root/icmpv4"):
        os.chdir("/root/icmpv4")

        subprocess.run(['sudo', 'apt', 'install', '-y', 'net-tools'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt', 'install', '-y', 'make'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt-get', 'install', '-y', 'libssl-dev'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt', 'install', '-y', 'g++'], capture_output=True, text=True)

        subprocess.run(['make'], capture_output=True, text=True)

        os.chdir("..")
    else:
        display_error("\033[91micmp folder not found.\033[0m")
    pass

def icmp41_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "70.0.0.2"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  
        
def start_ic4_kharej():
    display_notification("\033[93mConfiguring \033[92mKharej\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk)     
    if not os.path.exists("/root/icmpv4"):
        install_icmp()

    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/root/icmpv4/icmptunnel -s -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.1 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated ICMP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          70.0.0.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def icmp42_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "70.0.0.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  
    
def start_ic4_iran():
    display_notification("\033[93mConfiguring \033[92mIRAN \033[93m...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk) 
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.chdir("/root/icmpv4")


    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"/root/icmpv4/icmptunnel {remote_ip} -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.2 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp2_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated ICMP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          70.0.0.2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def icmp_kharej_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    icmpv4_spn_kharej()
    
def icmpv4_spn_kharej():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp4_simpk1()
            break
        elif server_type == '2':
            icmp4_simk2()
            break
        else:
            print('Invalid choice.')

    
def icmp4_simpk1():
   
    start_ic4_kharej()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.1", "remote", "70.0.0.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.1 remote 70.0.0.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def icmp4_simk2():
  
    start_ic4_kharej()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.1", "remote", "70.0.0.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.1 remote 70.0.0.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def icmp_iran_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_icmp4_iran()
    
def spn_icmp4_iran():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp4_simpi1()
            break
        elif server_type == '2':
            icmp4_simpi2()
            break
        else:
            print('Invalid choice.')

def icmp4_simpi1():
      
    start_ic4_iran()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.2", "remote", "70.0.0.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.2 remote 70.0.0.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def icmp4_simpi2():
    
    start_ic4_iran()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.2", "remote", "70.0.0.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.2 remote 70.0.0.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")     
    
def up_up():
    ulimit_setting = 'ulimit -n 65535'
    bashrc_path = os.path.expanduser('~/.bashrc')

    with open(bashrc_path, 'r') as f:
        existing_bashrc = f.read()

    if ulimit_setting not in existing_bashrc:
        with open(bashrc_path, 'a') as f:
            f.write('\n')
            f.write(ulimit_setting)
            f.write('\n')

    sysctl_conf_path = '/etc/sysctl.conf'
    sysctl_params = [
        'net.core.rmem_max=26214400',
        'net.core.rmem_default=26214400',
        'net.core.wmem_max=26214400',
        'net.core.wmem_default=26214400',
        'net.core.netdev_max_backlog=2048'
    ]

    with open(sysctl_conf_path, 'r') as f:
        existing_sysctl_conf = f.read()

    params_to_add = []
    for param in sysctl_params:
        if param not in existing_sysctl_conf:
            params_to_add.append(param)

    if params_to_add:
        with open(sysctl_conf_path, 'a') as f:
            f.write('\n')
            f.write('\n'.join(params_to_add))
            f.write('\n')
        try:
            subprocess.run(["sudo", "sysctl", "-p"], stderr=subprocess.DEVNULL, check=True)
            display_checkmark("\033[92mIt is Done!\033[0m")
        except subprocess.CalledProcessError:
            print("\033[91mAn error occurred while setting it up.\033[0m")
    else:
        display_checkmark("\033[92mIt was already Done.\033[0m")
        
# icmpv4 erspan erspan address
def icmp_ipsec2():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmpV4 + Erspan Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmpm2_kharej_espnV4()
            break
        elif server_type == '2':
            icmpm2_iran_espnV4()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_erspan4()
            break
        else:
            print('Invalid choice.')

#prequisite 

def startm2_ic4_kharej1():
    display_notification("\033[93mConfiguring \033[92mKharej\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp4k1(psk)     
    if not os.path.exists("/root/icmpv4"):
        install_icmp()

    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/root/icmpv4/icmptunnel -s -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.1 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    
def startm2_ic4_kharej2():
    display_notification("\033[93mConfiguring \033[92mKharej\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp4k2(psk)     
    if not os.path.exists("/root/icmpv4"):
        install_icmp()

    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/root/icmpv4/icmptunnel -s -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.1 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")

def startm2_ic4_iran1():
    display_notification("\033[93mConfiguring \033[92mIRAN \033[93m...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp4i1(psk) 
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.chdir("/root/icmpv4")


    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"/root/icmpv4/icmptunnel {remote_ip} -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.2 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp2_ping()


def startm2_ic4_iran2():
    display_notification("\033[93mConfiguring \033[92mIRAN \033[93m...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp4i2(psk)
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.chdir("/root/icmpv4")


    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"/root/icmpv4/icmptunnel {remote_ip} -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.2 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp2_ping()
    
def icmpm2_kharej_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    icmpv4m2_spn_kharej()
    
def icmpv4m2_spn_kharej():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp4m2_simpk1()
            break
        elif server_type == '2':
            icmp4m2_simk2()
            break
        else:
            print('Invalid choice.')

    
def icmp4m2_simpk1():
   
    startm2_ic4_kharej1()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.1", "remote", "70.0.0.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.1 remote 70.0.0.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def icmp4m2_simk2():
  
    startm2_ic4_kharej2()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.1", "remote", "70.0.0.2", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.1 remote 70.0.0.2 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def icmpm2_iran_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spnm2_icmp4_iran()
    
def spnm2_icmp4_iran():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp4m2_simpi1()
            break
        elif server_type == '2':
            icmp4m2_simpi2()
            break
        else:
            print('Invalid choice.')

def icmp4m2_simpi1():
      
    startm2_ic4_iran1()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.2", "remote", "70.0.0.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.2 remote 70.0.0.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def icmp4m2_simpi2():
    
    startm2_ic4_iran2()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "70.0.0.2", "remote", "70.0.0.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 70.0.0.2 remote 70.0.0.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
def config_strongsw_icmp4k1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.1.1
  right=80.200.2.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.2.1 80.200.1.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_icmp4k2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::1
  right=2001:db8::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::2 2001:db8::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_icmp4i1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.2.1
  right=80.200.1.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.1.1 80.200.2.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
def config_strongsw_icmp4i2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::2
  right=2001:db8::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::1 2001:db8::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
##
def ipgenm3_ipk_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    configm31_strongsw_simk1(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def ipgenm3_ipk_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    kharej1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    configm32_strongsw_simk1(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
# for method 3 geneve
def configm31_strongsw_simi1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.2.1
  right=80.200.1.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.1.1 80.200.2.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
## 

# for method 3 geneve
def configm32_strongsw_simi1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::2
  right=2001:db8::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::1 2001:db8::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
## 
def iranm3_ipgen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ipgen2m3_ipvers()
    
def ipgen2m3_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            ipgenm3_ipi_version1()
            break
        elif server_type == '2':
            ipgenm3_ipi_version2()
            break
        else:
            print('Invalid choice.')
            
def ipgenm3_ipi_version1():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    configm31_strongsw_simi1(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   

def ipgenm3_ipi_version2():
    global local_ip, remote_ip
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    iran1_gre6_menu()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    configm32_strongsw_simi1(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::2/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
## hans icmp test
def icmp_erspan5():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mHans + Erspan + IPsec Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mErspan + IPsec Method 1 [Server Address] \033[0m')
    print('2. \033[96mErspan + IPsec Method 2 [Erspan Address] \033[0m')
    print('3. \033[94mBack to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz_ipsec1()
            break
        elif server_type == '2':
            hanz_ipsec2()
            break
        elif server_type == '3':
            os.system("clear")
            main_menu()
            break
        else:
            print('Invalid choice.')

# hans erspan ipv4 and ipv6 server address
            
def hanz_ipsec1():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mHans + Erspan Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz_kharej_espnV4()
            break
        elif server_type == '2':
            hanz_iran_espnV4()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_erspan5()
            break
        else:
            print('Invalid choice.')
            

       

def hanss_install_menu():
    display_notification("\033[93mInstalling \033[92mHans\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_loading()


    ipv4_forward_status = subprocess.run(["sysctl", "-n", "net.ipv4.ip_forward"], capture_output=True, text=True)
    if int(ipv4_forward_status.stdout) != 1:
        subprocess.run(["sysctl", "net.ipv4.ip_forward=1"])


    subprocess.run(["wget", "https://sourceforge.net/projects/hanstunnel/files/source/hans-1.1.tar.gz"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    subprocess.run(["tar", "-xzf", "hans-1.1.tar.gz"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    os.chdir("/root/hans-1.1")

    subprocess.run(["apt", "install", "-y", "make"], check=True)
    subprocess.run(["apt", "install", "-y", "g++"], check=True)
    subprocess.run(["make"], check=True)

    display_checkmark("\033[92mHans installed successfully!\033[0m")

    os.remove("/root/hans-1.1.tar.gz")
    pass

def icmp3_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.1.2.100"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  


        
def hns_icmp_kharej1():
    display_notification("\033[93mConfiguring Kharej ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)
    hans_directory = "/root/hans-1.1"

    os.chdir(hans_directory)
    os.system(f"./hans -s 80.1.2.0 -p azumi86chwan -d icmp")


    hans_kharej_command = f"{hans_directory}/hans -s 80.1.2.0 -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_kharej_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_kharej_command}\n")

    subprocess.run(["chmod", "700", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp3_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.1.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
def icmp4_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.1.2.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e) 
        
def hns_icmp_iran1():
    display_notification("\033[93mConfiguring IRAN ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk) 
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)


    os.chdir("/root/hans-1.1")
    os.system(f"./hans -c {remote_ip} -p azumi86chwan -d icmp")


    subprocess.call(["rm", "-f", "/etc/cron.d/hans"])

    hans_command = f"/root/hans-1.1/hans -c {remote_ip} -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_command}\n")
    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp4_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.1.2.100\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    


def hanz_kharej_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    hanz_spn_kharej()
    
def hanz_spn_kharej():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz_simpk1()
            break
        elif server_type == '2':
            hanz_simk2()
            break
        else:
            print('Invalid choice.')

    
def hanz_simpk1():
   
    hns_icmp_kharej1()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.1", "remote", "80.1.2.100", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.1 remote 80.1.2.100 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def hanz_simk2():
  
    hns_icmp_kharej1()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.1", "remote", "80.1.2.100", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.1 remote 80.1.2.100 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def hanz_iran_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_hanz_iran()
    
def spn_hanz_iran():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz_simpi1()
            break
        elif server_type == '2':
            hanz_simpi2()
            break
        else:
            print('Invalid choice.')

def hanz_simpi1():
      
    hns_icmp_iran1()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.100", "remote", "80.1.2.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.100 remote 80.1.2.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def hanz_simpi2():
    
    hns_icmp_iran1()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.100", "remote", "80.1.2.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.100 remote 80.1.2.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
# erspan address
def config_strongsw_hanzk1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.1.1
  right=80.200.2.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.2.1 80.200.1.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_hanzk2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::1
  right=2001:db8::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::2 2001:db8::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def hanz_ipsec2():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mHans + Erspan Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz2_kharej_espnV4()
            break
        elif server_type == '2':
            hanz2_iran_espnV4()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_erspan5()
            break
        else:
            print('Invalid choice.')
            

       

def hanss_install_menu():
    display_notification("\033[93mInstalling \033[92mHans\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_loading()


    ipv4_forward_status = subprocess.run(["sysctl", "-n", "net.ipv4.ip_forward"], capture_output=True, text=True)
    if int(ipv4_forward_status.stdout) != 1:
        subprocess.run(["sysctl", "net.ipv4.ip_forward=1"])


    subprocess.run(["wget", "https://sourceforge.net/projects/hanstunnel/files/source/hans-1.1.tar.gz"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    subprocess.run(["tar", "-xzf", "hans-1.1.tar.gz"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    os.chdir("/root/hans-1.1")

    subprocess.run(["apt", "install", "-y", "make"], check=True)
    subprocess.run(["apt", "install", "-y", "g++"], check=True)
    subprocess.run(["make"], check=True)

    display_checkmark("\033[92mHans installed successfully!\033[0m")

    os.remove("/root/hans-1.1.tar.gz")
    pass

def icmp3_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.1.2.100"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  
        
def hns2_icmp_kharej1():
    display_notification("\033[93mConfiguring Kharej ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_hanzk1(psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)
    hans_directory = "/root/hans-1.1"

    os.chdir(hans_directory)
    os.system(f"./hans -s 80.1.2.0 -p azumi86chwan -d icmp")


    hans_kharej_command = f"{hans_directory}/hans -s 80.1.2.0 -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_kharej_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_kharej_command}\n")

    subprocess.run(["chmod", "700", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp3_ping()


def hns3_icmp_kharej1():
    display_notification("\033[93mConfiguring Kharej ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_hanzk2(psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)
    hans_directory = "/root/hans-1.1"

    os.chdir(hans_directory)
    os.system(f"./hans -s 80.1.2.0 -p azumi86chwan -d icmp")


    hans_kharej_command = f"{hans_directory}/hans -s 80.1.2.0 -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_kharej_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_kharej_command}\n")

    subprocess.run(["chmod", "700", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp3_ping()

    
def icmp4_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.1.2.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e) 

def config_strongsw_hanzi1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.2.1
  right=80.200.1.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.1.1 80.200.2.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_hanzi2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::2
  right=2001:db8::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::1 2001:db8::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        
def hns2_icmp_iran1():
    display_notification("\033[93mConfiguring IRAN ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()

    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_hanzi1(psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)


    os.chdir("/root/hans-1.1")
    os.system(f"./hans -c {remote_ip} -p azumi86chwan -d icmp")


    subprocess.call(["rm", "-f", "/etc/cron.d/hans"])

    hans_command = f"/root/hans-1.1/hans -c {remote_ip} -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_command}\n")
    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp4_ping()

def hns3_icmp_iran1():
    display_notification("\033[93mConfiguring IRAN ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()

    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_hanzi2(psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)


    os.chdir("/root/hans-1.1")
    os.system(f"./hans -c {remote_ip} -p azumi86chwan -d icmp")


    subprocess.call(["rm", "-f", "/etc/cron.d/hans"])

    hans_command = f"/root/hans-1.1/hans -c {remote_ip} -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_command}\n")
    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp4_ping()    


def hanz2_kharej_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    hanz2_spn_kharej()
    
def hanz2_spn_kharej():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz2_simpk1()
            break
        elif server_type == '2':
            hanz2_simk2()
            break
        else:
            print('Invalid choice.')

    
def hanz2_simpk1():
   
    hns2_icmp_kharej1()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.1", "remote", "80.1.2.100", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.1 remote 80.1.2.100 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def hanz2_simk2():
  
    hns3_icmp_kharej1()
    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.1", "remote", "80.1.2.100", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.1 remote 80.1.2.100 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def hanz2_iran_espnV4():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    spn_hanz2_iran()
    
def spn_hanz2_iran():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Erspan IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hanz2_simpi1()
            break
        elif server_type == '2':
            hanz2_simpi2()
            break
        else:
            print('Invalid choice.')

def hanz2_simpi1():
      
    hns2_icmp_iran1()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.100", "remote", "80.1.2.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.100 remote 80.1.2.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumiespn\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumiespn\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def hanz2_simpi2():
    
    hns3_icmp_iran1()

    subprocess.run(["sudo", "ip", "link", "add", "dev", "azumiespn", "type", "erspan", "local", "80.1.2.100", "remote", "80.1.2.1", "seq", "key", "100", "erspan_ver", "1", "erspan", "1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumiespn", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumiespn"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add dev azumiespn type erspan local 80.1.2.100 remote 80.1.2.1 seq key 100 erspan_ver 1 erspan 1\n")
        f.write("sudo ip link set azumiespn up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumiespn\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Erspan]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumiespn mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    ##
#test gen ipsec

def gen4_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ IPV4 + \033[92mIPsec \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mMethod 1[Server Address]\033[0m')
    print('2. \033[93mMethod 2[Geneve Address]\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen41_ipsec()
            break
        elif server_type == '2':
            gen42_ipsec()
            break
        elif server_type == '3':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')
#method1 gen41
def gen41_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ IPV4 + \033[92mIPsec M[1] \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_ipseck()
            break
        elif server_type == '2':
            gen_ipseci()
            break
        elif server_type == '3':
            clear()
            gen4_ipsec()
            break
        else:
            print('Invalid choice.')            
def gen_ipseck():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    gen_simple1()
    
def gen_simple1():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_simpk1()
            break
        elif server_type == '2':
            gen_simpk2()
            break
        else:
            print('Invalid choice.')

def config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simk2(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_strongsw_simi2(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def gen_simpk1():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    config_strongsw_simk1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def gen_simpk2():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simk2(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def gen_ipseci():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    gen_simple2()
    
def gen_simple2():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_simpi1()
            break
        elif server_type == '2':
            gen_simpi2()
            break
        else:
            print('Invalid choice.')

def gen_simpi1():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simi1(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def gen_simpi2():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_simi2(local_ip, local_subnet, remote_ip, remote_subnet, psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")     
    
#method 2 gen42

def gen42_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve \033[93m+ IPV4 + \033[92mIPsec M[2] \033[0m')
    print('\033[92m "-"\033[93m══════════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genm2_ipseck()
            break
        elif server_type == '2':
            genm2_ipseci()
            break
        elif server_type == '3':
            clear()
            gen4_ipsec()
            break
        else:
            print('Invalid choice.')  
            
def genm2_ipseck():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    genm2_simple1()
    
def genm2_simple1():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genm2_simpk1()
            break
        elif server_type == '2':
            genm2_simpk2()
            break
        else:
            print('Invalid choice.')

def configm2_strongsw_simk1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.1.1
  right=80.200.2.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.2.1 80.200.1.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def configm2_strongsw_simk2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::1
  right=2001:db8::2
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::2 2001:db8::1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def configm2_strongsw_simi1(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=32
  leftid=80.200.2.1
  right=80.200.1.1
  rightsubnet=32
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'80.200.1.1 80.200.2.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def configm2_strongsw_simi2(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=64
  leftid=2001:db8::2
  right=2001:db8::1
  rightsubnet=64
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'2001:db8::1 2001:db8::2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
def genm2_simpk1():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m") 
    configm2_strongsw_simk1(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   

def genm2_simpk2():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    configm2_strongsw_simk2(psk)

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::1/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add 2001:db8::1/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan3_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    
    script_content = '''#!/bin/bash
ip_address="2001:db8::2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 

def genm2_ipseci():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIRAN server \033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring IRAN server...\033[0m")

    if os.path.isfile("/etc/spn.sh"):
        os.remove("/etc/spn.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    genm2_simple2()
    
def genm2_simple2():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genm2_simpi1()
            break
        elif server_type == '2':
            genm2_simpi2()
            break
        else:
            print('Invalid choice.')

def genm2_simpi1():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    configm2_strongsw_simi1(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan2_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")  
    
def genm2_simpi2():
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m") 
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    configm2_strongsw_simi2(psk)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "2001:db8::2/64", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/spn.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 2001:db8::2/64 dev azumigen\n")
        f.write("systemctl restart strongswan-starter\n")
        f.write("systemctl restart strongswan\n")


    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/spn.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    espan_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    espan4_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "       2001:db8::2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="2001:db8::1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_espan.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_espan.sh', 0o755)
    ping_kh2_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")     
    
def remove_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[91mUninstall\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mUninstall IPIP6\033[0m')
    print('2. \033[93mUninstall 6to4\033[0m')
    print('3. \033[92mUninstall 6to4 \033[96manycast\033[0m')
    print('4. \033[96mUninstall Gre\033[0m')
    print('41.\033[97mUninstall Geneve +icmp [test]\033[0m')
    print('42.\033[97mUninstall erspan ip6ip6 [test]\033[0m')
    print('43.\033[97mUninstall icmp + ipsec & erspan & hans [test]\033[0m')
    print('5. \033[92mUninstall Gre6\033[0m')
    print('6. \033[97mUninstall Gre6tap\033[0m')
    print('7. \033[93mUninstall Private IP\033[0m')
    print('8. \033[96mUninstall Extra Native IP\033[0m')
    print('9. \033[92mUninstall Geneve\033[0m')
    print('10. \033[93mUninstall Erspan\033[0m')
    
    print('0. \033[91mback to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove_ipip6()
            break
        elif server_type == '2':
            remove_6to4()
            break
        elif server_type == '3':
            remove_6to4()
            break
        elif server_type == '4':
            remove_gre()
        elif server_type == '41':
            remove_test()
            break 
        elif server_type == '42':
            gre6test_uninstall()
            break  
        elif server_type == '43':
            icmp_uninstall()
            break             
        elif server_type == '5':
            remove_gre6()
            break
        elif server_type == '7':
            remove_private()
            break
        elif server_type == '8':
            extra_uninstall()
            break
        elif server_type == '9':
            genx_ip()
            break
        elif server_type == '10':
            erspan_remove()
            break
        elif server_type == '6':
            gre6tap_remove()
            break
        elif server_type == '0':
            clear()
            main_menu()
            break
        else:
            print('Invalid choice.')

# erspan remove
def erspan_remove():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mErspan\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mErspan \033[0m")
    print("2. \033[93mErspan + Native \033[0m")
    print("3. \033[96mErspan + Gre6 \033[0m")
    print("4. \033[92mErspan + Gre6tap \033[0m")
    print("5. \033[97mErspan + IPsec Tunnels  \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            espn_uninstall()
            break
        elif server_type == '2':
            espn_uninstall()
            break
        elif server_type == '3':
            gre6espn_uninstall()
            break
        elif server_type == '4':
            gre6tapespn_uninstall()
            break
        elif server_type == '5':
            ipsecs_uninstall()
            break    
        elif server_type == '0':
            clear()
            remove_menu()
            break
        else:
            print('Invalid choice.')   
##
def ipsecs_uninstall():
    delete_cron1()
    delete_cron2()
    remove_private()
    remove_gre621()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Erspan + \033[92mIpsec \033[93m+ Tunnels\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    

    try:
        if subprocess.call("test -f /etc/spn.sh", shell=True) == 0:
            subprocess.run("rm /etc/spn.sh", shell=True)

   
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/spn.sh\" | crontab -", shell=True)
        devnull = open(os.devnull, 'w')
        subprocess.run("sudo rm /etc/ipsec.conf", shell=True, stdout=devnull, stderr=devnull)
        subprocess.run("sudo rm /etc/ipsec.secrets", shell=True, stdout=devnull, stderr=devnull)
        subprocess.run("sudo rm /etc/ipsec.secrets", shell=True)
        subprocess.run("systemctl disable strongswan-starter > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strongswan-starter > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable strongswan > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop strongswan > /dev/null 2>&1", shell=True)
   
        subprocess.run("apt purge strongswan -y", shell=True)
        subprocess.run("systemctl disable ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_espan.service > /dev/null 2>&1", shell=True)
        
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("sudo ip link delete azumiespn > /dev/null", shell=True)
        devnull.close()   
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))

#test icmp 

def config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet={local_subnet}
  leftid={local_ip}
  right={remote_ip}
  rightsubnet={remote_subnet}
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'{remote_ip} {local_ip} : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_kharej_icmp(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=24
  leftid=70.0.0.1
  right=70.0.0.2
  rightsubnet=24
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'70.0.0.2 70.0.0.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_iran_icmp(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=24
  leftid=70.0.0.2
  right=70.0.0.1
  rightsubnet=24
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'70.0.0.1 70.0.0.2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def icmp_ipsec():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmp + IPsec Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIcmp Method 1 \033[0m')
    print('2. \033[96mHans Method 2 \033[0m')
    print('3. \033[94mBack to the main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp_v4_menu()
            break
        elif server_type == '2':
            hans_v4_menu()
            break
        elif server_type == '3':
            os.system("clear")
            main_menu()
            break
        else:
            print('Invalid choice.')

def icmp_v4_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmp + IPsec Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mMethod 1[Server Address] \033[0m')
    print('2. \033[96mMethod 2[Icmp Address] \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            icmp_socat1_menu()
            break
        elif server_type == '2':
            icmp_socat2_menu()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_ipsec()
            break
        else:
            print('Invalid choice.')


# server address            
def icmp_socat1_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmptunnel Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            start_ic_kharej3()
            break
        elif server_type == '2':
            start_ic_iran3()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_v4_menu()
            break
        else:
            print('Invalid choice.')
            
def install_icmp():
    display_notification("\033[93mInstalling \033[92mIcmptunnel\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_loading()


    ipv4_forward_status = subprocess.run(["sysctl", "-n", "net.ipv4.ip_forward"], capture_output=True, text=True)
    if int(ipv4_forward_status.stdout) != 1:
        subprocess.run(["sysctl", "net.ipv4.ip_forward=1"])

    subprocess.run(['sudo', 'apt', 'install', '-y', 'git'], capture_output=True, text=True)

    if os.path.exists("/root/icmpv4"):
        shutil.rmtree("/root/icmpv4")

    clone_command = 'git clone https://github.com/miyugundam/icmp.git icmpv4'
    clone_result = os.system(clone_command)
    if clone_result != 0:
        print("Error: Failed to clone Repo.")
        return

    if os.path.exists("/root/icmpv4"):
        os.chdir("/root/icmpv4")

        subprocess.run(['sudo', 'apt', 'install', '-y', 'net-tools'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt', 'install', '-y', 'make'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt-get', 'install', '-y', 'libssl-dev'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt', 'install', '-y', 'g++'], capture_output=True, text=True)

        subprocess.run(['make'], capture_output=True, text=True)

        os.chdir("..")
    else:
        display_error("\033[91micmp folder not found.\033[0m")
    pass

def icmp1_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "70.0.0.2"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  

def icmp2_cron_job():
    file_path = '/etc/hans.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def icmp_cron_job():
    file_path = '/etc/icmp.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
        
def start_ic_kharej3():
    display_notification("\033[93mConfiguring \033[92mKharej\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk)     
    if not os.path.exists("/root/icmpv4"):
        install_icmp()

    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/root/icmpv4/icmptunnel -s -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.1 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp1_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          70.0.0.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def icmp2_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "70.0.0.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  
    
def start_ic_iran3():
    display_notification("\033[93mConfiguring \033[92mIRAN \033[93m...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk) 
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.chdir("/root/icmpv4")


    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"/root/icmpv4/icmptunnel {remote_ip} -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.2 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp2_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          70.0.0.2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

# icmp address            
def icmp_socat2_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmptunnel Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            start_ic2_kharej()
            break
        elif server_type == '2':
            start_ic2_iran()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_v4_menu()
            break
        else:
            print('Invalid choice.')

def start_ic2_kharej():
    display_notification("\033[93mConfiguring \033[92mKharej\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()

    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_kharej_icmp(psk)   
    if not os.path.exists("/root/icmpv4"):
        install_icmp()

    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/root/icmpv4/icmptunnel -s -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.1 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp1_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          70.0.0.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def start_ic2_iran():
    display_notification("\033[93mConfiguring \033[92mIRAN \033[93m...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_iran_icmp(psk)
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.chdir("/root/icmpv4")


    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"/root/icmpv4/icmptunnel {remote_ip} -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.2 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    icmp_cron_job()


    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp2_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          70.0.0.2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def hans_v4_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mHans + IPsec Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mMethod 1[Server Address] \033[0m')
    print('2. \033[96mMethod 2[Icmp Address] \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hans_V41()
            break
        elif server_type == '2':
            hans_V42()
            break
        elif server_type == '3':
            os.system("clear")
            icmp_ipsec()
            break
        else:
            print('Invalid choice.')
# server address            
def hans_V41():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mHans Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hns_icmp_kharej1()
            break
        elif server_type == '2':
            hns_icmp_iran1()
            break
        elif server_type == '3':
            os.system("clear")
            hans_V41()
            break
        else:
            print('Invalid choice.')
            
def hanss_install_menu():
    display_notification("\033[93mInstalling \033[92mHans\033[93m ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_loading()


    ipv4_forward_status = subprocess.run(["sysctl", "-n", "net.ipv4.ip_forward"], capture_output=True, text=True)
    if int(ipv4_forward_status.stdout) != 1:
        subprocess.run(["sysctl", "net.ipv4.ip_forward=1"])


    subprocess.run(["wget", "https://sourceforge.net/projects/hanstunnel/files/source/hans-1.1.tar.gz"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    subprocess.run(["tar", "-xzf", "hans-1.1.tar.gz"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    os.chdir("/root/hans-1.1")

    subprocess.run(["apt", "install", "-y", "make"], check=True)
    subprocess.run(["apt", "install", "-y", "g++"], check=True)
    subprocess.run(["make"], check=True)

    display_checkmark("\033[92mHans installed successfully!\033[0m")

    os.remove("/root/hans-1.1.tar.gz")
    pass

def icmp3_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.1.2.100"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e)  
        
def hns_icmp_kharej1():
    display_notification("\033[93mConfiguring Kharej ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)
    hans_directory = "/root/hans-1.1"

    os.chdir(hans_directory)
    os.system(f"./hans -s 80.1.2.0 -p azumi86chwan -d icmp")


    hans_kharej_command = f"{hans_directory}/hans -s 80.1.2.0 -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_kharej_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_kharej_command}\n")

    subprocess.run(["chmod", "700", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp3_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.1.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
def icmp4_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        result = subprocess.run(["ping", "-c", "2", "80.1.2.1"], capture_output=True, text=True)
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("\033[91mPinging failed:\033[0m", result.stderr)
    except subprocess.CalledProcessError as e:
        print("\033[91mPinging failed:\033[0m", e) 
        
def hns_icmp_iran1():
    display_notification("\033[93mConfiguring IRAN ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    local_subnet = input("\033[93mEnter \033[92mIRAN\033[93m Subnet: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    remote_subnet = input("\033[93mEnter \033[92mkharej\033[93m Subnet: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_strongsw_icmp(local_ip, local_subnet, remote_ip, remote_subnet, psk) 
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)


    os.chdir("/root/hans-1.1")
    os.system(f"./hans -c {remote_ip} -p azumi86chwan -d icmp")


    subprocess.call(["rm", "-f", "/etc/cron.d/hans"])

    hans_command = f"/root/hans-1.1/hans -c {remote_ip} -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_command}\n")
    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp4_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.1.2.100\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

# icmp address            
def hans_V42():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mHans Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[96mIRAN \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            hns_icmp_kharej2()
            break
        elif server_type == '2':
            hns_icmp_iran2()
            break
        elif server_type == '3':
            os.system("clear")
            hans_V41()
            break
        else:
            print('Invalid choice.')

def config_hansk_icmp(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=24
  leftid=80.1.2.1
  right=80.1.2.100
  rightsubnet=24
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'70.0.0.2 70.0.0.1 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def config_hansi_icmp(psk):
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mInstalling IPSEC..\033[0m")
    install_process = subprocess.Popen(["sudo", "apt", "install", "strongswan", "-y"])
    install_process.wait()
    print("IPSEC Installation complete.")
    subprocess.run(["sudo", "rm", "/etc/ipsec.conf"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "rm", "/etc/ipsec.secrets"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    with open("/etc/ipsec.conf", "w") as f:
        f.write(f'''config setup
##azumiisinyouarea
conn ipsecsit
  left=%defaultroute
  leftsubnet=24
  leftid=80.1.2.100
  right=80.1.2.1
  rightsubnet=24
  ike=aes256-sha256-modp3072!
  esp=aes128gcm16-modp3072!
  keyexchange=ikev2
  auto=start
  authby=secret
  keyingtries=%forever''')

    with open("/etc/ipsec.secrets", "w") as f:
        f.write(f'70.0.0.1 70.0.0.2 : PSK "{psk}"\n')
    permissions()
    subprocess.run(["sudo", "systemctl", "enable", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan-starter"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "enable", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    subprocess.run(["sudo", "systemctl", "restart", "strongswan"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


def hns_icmp_kharej2():
    display_notification("\033[93mConfiguring Kharej ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")
    config_hansk_icmp(psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)
    hans_directory = "/root/hans-1.1"

    os.chdir(hans_directory)
    os.system(f"./hans -s 80.1.2.0 -p azumi86chwan -d icmp")


    hans_kharej_command = f"{hans_directory}/hans -s 80.1.2.0 -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_kharej_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_kharej_command}\n")

    subprocess.run(["chmod", "700", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp3_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.1.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

def hns_icmp_iran2():
    display_notification("\033[93mConfiguring IRAN ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    up_up()
    remote_ip = input("\033[93mEnter \033[92mkharej\033[93m IPV4 address: \033[0m")
    psk = input("\033[93mEnter the \033[92mSecret key\033[93m: \033[0m")

    config_hansi_icmp(psk)
    if not os.path.exists("/root/hans-1.1"):
        hanss_install_menu()
    subprocess.run(["echo", "1", ">", "/proc/sys/net/ipv4/icmp_echo_ignore_all"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)


    os.chdir("/root/hans-1.1")
    os.system(f"./hans -c {remote_ip} -p azumi86chwan -d icmp")


    subprocess.call(["rm", "-f", "/etc/cron.d/hans"])

    hans_command = f"/root/hans-1.1/hans -c {remote_ip} -p azumi86chwan -d icmp"
    subprocess.run(["sed", "-i", f"/{hans_command}/d", "/etc/hans.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=False)

    if os.path.exists("/etc/hans.sh"):
        os.remove("/etc/hans.sh")

    with open("/etc/hans.sh", "w") as f:
        f.write(f"{hans_command}\n")
    icmp2_cron_job()

    display_checkmark("\033[92mCronjob added successfully!\033[0m")
    icmp4_ping()
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "          80.1.2.100\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    
def up_up():
    ulimit_setting = 'ulimit -n 65535'
    bashrc_path = os.path.expanduser('~/.bashrc')

    with open(bashrc_path, 'r') as f:
        existing_bashrc = f.read()

    if ulimit_setting not in existing_bashrc:
        with open(bashrc_path, 'a') as f:
            f.write('\n')
            f.write(ulimit_setting)
            f.write('\n')

    sysctl_conf_path = '/etc/sysctl.conf'
    sysctl_params = [
        'net.core.rmem_max=26214400',
        'net.core.rmem_default=26214400',
        'net.core.wmem_max=26214400',
        'net.core.wmem_default=26214400',
        'net.core.netdev_max_backlog=2048'
    ]

    with open(sysctl_conf_path, 'r') as f:
        existing_sysctl_conf = f.read()

    params_to_add = []
    for param in sysctl_params:
        if param not in existing_sysctl_conf:
            params_to_add.append(param)

    if params_to_add:
        with open(sysctl_conf_path, 'a') as f:
            f.write('\n')
            f.write('\n'.join(params_to_add))
            f.write('\n')
        try:
            subprocess.run(["sudo", "sysctl", "-p"], stderr=subprocess.DEVNULL, check=True)
            display_checkmark("\033[92mIt is Done!\033[0m")
        except subprocess.CalledProcessError:
            print("\033[91mAn error occurred while setting it up.\033[0m")
    else:
        display_checkmark("\033[92mIt was already Done.\033[0m")

    
def icmp_uninstall():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIcmp Uninstall Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mIcmpV4 Method 1 \033[0m')
    print('2. \033[96mHans Method 2 \033[0m')
    print('3. \033[94mBack to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            remove2_icmp()
            break
        elif server_type == '2':
            remove2_hans()
            break
        elif server_type == '3':
            os.system("clear")
            remove_menu()
            break
        else:
            print('Invalid choice.')       
def ipsecs3_uninstall():
    delete_cron1()
    delete_cron2()

    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Erspan + \033[92mIpsec \033[93m+ Tunnels\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    
    devnull = open(os.devnull, 'w')

    subprocess.run("sudo rm /etc/ipsec.conf", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("sudo rm /etc/ipsec.secrets", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl disable strongswan-starter > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl stop strongswan-starter > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl disable strongswan > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl stop strongswan > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("apt purge strongswan -y", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl disable ping_espan.service > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl stop ping_espan.service > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("rm /etc/systemd/system/ping_espan.service > /dev/null 2>&1", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("systemctl daemon-reload", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("sudo ip link delete azumiespn > /dev/null", shell=True, stdout=devnull, stderr=devnull)
    subprocess.run("apt purge strongswan -y", shell=True)

    devnull.close()

    display_checkmark("\033[92mUninstall completed!\033[0m")
   
        
def remove2_hans():
    os.system("clear")
    display_notification("\033[93mRemoving Hans ...\033[0m")
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    reset_icmp()
    ipsecs3_uninstall()
    espn_uninstall()
    try:
        if subprocess.call("test -f /etc/hans.sh", shell=True) == 0:
            subprocess.run("rm /etc/hans.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/hans.sh\" | crontab -", shell=True)
        subprocess.run("rm /etc/systemd/system/azumifrps1.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)
        subprocess.run("ip link set dev icmp down > /dev/null", shell=True)
        subprocess.run("ip link set dev icmp down > /dev/null", shell=True)
        print("Progress: ", end="")

        try:

            lsof_process = subprocess.Popen(["lsof", "/root/hans-1.1/hans"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            lsof_output, lsof_error = lsof_process.communicate()

            if lsof_output:
                pid = lsof_output.decode().split('\n')[1].split()[1]
                subprocess.run(["kill", pid])

            subprocess.run(["rm", "-rf", "/root/hans-1.1"])
        except FileNotFoundError:
            print("Error: Directory '/root/hans-1.1' does not exist.")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except Exception as e:
        print("An error occurred during uninstallation:", str(e))
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove2_icmp():
    os.system("clear")
    display_notification("\033[93mRemoving icmp...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    reset_icmp()
    ipsecs3_uninstall()
    espn_uninstall()  
    try:
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/icmp.sh\" | crontab -", shell=True)
        subprocess.run("ip link set dev tun0 down > /dev/null", shell=True)
        subprocess.run("ip link set dev tun1 down > /dev/null", shell=True)
        subprocess.run("systemctl daemon-reload", shell=True)

        print("Progress: ", end="")

        try:
            lsof_process = subprocess.Popen(["lsof", "-t", "/root/icmpv4/icmptunnel"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            lsof_output, lsof_error = lsof_process.communicate()

            if lsof_output:
                pids = lsof_output.decode().split('\n')[:-1]
                for pid in pids:
                    subprocess.run(["kill", pid])

            subprocess.run(["rm", "-rf", "/root/icmpv4"])
        except FileNotFoundError:
            print("Error: Directory '/root/icmpv4' does not exist.")

        subprocess.run("crontab -l | grep -v \"/bin/bash /etc/icmp.sh\" | crontab -", shell=True)
        display_checkmark("\033[92mUninstall completed!\033[0m")

        if os.path.isfile("/etc/icmp.sh"):
            os.remove("/etc/icmp.sh")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
  
def gre6tapespn_uninstall():
    delete_cron1()
    delete_cron2()
    remove_private()
    remove_gre6tap21()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Erspan + \033[92mGRE6tap Tunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    

    try:
        if subprocess.call("test -f /etc/spn.sh", shell=True) == 0:
            subprocess.run("rm /etc/spn.sh", shell=True)

            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/spn.sh\" | crontab -", shell=True)
        subprocess.run("sudo rm /etc/ping_espan.sh", shell=True)
   
        subprocess.run("systemctl disable ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_espan.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("sudo ip link delete azumiespn > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))


def gre6test_uninstall():
    delete_cron1()
    delete_cron2()
    remove_private()
    remove_gre621()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Erspan + \033[92mGRE6 Tunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    

    try:
        if subprocess.call("test -f /etc/spn.sh", shell=True) == 0:
            subprocess.run("rm /etc/spn.sh", shell=True)
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/spn.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)
        subprocess.run("sudo rm /etc/ping_espan.sh", shell=True)
   
        subprocess.run("systemctl disable ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_espan.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("sudo ip link delete azumiespn > /dev/null", shell=True)
        subprocess.run("sudo ip link delete azumip6 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))
        


def espn_uninstall():
    delete_cron1()
    delete_cron2()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Erspan Tunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/spn.sh", shell=True) == 0:
            subprocess.run("rm /etc/spn.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/spn.sh\" | crontab -", shell=True)
        subprocess.run("sudo rm /etc/ping_espan.sh", shell=True)
   
        subprocess.run("systemctl disable ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_espan.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_espan.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("sudo ip link delete azumiespn > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))
        
## gre6tap remove

def gre6tap_remove():
    remove_private()
    remove_gre6tap21()
####            
def genx_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[92mGeneve\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print("1. \033[92mGeneve \033[0m")
    print("2. \033[93mGeneve + Native \033[0m")
    print("3. \033[96mGeneve + Gre6 + Native \033[0m")
    print("4. \033[92mGeneve + Gre6 + IPV4 \033[0m")
    print("5. \033[97mGeneve + IP6tnl + Gre6 + Native  \033[0m")
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genz_uninstall()
            break
        elif server_type == '2':
            genz_uninstall()
            break
        elif server_type == '3':
            gen2_uninstall()
            break
        elif server_type == '5':
            gen4_uninstall()
            break
        elif server_type == '4':
            gen6_uninstall()
            break    
        elif server_type == '0':
            clear()
            remove_menu()
            break
        else:
            print('Invalid choice.')   
## gen ic
def reset_icmp():
    try:
        reset_ipv4 = False
        reset_ipv6 = False

        os.system("sysctl -w net.ipv4.icmp_echo_ignore_all=0")
        reset_ipv4 = True

        os.system("sudo sysctl -w net.ipv6.icmp.echo_ignore_all=0")
        reset_ipv6 = True

        if reset_ipv4 or reset_ipv6:
            display_checkmark("\033[92mICMP has been reset to default!\033[0m")
        else:
            display_notification("\033[93mICMP settings has been reset.\033[0m")
    except Exception as e:
        display_error("\033[91mAn error occurred: {}\033[0m".format(str(e)))

def install_icmp():
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_loading()

    subprocess.run(['sudo', 'tee', '/etc/resolv.conf'], input='nameserver 1.1.1.1\n', capture_output=True, text=True)


    ipv4_forward_status = subprocess.run(["sysctl", "net.ipv4.ip_forward"], capture_output=True, text=True)
    if "net.ipv4.ip_forward = 0" not in ipv4_forward_status.stdout:
        subprocess.run(["sudo", "sysctl", "-w", "net.ipv4.ip_forward=1"])


    ipv6_forward_status = subprocess.run(["sysctl", "net.ipv6.conf.all.forwarding"], capture_output=True, text=True)
    if "net.ipv6.conf.all.forwarding = 0" not in ipv6_forward_status.stdout:
        subprocess.run(["sudo", "sysctl", "-w", "net.ipv6.conf.all.forwarding=1"])


    if os.path.exists("/root/icmpv4"):
        shutil.rmtree("/root/icmpv4")


    clone_command = 'git clone https://github.com/miyugundam/icmp.git icmpv4'
    clone_result = os.system(clone_command)
    if clone_result != 0:
        print("Error: Failed to clone Repo.")
        return


    if os.path.exists("/root/icmpv4"):

        os.chdir("/root/icmpv4")


        subprocess.run(['sudo', 'apt', 'install', '-y', 'net-tools'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt', 'install', '-y', 'make'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt-get', 'install', '-y', 'libssl-dev'], capture_output=True, text=True)
        subprocess.run(['sudo', 'apt', 'install', '-y', 'g++'], capture_output=True, text=True)


        subprocess.run(['make'], capture_output=True, text=True)


        os.chdir("..")
    else:
        display_error("\033[91micmptunnel folder not found.\033[0m")
def up_up():
    ulimit_setting = 'ulimit -n 65535'
    bashrc_path = os.path.expanduser('~/.bashrc')

    with open(bashrc_path, 'r') as f:
        existing_bashrc = f.read()

    if ulimit_setting not in existing_bashrc:
        with open(bashrc_path, 'a') as f:
            f.write('\n')
            f.write(ulimit_setting)
            f.write('\n')

    sysctl_conf_path = '/etc/sysctl.conf'
    sysctl_params = [
        'net.core.rmem_max=26214400',
        'net.core.rmem_default=26214400',
        'net.core.wmem_max=26214400',
        'net.core.wmem_default=26214400',
        'net.core.netdev_max_backlog=2048'
    ]

    with open(sysctl_conf_path, 'r') as f:
        existing_sysctl_conf = f.read()

    params_to_add = []
    for param in sysctl_params:
        if param not in existing_sysctl_conf:
            params_to_add.append(param)

    if params_to_add:
        with open(sysctl_conf_path, 'a') as f:
            f.write('\n')
            f.write('\n'.join(params_to_add))
            f.write('\n')
        try:
            subprocess.run(["sudo", "sysctl", "-p"], stderr=subprocess.DEVNULL, check=True)
            display_checkmark("\033[92mLimit has been Set!\033[0m")
        except subprocess.CalledProcessError:
            print("\033[91mAn error occurred setting it up.\033[0m")
    else:
        display_checkmark("\033[92mLimit Increase was already Done.\033[0m")
        
def ic_kharej():
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    up_up()
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring Kharej ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")

    if os.path.exists("/etc/icmp.sh"):
        os.remove("/etc/icmp.sh")

    with open("/etc/icmp.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("/root/icmpv4/icmptunnel -s -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.1 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp.sh")

    cron_job_command = "@reboot root /bin/bash /etc/icmp.sh\n"
    with open("/etc/cron.d/icmp-kharej", "a") as f:
        f.write(cron_job_command)

    subprocess.call("crontab -u root /etc/cron.d/icmp-kharej", shell=True)

    display_checkmark("\033[92mCronjob added successfully!\033[0m")

def ic_iran():
    if not os.path.exists("/root/icmpv4"):
        install_icmp()
    up_up()
    print("\033[93m──────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mConfiguring IRAN ...\033[0m")
    print("\033[93m──────────────────────────────────────────────────\033[0m")

    os.chdir("/root/icmpv4")

    server_ipv4 = input("\033[93mEnter \033[92mKharej\033[93m IPv4 address:\033[0m ")

    if os.path.exists("/etc/icmp-iran.sh"):
        os.remove("/etc/icmp-iran.sh")

    with open("/etc/icmp-iran.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"/root/icmpv4/icmptunnel {server_ipv4} -d\n")
        f.write("/sbin/ifconfig tun0 70.0.0.2 netmask 255.255.255.0\n")

    subprocess.run(["chmod", "700", "/etc/icmp-iran.sh"], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE, check=True)

    os.system("/bin/bash /etc/icmp-iran.sh")

    cron_job_command = "@reboot root /bin/bash /etc/icmp-iran.sh\n"
    with open("/etc/cron.d/icmp-iran", "a") as f:
        f.write(cron_job_command)

    subprocess.call("crontab -u root /etc/cron.d/icmp-iran", shell=True)

    display_checkmark("\033[92mCronjob added successfully!\033[0m")

def gen_ipicmp():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_icmpk_version1()
            break
        elif server_type == '2':
            geneve_icmpk_version2()
            break
        else:
            print('Invalid choice.')
            
def geneve_icmpk_version1():
    ic_kharej()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("70.0.0.1")
    ufw("70.0.0.2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "70.0.0.2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_icmpk_version2():
    ic_kharej()
    ufw("70.0.0.1")
    ufw("70.0.0.2")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "70.0.0.2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
	
def gen_ipicmpi():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_icmpi_version1()
            break
        elif server_type == '2':
            geneve_icmpi_version2()
            break
        else:
            print('Invalid choice.')

def geneve_icmpi_version1():
    ic_iran()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("70.0.0.1")
    ufw("70.0.0.2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "70.0.0.1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_icmpi_version2():
    ic_iran()
    ufw("70.0.0.1")
    ufw("70.0.0.2")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "70.0.0.1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
def rmv_limit():
    display_notification("\033[93mRestoring Limit ..\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    ulimit_setting = 'ulimit -n 65535'
    bashrc_path = os.path.expanduser('~/.bashrc')

    with open(bashrc_path, 'r') as f:
        existing_bashrc = f.read()

    if ulimit_setting in existing_bashrc:
        existing_bashrc = existing_bashrc.replace(ulimit_setting, '')

        with open(bashrc_path, 'w') as f:
            f.write(existing_bashrc)

    sysctl_conf_path = '/etc/sysctl.conf'
    sysctl_params = [
        'net.core.rmem_max=26214400',
        'net.core.rmem_default=26214400',
        'net.core.wmem_max=26214400',
        'net.core.wmem_default=26214400',
        'net.core.netdev_max_backlog=2048'
    ]

    with open(sysctl_conf_path, 'r') as f:
        existing_sysctl_conf = f.read()

    params_to_remove = []
    for param in sysctl_params:
        if param in existing_sysctl_conf:
            params_to_remove.append(param)

    if params_to_remove:
        for param in params_to_remove:
            existing_sysctl_conf = existing_sysctl_conf.replace(param, '')

        with open(sysctl_conf_path, 'w') as f:
            f.write(existing_sysctl_conf)

        try:
            subprocess.run(["sudo", "sysctl", "-p"], stderr=subprocess.DEVNULL, check=True)
            display_checkmark("\033[92mLimit removal was Successful!\033[0m")
        except subprocess.CalledProcessError:
            print("\033[91mAn error occurred.\033[0m")
    else:
        display_checkmark("\033[92mNothin was found! moving on..\033[0m")
        
def remove_icmp():
    
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving icmp...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    try:
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/icmp.sh\" | crontab -", shell=True)
        subprocess.run("ip link set dev tun0 down > /dev/null", shell=True)
        subprocess.run("ip link set dev tun1 down > /dev/null", shell=True)
        subprocess.run("apt install lsof -y", shell=True)
        subprocess.run("systemctl daemon-reload", shell=True)

        print("Progress: ", end="")

        try:
            lsof_process = subprocess.Popen(["lsof", "-t", "/root/icmpv4/icmptunnel"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            lsof_output, lsof_error = lsof_process.communicate()

            if lsof_output:
                pids = lsof_output.decode().split('\n')[:-1]
                for pid in pids:
                    subprocess.run(["kill", pid])

            subprocess.run(["rm", "-rf", "/root/icmpv4"])
        except FileNotFoundError:
            print("Error: Directory 'icmp' does not exist.")
        except Exception as e:
            print("Error:", e)

        subprocess.run("crontab -l | grep -v \"/bin/bash /etc/icmp.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"/bin/bash /etc/icmp-iran.sh\" | crontab -", shell=True)
        display_checkmark("\033[92mICMPtunnel Uninstallation completed!\033[0m")

        if os.path.isfile("/etc/icmp.sh"):
            os.remove("/etc/icmp.sh")
        if os.path.isfile("/etc/icmp-iran.sh"):
            os.remove("/etc/icmp-iran.sh")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", e)
        

        
            
def remove_ipip6():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mIPIP6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/ipip.sh", shell=True) == 0:
            subprocess.run("rm /etc/ipip.sh", shell=True)
        if subprocess.call("test -f /etc/private.sh", shell=True) == 0:
            subprocess.run("rm /etc/private.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipip.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v6.sh", shell=True)
        sleep(1)
        subprocess.run("sudo rm /etc/ping_ip.sh", shell=True)

        subprocess.run("systemctl disable ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v6.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl disable ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip.service > /dev/null 2>&1", shell=True)
        sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumip down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumip > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumi down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 3
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
def i6to41_any():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6to4 \033[92m[Anycast]\033[93m Menu\033[0m")
    print('\033[92m "-"\033[93m════════════════════════════\033[0m') 
    
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to main menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")
    
    server_type = input("\033[38;5;205mEnter your choice Please: \033[0m")

    if server_type == '1':
        i6to41_any_kharej()
    elif server_type == '2':
        i6to41_any_iran()
    elif server_type == '3':
        clear()
        main_menu()
    else:
        print("Invalid choice.")
		
def i6to41_any_kharej():
    clear_screen()
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93m6to4 \033[92mKharej\033[93m  Menu\033[92m[Anycast]\033[0m')  
    print('\033[92m "-"\033[93m════════════════════════════\033[0m')    
    
    
    if subprocess.run(['test', '-f', '/etc/6to4.sh'], capture_output=True).returncode == 0:
        subprocess.run(['rm', '/etc/6to4.sh'])
        
    display_notification("\033[93mConfiguring Kharej..\033[0m") 
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    sleep(1)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej IPv4\033[93m address: \033[0m")
           
    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    
    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")
    
    with open('/etc/6to4.sh', 'w') as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe sit\n")
        f.write("/sbin/ip tunnel add azumi6 mode sit remote any local {} ttl 255\n".format(local_ip))
        set_mtu = input('\033[93mDo you want to set \033[92m MTU?\033[93m (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m')
        if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
            mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
            f.write("/sbin/ip -6 link set dev azumi6 mtu {}\n".format(mtu_value))
        else:
            f.write("/sbin/ip -6 link set dev azumi6 mtu 1480\n")
        f.write("/sbin/ip link set dev azumi6 up\n")
        f.write("/sbin/ip -6 addr add {}/16 dev azumi6\n".format(prefix))
        f.write("/sbin/ip -6 route add 2000::/3 via ::192.88.99.1 dev azumi6 metric 1\n")
        
    num_ips = input("\033[93mHow many \033[92madditional IPs\033[93m do you need? \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")
    
    start_index = 3
    
    with open('/etc/6to4.sh', 'a') as f:
        for i in range(start_index, start_index + int(num_ips)):
            ip_addr = "2002:{:02x}{:02x}:{:02x}{:02x}::{:02x}/16".format(*map(int, ipv4.split('.')), i)
            f.write("ip -6 addr add {} dev azumi6\n".format(ip_addr))
    
    display_notification("\033[93mAdding cronjob!\033[0m")

    config_file_path = '/etc/6to4.sh'


    subprocess.run(f"(crontab -l | grep -v -F '{config_file_path}') | crontab -", shell=True, check=True)


    cronjob_command = f"(crontab -l 2>/dev/null; echo '@reboot sh {config_file_path}') | crontab -"
    subprocess.run(cronjob_command, shell=True, check=True)
    
    display_notification("\033[93mStarting 6to4...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    subprocess.run(['/bin/bash', '/etc/6to4.sh'])
    num_servers = int(input("\033[93mEnter the \033[92mnumber\033[93m of \033[96mServers\033[93m[Ping Service]? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(num_servers):
        remote_ipv4 = input(f"\033[93mEnter \033[96mIPv4 address\033[93m of server \033[92m{i+1} [Ping Service]: \033[0m")
    
        remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
        sleep(1)
        print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
        ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
        print(ping_result)

        script_content = '''#!/bin/bash

ip_address="{}"

max_pings=3

interval=20

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
       
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

        script_filename = f'/etc/ping_v6{i+1}.sh'
        with open(script_filename, 'w') as f:
            f.write(script_content)

        subprocess.run(['chmod', '+x', script_filename])

        service_filename = f'/etc/systemd/system/ping_v6{i+1}.service'
        with open(service_filename, 'w') as f:
            f.write('[Unit]\n')
            f.write(f'Description=Ping Service {i+1}\n')
            f.write('After=network.target\n')
            f.write('\n')
            f.write('[Service]\n')
            f.write(f'ExecStart=/bin/bash {script_filename}\n')
            f.write('Restart=always\n')
            f.write('\n')
            f.write('[Install]\n')
            f.write('WantedBy=multi-user.target\n')

        subprocess.run(['systemctl', 'daemon-reload'])
        subprocess.run(['systemctl', 'enable', f'ping_v6{i+1}.service'])
        subprocess.run(['systemctl', 'start', f'ping_v6{i+1}.service'])
        sleep(1)
        subprocess.run(["systemctl", "restart", f"ping_v6{i+1}.service"])

        print(f"\033[92mPing service for server {i+1} has been added successfully!\033[0m")
        print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    display_checkmark("\033[92m6to4 Service has been added successfully!\033[0m")
   ##### saki _ gretap

		
def gree6_tunnel(remote_ip, local_ip):
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    


def gree6_kharej():
    remote_ip = "2001:831b::2" #iran-ip
    local_ip = "2001:831b::1"   #kharej ip
    gree6_tunnel(remote_ip, local_ip)
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    ping_gre6_service()

    gre6_cronjob()
   
#sit kharej
def kharej_gree6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve + GRE Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(' \033[93mConfiguring \033[92mKharej\033[93m server\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add 2001:831b::1/64 dev azumi\n")
        f.write("ip -6 route add 2001::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gree6_kharej()
    sleep(1)	
    
    
 ##### IRAN gre6
def iran_ping():
    try:
        subprocess.run(["ping", "-c", "2", "2001:831b::1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
     


def gree6_iran_tunnel(remote_ip, local_ip):
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
        
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
        with open('/etc/gre6.sh', 'a') as f:
            f.write(rt_command)
        subprocess.run(rt_command, shell=True, check=True)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    


    

def gree6_iran():
    remote_ip = "2001:831b::1" #kharej ip
    local_ip = "2001:831b::2"   #iran ip
    gree6_iran_tunnel(remote_ip, local_ip)


    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)

    
    iran_gre6_service()

    gre6_cronjob()
  
   
#sit iran
def iran_gree6_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve + GRE Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[93mConfiguring \033[92mIran\033[93m server\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "sit", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe sit\n")
        f.write(f"ip tunnel add azumi mode sit remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip link set dev azumi up\n")
        f.write("ip addr add 2001:831b::2/64 dev azumi\n")
        f.write("ip -6 route add 2001::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:831b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gree6_iran()
    sleep(1)	
    
def genf_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGR6 + Geneve Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mGRE + Native Geneve\033[0m')
    print('2. \033[96mIP6tnl + GRE + Native Geneve\033[0m')
    print('3. \033[93mGRE + IPV4 Geneve\033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genfm_ip()
            break
        elif server_type == '2':
            genf3_ip()
            break
        elif server_type == '3':
            genf5_ip()
            break
        elif server_type == '0':
            clear()
            genz_ip()
            break
        else:
            print('Invalid choice.') 
# sit gre gen
def kharej_gree61_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve + GRE Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print(' \033[93mConfiguring \033[92mKharej\033[93m server\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m") 
    ufw("2001:831b::2")
    ufw("2001:831b::1")	

    subprocess.run(["ip", "tunnel", "add", "azumi", "mode", "ip6ip6", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::1/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe ipip\n")
        f.write(f"ip -6 tunnel add azumi mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip -6 link set dev azumi up\n")
        f.write("ip -6 addr add 2001:831b::1/64 dev azumi\n")
        f.write("ip -6 route add 2001::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    run_ping()
    sleep(1)
    


    script_content1 = '''#!/bin/bash


ip_address="2001:831b::2"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()
    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gree61_kharej1()
    sleep(1)	
    
def iran_gree61_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve + GRE Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[93mConfiguring \033[92mIran\033[93m server\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    if os.path.isfile("/etc/private.sh"):
        os.remove("/etc/private.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")   
    ufw("2001:831b::2")
    ufw("2001:831b::1")

    subprocess.run(["ip", "-6", "tunnel", "add", "azumi", "mode", "ip6ip6", "remote", remote_ip, "local", local_ip, "ttl", "255"], stdout=subprocess.DEVNULL)
    subprocess.run(["ip", "-6", "link", "set", "dev", "azumi", "up"], stdout=subprocess.DEVNULL)

    initial_ip = "2001:831b::2/64"
    subprocess.run(["ip", "addr", "add", initial_ip, "dev", "azumi"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/private.sh", "w") as f:
        f.write("/sbin/modprobe ipip\n")
        f.write(f"ip -6 tunnel add azumi mode ip6ip6 remote {remote_ip} local {local_ip} ttl 255\n")
        f.write("ip -6 link set dev azumi up\n")
        f.write("ip -6 addr add 2001:831b::2/64 dev azumi\n")
        f.write("ip -6 route add 2001::/16 dev azumi\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [6to4]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumi mtu {mtu_value}\n"
        with open("/etc/private.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mPrivate ip added successfully!\033[0m")
    file_path = '/etc/private.sh'
    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)

    sleep(1)
    add_cron_job()

    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
    iran_ping()
    

    sleep(1)

    script_content1 = '''#!/bin/bash


ip_address="2001:831b::1"

max_pings=3

interval=20

while true
do
    
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_v6.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_v6.sh', 0o755)
    ping_v6_service()

    display_notification("\033[93mConfiguring...\033[0m")
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gree61_iran1()
    sleep(1)	
    
def gree61_kharej1_tunnel():
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote 2001:831b::2 local 2001:831b::1 ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
    
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    


def gree61_kharej1():
    gree61_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
    
def gree61_iran1_tunnel():
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote 2001:831b::1 local 2001:831b::2 ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    


    

def gree61_iran1():
    gree61_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()
    
def genf3_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve +  \033[96mNative \033[93m+\033[92m Gre6 + IP6tnl \033[93mMenu\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen1_ipger()
            break
        elif server_type == '2':
            gen1_ipgeri()
            break
        elif server_type == '3':
            clear()
            genf_ip()
            break
        else:
            print('Invalid choice.')    
def gen1_ipger():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_gerk1_version1()
            break
        elif server_type == '2':
            geneve_gerk1_version2()
            break
        else:
            print('Invalid choice.')

def geneve_gerk1_version1():
    kharej_gree61_menu()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_gerk1_version2():
    kharej_gree61_menu()

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw("2002:831a::1")
    ufw("2002:831a::2")

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
	
def gen1_ipgeri():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_geri1_version1()
            break
        elif server_type == '2':
            geneve_geri1_version2()
            break
        else:
            print('Invalid choice.')

def geneve_geri1_version1():
    iran_gree61_menu()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_geri1_version2():
    iran_gree61_menu()

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
## method 1
def genfm_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGR6 + Geneve Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mMethod 1 [no route]\033[0m')
    print('2. \033[93mMethod 2 [/w route]\033[0m')
    print('0. \033[91mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genf1_ip()
            break
        elif server_type == '2':
            genf12_ip()
            break
        elif server_type == '0':
            clear()
            genf_ip()
            break
        else:
            print('Invalid choice.')  

def genf12_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve +  \033[96mNative \033[93m+\033[92m Gre6 \033[93mM[2]\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genr_ipger()
            break
        elif server_type == '2':
            genr_ipgeri()
            break
        elif server_type == '3':
            clear()
            genf_ip()
            break
        else:
            print('Invalid choice.')
def genr_ipger():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_gerkr_version1()
            break
        elif server_type == '2':
            geneve_gerkr_version2()
            break
        else:
            print('Invalid choice.')
def gree6r_kharej1_tunnel():
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m") 
    ufw(remote_ip)	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::1\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)

    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


def gree6r_kharej1():
    gree6r_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
    
def geneve_gerkr_version1():
    gree6r_kharej1()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_gerkr_version2():
    gree6r_kharej1()

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw("2002:831a::1")
    ufw("2002:831a::2")

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
	
def genr_ipgeri():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_gerir_version1()
            break
        elif server_type == '2':
            geneve_gerir_version2()
            break
        else:
            print('Invalid choice.')

def gree6r_iran1_tunnel():
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")   
    ufw(remote_ip)	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
    if answer.lower() in ['yes', 'y']:
        interface = ipv6_int()
        if interface is None:
            print("\033[91mError: No network interface with IPv6 address\033[0m")
        else:
            print("Interface:", interface)
            rt_command = "ip -6 route replace default via fe80::1 dev {} src 2002:831a::2\n".format(interface)
            with open('/etc/gre6.sh', 'a') as f:
                f.write(rt_command)
    else:        
        print("Skipping changing the default route.")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
    sleep(1)
    subprocess.run(f"bash {file_path}", shell=True, check=True)


    

def gree6r_iran1():
    gree6r_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()
    
def geneve_gerir_version1():
    gree6r_iran1()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_gerir_version2():
    gree6r_iran1()

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")             

    
def genf1_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve +  \033[96mNative \033[93m+\033[92m Gre6 \033[93mM[1]\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_ipger()
            break
        elif server_type == '2':
            gen_ipgeri()
            break
        elif server_type == '3':
            clear()
            genf_ip()
            break
        else:
            print('Invalid choice.')
            
def genf2_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve + \033[96mIPV4 \033[93m+\033[92m Gre6 \033[93mMenu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            genf5_ip()
            break
        elif server_type == '2':
            gen5_ipgeri()
            break
        elif server_type == '3':
            clear()
            genf_ip()
            break
        else:
            print('Invalid choice.')
        
        
def genkh_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "80.200.2.1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
 
def genir_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "80.200.1.1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def ping_kh_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_sys.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_gen.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_gen.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_gen.service'])
    
        
def gen_job():
    file_path = '/etc/sys.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
def ufw(ip_address):
    subprocess.run(["sudo", "ufw", "allow", "from", ip_address])
def ufwr():
    subprocess.run(["sudo", "ufw", "reload"])
def ipv4_address():
    result = subprocess.run(["curl", "-s", "https://ipinfo.io/ip"], capture_output=True, text=True)
    return result.stdout.strip()            
def kharej1_gen_menu():
    kharej_gree6_menu()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    ufw("2001:831b::1")
    ufw("2001:831b::2")
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m Configuring Kharej server Geneve\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    if os.path.isfile("/etc/sys.sh"):
        os.remove("/etc/sys.sh")



    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
 
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")
        
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()
    genkh_ping()
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")


    script_content1 = '''#!/bin/bash


ip_address="80.200.2.1"


max_pings=3


interval=20


while true
do
   
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
       script_file.write(script_content1)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()

    
    print("\033[92mKharej Server Geneve Configuration Completed!\033[0m")

def iran1_gen_menu():
    iran_gree6_menu()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    ufw("2001:831b::1")
    ufw("2001:831b::2")
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m Configuring Iran server Geneve\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    
    if os.path.isfile("/etc/sys.sh"):
        os.remove("/etc/sys.sh")
    

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
 
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")
    


    gen_job()
    genir_ping()
    sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")
   

    sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    


    script_content = '''#!/bin/bash


ip_address="80.200.1.1"


max_pings=3


interval=20


while true
do

    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''


    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)


    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Geneve Configuration Completed!\033[0m")
	
def genf5_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve +  \033[96mIPV4 \033[93m+\033[92m Gre6 \033[93mMenu\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen5_ipger()
            break
        elif server_type == '2':
            gen5_ipgeri()
            break
        elif server_type == '3':
            clear()
            genf_ip()
            break
        else:
            print('Invalid choice.')    
def gen5_ipger():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharej1_gen_menu()
            break
        elif server_type == '2':
            geneve_gerk6_version2()
            break
        else:
            print('Invalid choice.')

    
def geneve_gerk6_version2():
    kharej_gree6_menu()
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    ufw("2001:831b::1")
    ufw("2001:831b::2")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))


    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
	
def gen5_ipgeri():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            iran1_gen_menu()
            break
        elif server_type == '2':
            geneve_geri5_version2()
            break
        else:
            print('Invalid choice.')


    
def geneve_geri5_version2():
    iran_gree6_menu()
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    ufw("2001:831b::1")
    ufw("2001:831b::2")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
## test n gre
def gree6_kharej1_tunnel():
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
		
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m") 
    ufw(remote_ip)	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::1/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
 
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    sleep(1)
    


def gree6_kharej1():
    gree6_kharej1_tunnel()
    ip_address = "2002:831a::2" #iranip
    max_pings = 3
    interval = 20
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    create_ping_script(ip_address, max_pings, interval)
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)   
    ping_gre6_service()
    gre6_cronjob()
     


def gree6_iran1_tunnel():
    file_path = '/etc/gre6.sh'

    if os.path.exists(file_path):
        os.remove(file_path)
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV6 address [\033[92mNative\033[93m or\033[96m Tunnelbroker\033[93m]: \033[0m")
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")   
    ufw(remote_ip)	
    command = f"echo '/sbin/modprobe ip6_gre' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 tunnel add azumig6 mode ip6gre remote {remote_ip} local {local_ip} ttl 255' >> {file_path}"
    subprocess.run(command, shell=True, check=True)

    command = f"echo 'ip -6 addr add 2002:831a::2/64 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip link set azumig6 up' >> {file_path}"
    subprocess.run(command, shell=True, check=True)
    
    command = f"echo 'ip -6 route add 2002::/16 dev azumig6' >> {file_path}"
    subprocess.run(command, shell=True, check=True)


    command = f"chmod +x {file_path}"
    subprocess.run(command, shell=True, check=True)
    subprocess.run(f"bash {file_path}", shell=True, check=True)
 
    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [GRE6]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")
    if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
        mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
        mtu_command = f"ip link set dev azumig6 mtu {mtu_value}\n"
        with open('/etc/gre6.sh', 'a') as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
 
    sleep(1)
    


    

def gree6_iran1():
    gree6_iran1_tunnel()
    ip_address = "2002:831a::1" #kharejip
    max_pings = 3
    interval = 20
    iran_ping_script(ip_address, max_pings, interval)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    ping_result = subprocess.run(['ping6', '-c', '2', ip_address], capture_output=True, text=True).stdout.strip()
    print(ping_result)    
    iran_gre6_service()
    gre6_cronjob()

def gen_ipger():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_gerk_version1()
            break
        elif server_type == '2':
            geneve_gerk_version2()
            break
        else:
            print('Invalid choice.')

def geneve_gerk_version1():
    gree6_kharej1()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_gerk_version2():
    gree6_kharej1()

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw("2002:831a::1")
    ufw("2002:831a::2")

    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::2"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::2\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
	
def gen_ipgeri():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_geri_version1()
            break
        elif server_type == '2':
            geneve_geri_version2()
            break
        else:
            print('Invalid choice.')

def geneve_geri_version1():
    gree6_iran1()
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_geri_version2():
    gree6_iran1()

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw("2002:831a::1")
    ufw("2002:831a::2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", "2002:831a::1"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote 2002:831a::1\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 

##azumi native
def gen2_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve + Native  Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKHAREJ \033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_na_k()
            break
        elif server_type == '2':
            gen_na_i()
            break
        elif server_type == '3':
            clear()
            genz_ip()
            break
        else:
            print('Invalid choice.') 

def gen_na_k():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_nk_version1()
            break
        elif server_type == '2':
            geneve_nk_version2()
            break
        else:
            print('Invalid choice.')

def geneve_nk_version1():
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[96mNative \033[93m| \033[92mTunnelbroker\033[93m]: \033[0m")
    ufw(remote_ip)
    ufw("80.200.1.1")
    ufw("80.200.1.2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/30", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/30 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_nk_version2():
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV6 address [\033[96mNative \033[93m| \033[92mTunnelbroker\033[93m]: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw(remote_ip)
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
    
def gen_na_i():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_ni_version1()
            break
        elif server_type == '2':
            geneve_ni_version2()
            break
        else:
            print('Invalid choice.')

def geneve_ni_version1():
    remote_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m IPV6 address [\033[96mNative \033[93m| \033[92mTunnelbroker\033[93m]: \033[0m")

    ufw(remote_ip)
    ufw("80.200.1.1")
    ufw("80.200.1.2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.2/30", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.2/30 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_ni_version2():
    remote_ip = input("\033[93mEnter \033[92mKHAREJ\033[93m IPV6 address [\033[96mNative \033[93m| \033[92mTunnelbroker\033[93m]: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw(remote_ip)
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")    
   ##### saki no
   
def gen_ip():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve  Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mMethod 1[PointIP] \033[0m')
    print('2. \033[93mMethod 2[Route]\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            gen_ipm1()
            break
        elif server_type == '2':
            gen_ipm2()
            break
        elif server_type == '3':
            clear()
            genz_ip()
            break
        else:
            print('Invalid choice.')  
            
def gen_ipm2():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve \033[92mMethod 2\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharejm2_gen_menu()
            break
        elif server_type == '2':
            iranm2_gen_menu()
            break
        elif server_type == '3':
            clear()
            gen_ip()
            break
        else:
            print('Invalid choice.')    
       
def gen_ipm1():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mGeneve \033[92mMethod 1\033[93m Menu\033[0m')
    print('\033[92m "-"\033[93m══════════════════════════\033[0m')
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose what to do:\033[0m')
    print('1. \033[92mKharej\033[0m')
    print('2. \033[93mIRAN\033[0m')
    print('3. \033[94mback to the previous menu\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            kharejm1_gen_menu()
            break
        elif server_type == '2':
            iranm1_gen_menu()
            break
        elif server_type == '3':
            clear()
            gen_ip()
            break
        else:
            print('Invalid choice.')
        
        
def genkhm1_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "80.200.2.1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def genkhm2_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "80.200.1.2"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
        
def genirm1_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "80.200.1.1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)
def genirm2_ping():
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    try:
        print("\033[96mPlease Wait, Azumi is pinging...")
        subprocess.run(["ping", "-c", "2", "80.200.1.1"], check=True, stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(Fore.LIGHTRED_EX + "Pinging failed:", e, Style.RESET_ALL)   
        
def ping_kh_service():
    service_content = '''[Unit]
Description=keepalive
After=network.target

[Service]
ExecStart=/bin/bash /etc/ping_sys.sh
Restart=always

[Install]
WantedBy=multi-user.target
'''

    service_file_path = '/etc/systemd/system/ping_gen.service'
    with open(service_file_path, 'w') as service_file:
        service_file.write(service_content)

    subprocess.run(['systemctl', 'daemon-reload'])
    subprocess.run(['systemctl', 'enable', 'ping_gen.service'])
    sleep(1)
    subprocess.run(['systemctl', 'restart', 'ping_gen.service'])
    
        
def gen_job():
    file_path = '/etc/sys.sh'

    try:
       
        subprocess.run(
            f"(crontab -l | grep -v '{file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        
        subprocess.run(
            f"(crontab -l ; echo '@reboot /bin/bash {file_path}') | crontab -",
            shell=True,
            capture_output=True,
            text=True
        )

        display_checkmark("\033[92mCronjob added successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("\033[91mFailed to add cronjob:\033[0m", e)
def ufw(ip_address):
    subprocess.run(["sudo", "ufw", "allow", "from", ip_address])
def delufw(ip_address):
    subprocess.run(["sudo", "ufw", "delete", "allow", "from", ip_address])
def ipv4_address():
    result = subprocess.run(["curl", "-s", "https://ipinfo.io/ip"], capture_output=True, text=True)
    return result.stdout.strip() 

def gen_ipvers():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_ipk_version1()
            break
        elif server_type == '2':
            geneve_ipk_version2()
            break
        else:
            print('Invalid choice.')

def geneve_ipk_version1():
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    ufw(remote_ip)
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.2.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.2.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_ipk_version2():
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw(remote_ip)
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m") 
    
def kharejm1_gen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server \033[92mMethod 1\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/sys.sh"):
        os.remove("/etc/sys.sh")

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    gen_ipvers()

## model 2
def gen_ipvers2():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_ipk1_version1()
            break
        elif server_type == '2':
            geneve_ipk1_version2()
            break
        else:
            print('Invalid choice.')

def geneve_ipk1_version1():
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")
    ufw(remote_ip)
    ufw("80.200.1.1")
    ufw("80.200.1.2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.1/30", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.1/30 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.2"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def geneve_ipk1_version2():
    remote_ip = input("\033[93mEnter \033[92mIRAN\033[93m IPV4 address: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw(remote_ip)
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genkhm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (Kharej):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mIRAN IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mKharej Server Configuration Completed!\033[0m")   
    
def kharejm2_gen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mKharej server\033[92m Method 2\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring Kharej server...\033[0m")

    if os.path.isfile("/etc/sys.sh"):
        os.remove("/etc/sys.sh")

    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gen_ipvers2()
    
def gen_ipver():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_ip_version1()
            break
        elif server_type == '2':
            geneve_ip_version2()
            break
        else:
            print('Invalid choice.')

def geneve_ip_version1():
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    ufw(remote_ip)
    ufw("80.200.1.1")
    ufw("80.200.2.1")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.2.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "route", "add", "80.200.1.1/32", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.2.1/32 dev azumigen\n")
        f.write("sudo ip route add 80.200.1.1/32 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.2.1\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_ip_version2():
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw(remote_ip)

    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m") 
    
def iranm1_gen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIran server\033[92m Method 1\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring for Iran server...\033[0m")
    
    if os.path.isfile("/etc/sys.sh"):
        os.remove("/etc/sys.sh")
    
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    gen_ipver()

def gen1_ipver():
    print("\033[93m╭───────────────────────────────────────╮\033[0m")
    print('\033[93mChoose Geneve IP Version:\033[0m')
    print('1. \033[92mIPV4\033[0m')
    print('2. \033[93mIPV6\033[0m')
    print("\033[93m╰───────────────────────────────────────╯\033[0m")

    while True:
        server_type = input('\033[38;5;205mEnter your choice Please: \033[0m')
        if server_type == '1':
            geneve_ipi_version1()
            break
        elif server_type == '2':
            geneve_ipi_version2()
            break
        else:
            print('Invalid choice.')

def geneve_ipi_version1():
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")
    ufw(remote_ip)
    ufw("80.200.1.1")
    ufw("80.200.1.2")
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", "80.200.1.2/30", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write("sudo ip addr add 80.200.1.2/30 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    genirm1_ping()
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "        80.200.1.2\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    script_content = '''#!/bin/bash
ip_address="80.200.1.1"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{print $2}" | awk -F " " "{print $1}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")   
    
def geneve_ipi_version2():
    remote_ip = input("\033[93mEnter \033[92mKharej\033[93m IPV4 address: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))

    ufw(remote_ip)
    
    subprocess.run(["sudo", "ip", "link", "add", "name", "azumigen", "type", "geneve", "id", "1000", "remote", remote_ip], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "link", "set", "azumigen", "up"], stdout=subprocess.DEVNULL)
    subprocess.run(["sudo", "ip", "addr", "add", prefix+"/16", "dev", "azumigen"], stdout=subprocess.DEVNULL)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_notification("\033[93mAdding commands...\033[0m")
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")

    with open("/etc/sys.sh", "w") as f:
        f.write(f"sudo ip link add name azumigen type geneve id 1000 remote {remote_ip}\n")
        f.write("sudo ip link set azumigen up\n")
        f.write(f"sudo ip addr add {prefix}/16 dev azumigen\n")

    set_mtu = input("\033[93mDo you want to set the \033[92mMTU\033[96m [Geneve]\033[93m? (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m")

    if set_mtu.lower() == "yes" or set_mtu.lower() == "y":
        mtu_value = input("\033[93mEnter the desired\033[92m MTU value\033[93m: \033[0m")
        mtu_command = f"ip link set dev azumigen mtu {mtu_value}\n"
        with open("/etc/sys.sh", "a") as f:
            f.write(mtu_command)
        subprocess.run(mtu_command, shell=True, check=True)

    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    display_checkmark("\033[92mConfiguration is done!\033[0m")

    gen_job()

    time.sleep(1)
    display_checkmark("\033[92mkeepalive service Configured!\033[0m")

    
    time.sleep(1)
    print("\033[93m─────────────────────────────────────────────────────────\033[0m")
    print("\033[93mCreated IP Addresses (IRAN):\033[0m")
    print("\033[92m" + "+---------------------------+" + "\033[0m")
    print("\033[92m" + "     {}\033[0m".format(prefix))
    print("\033[92m" + "+---------------------------+" + "\033[0m")

    remote_ipv4 = input("\033[93mEnter \033[92mKharej IPv4\033[93m address [Ping Service]: \033[0m")

    remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
    ufw(remote_prefix)
    
    script_content = '''#!/bin/bash
ip_address="{remote_prefix}"
max_pings=3
interval=20
while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done
    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''.format(remote_prefix=remote_prefix)

    with open('/etc/ping_sys.sh', 'w') as script_file:
        script_file.write(script_content)

    os.chmod('/etc/ping_sys.sh', 0o755)
    ping_kh_service()
    
    print("\033[92mIRAN Server Configuration Completed!\033[0m")
    
def iranm2_gen_menu():
    os.system("clear")
    print('\033[92m ^ ^\033[0m')
    print('\033[92m(\033[91mO,O\033[92m)\033[0m')
    print('\033[92m(   ) \033[93mIran server\033[92m Method 2\033[0m')
    print('\033[92m "-"\033[93m═══════════════════════════\033[0m')
    display_notification("\033[93mConfiguring for Iran server...\033[0m")
    
    if os.path.isfile("/etc/sys.sh"):
        os.remove("/etc/sys.sh")
    
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    gen1_ipver()
	
def i6to41_any_iran():
    clear_screen()
    print("\033[92m ^ ^\033[0m")
    print("\033[92m(\033[91mO,O\033[92m)\033[0m")
    print("\033[92m(   ) \033[93m6to4 \033[92mIRAN\033[93m  Menu\033[92m[Anycast]\033[0m")
    print('\033[92m "-"\033[93m════════════════════════════\033[0m') 


    if subprocess.run(['test', '-f', '/etc/6to4.sh'], capture_output=True).returncode == 0:
        subprocess.run(['rm', '/etc/6to4.sh'])
        
    display_notification("\033[93mConfiguring...\033[0m")
    local_ipv4 = server_ipv4()
    if local_ipv4 is None:
        return
    sleep(1)    
    print("\033[93m╭─────────────────────────────────────────────────────────╮\033[0m")
    local_ip = input("\033[93mEnter \033[92mIran IPv4\033[93m address: \033[0m")

    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()

    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    
    ipv6_address = f'ipv4="{local_ipv4}"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`'
    ipv6_process = subprocess.run(ipv6_address, shell=True, capture_output=True, text=True)
    if ipv6_process.returncode != 0:
        print("Error generating IPv6 address.")
        return
    
    ipv6 = ipv6_process.stdout.strip()
    print("\033[93m│\033[0m \033[92mGenerated IPv6 address:\033[0m", ipv6, "\033[93m│\033[0m")

    with open('/etc/6to4.sh', 'w') as f:
        f.write("#!/bin/bash\n")
        f.write("/sbin/modprobe sit\n")
        f.write("/sbin/ip tunnel add azumi6 mode sit remote any local {} ttl 255\n".format(local_ip))
        set_mtu = input('\033[93mDo you want to set \033[92m MTU?\033[93m (\033[92myes\033[93m/\033[91mno\033[93m): \033[0m')
        if set_mtu.lower() == 'yes' or set_mtu.lower() == 'y':
            mtu_value = input('\033[93mEnter the desired \033[92mMTU value\033[93m: \033[0m')
            f.write("/sbin/ip -6 link set dev azumi6 mtu {}\n".format(mtu_value))
        else:
            f.write("/sbin/ip -6 link set dev azumi6 mtu 1480\n")
        f.write("/sbin/ip link set dev azumi6 up\n")
        f.write("/sbin/ip -6 addr add {}/16 dev azumi6\n".format(prefix))
        f.write("/sbin/ip -6 route add 2000::/3 via ::192.88.99.1 dev azumi6 metric 1\n")
        answer = input("\033[93mDo you want to change the \033[92mdefault route\033[93m? (\033[92my\033[93m/\033[91mn\033[93m)\033[0m ")
        if answer.lower() in ['yes', 'y']:
            interface = ipv6_int()
            if interface is None:
               print("Error: No network interface with IPv6 address.")
            else:
               print("Interface:", interface)
               f.write("ip -6 route replace default via fe80::1 dev {} src {}\n".format(interface, prefix))
        else:
            print("Skipping changing the default route.")

    num_ips = int(input("\033[93mHow many \033[92madditional IPs\033[93m do you need? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    start_index = 3

    with open('/etc/6to4.sh', 'a') as f:
        for i in range(start_index, start_index + num_ips):
            ip_addr = "2002:{:02x}{:02x}:{:02x}{:02x}::{:02x}/16".format(*map(int, ipv4.split('.')), i)
            f.write("ip -6 addr add {} dev azumi6\n".format(ip_addr))

    display_notification("\033[93mAdding cronjob!\033[0m")

    config_file_path = '/etc/6to4.sh'


    subprocess.run(f"(crontab -l | grep -v -F '{config_file_path}') | crontab -", shell=True, check=True)


    cronjob_command = f"(crontab -l 2>/dev/null; echo '@reboot sh {config_file_path}') | crontab -"
    subprocess.run(cronjob_command, shell=True, check=True)

    display_notification("\033[93mStarting 6to4...\033[0m")
    subprocess.run(['/bin/bash', '/etc/6to4.sh'])

    num_servers = int(input("\033[93mEnter the \033[92mnumber\033[93m of \033[96mServers\033[93m[Ping Service]? \033[0m"))
    print("\033[93m╰─────────────────────────────────────────────────────────╯\033[0m")

    for i in range(num_servers):
        remote_ipv4 = input(f"\033[93mEnter \033[96mIPv4 address\033[93m of server \033[92m{i+1} [Ping Service]: \033[0m")
    
        remote_prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, remote_ipv4.split('.')))
        sleep(1)
        print('\033[92m(\033[96mPlease wait,Azumi is pinging...\033[0m')
        ping_result = subprocess.run(['ping6', '-c', '2', remote_prefix], capture_output=True, text=True).stdout.strip()
        print(ping_result)

        script_content = '''#!/bin/bash

ip_address="{}"

max_pings=3

interval=20

while true
do
    for ((i = 1; i <= max_pings; i++))
    do
        ping_result=$(ping -c 1 $ip_address | grep "time=" | awk -F "time=" "{{print $2}}" | awk -F " " "{{print $1}}" | cut -d "." -f1)
       
        if [ -n "$ping_result" ]; then
            echo "Ping successful! Response time: $ping_result ms"
        else
            echo "Ping failed!"
        fi
    done

    echo "Waiting for $interval seconds..."
    sleep $interval
done
'''

        script_filename = f'/etc/ping_v6{i+1}.sh'
        with open(script_filename, 'w') as f:
            f.write(script_content)

        subprocess.run(['chmod', '+x', script_filename])

        service_filename = f'/etc/systemd/system/ping_v6{i+1}.service'
        with open(service_filename, 'w') as f:
            f.write('[Unit]\n')
            f.write(f'Description=Ping Service {i+1}\n')
            f.write('After=network.target\n')
            f.write('\n')
            f.write('[Service]\n')
            f.write(f'ExecStart=/bin/bash {script_filename}\n')
            f.write('Restart=always\n')
            f.write('\n')
            f.write('[Install]\n')
            f.write('WantedBy=multi-user.target\n')

        subprocess.run(['systemctl', 'daemon-reload'])
        subprocess.run(['systemctl', 'enable', f'ping_v6{i+1}.service'])
        subprocess.run(['systemctl', 'start', f'ping_v6{i+1}.service'])
        sleep(1)
        subprocess.run(["systemctl", "restart", f"ping_v6{i+1}.service"])

        print(f"\033[92mPing service for server {i+1} has been added successfully!\033[0m")

    display_checkmark("\033[92m6to4 Service has been added successfully!\033[0m")	
	
def remove_6to4():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92m6TO4\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/6to4.sh", shell=True) == 0:
            subprocess.run("rm /etc/6to4.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot sh /etc/6to4.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v6.sh", shell=True)
        time.sleep(1)

        subprocess.run("systemctl disable ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v6.service > /dev/null 2>&1", shell=True)
        time.sleep(1)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumi6 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi6 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def remove_6to41():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92m6TO4\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/6to4.sh", shell=True) == 0:
            subprocess.run("rm /etc/6to4.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot sh /etc/6to4.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v6.sh", shell=True)
        time.sleep(1)

        subprocess.run("systemctl disable ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v61.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v62.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v63.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v64.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl disable ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v65.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v65.service > /dev/null 2>&1", shell=True)
        time.sleep(1)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumi6 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi6 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())	
        
def remove_gre():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot sh /etc/gre.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_ip.sh", shell=True)
        time.sleep(1)

        subprocess.run("systemctl disable ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip.service > /dev/null 2>&1", shell=True)
        time.sleep(1)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("ip link set dev azumig down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig > /dev/null", shell=True)


        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
		
def remove_gre6():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre6.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre6.sh", shell=True)
        if subprocess.call("test -f /etc/private.sh", shell=True) == 0:
            subprocess.run("rm /etc/private.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre6.sh\" | crontab -", shell=True)
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_v6.sh", shell=True)
        time.sleep(1)
        subprocess.run("sudo rm /etc/ping_ip.sh", shell=True)

        subprocess.run("systemctl disable ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v6.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl disable ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi > /dev/null", shell=True)
        sleep(1)
        subprocess.run("ip link set dev azumig6 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig6 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def remove_gre621():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre6.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre6.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre6.sh\" | crontab -", shell=True)
        subprocess.run("sudo rm /etc/ping_ip.sh", shell=True)
        subprocess.run("systemctl disable ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumig6 down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumig6 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())

def remove_gre6tap21():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving \033[92mGRE6\033[93m Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        if subprocess.call("test -f /etc/gre6.sh", shell=True) == 0:
            subprocess.run("rm /etc/gre6.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/gre6.sh\" | crontab -", shell=True)
        subprocess.run("sudo rm /etc/ping_ip.sh", shell=True)
        subprocess.run("systemctl disable ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_ip.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_ip.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumig6 down > /dev/null", shell=True)
        subprocess.run("ip link delete azumig6 > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
		
def remove_private():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving private IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    
    try:
        if subprocess.call("test -f /etc/private.sh", shell=True) == 0:
            subprocess.run("rm /etc/private.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/private.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_v6.sh", shell=True)
        
        time.sleep(1)
        subprocess.run("systemctl disable ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_v6.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_v6.service > /dev/null 2>&1", shell=True)
        time.sleep(1)
        
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("ip link set dev azumi down > /dev/null", shell=True)
        subprocess.run("ip tunnel del azumi > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
def prefix_ip_gen():
    gen_path = "/etc/ping_sys.sh"

    if not os.path.isfile(gen_path):
        return None

    with open(gen_path, "r") as ping_gen_sh:
        for line in ping_gen_sh:
            if "ip_address" in line:
                ip_address = line.split("=")[-1].strip().strip('"')
                return ip_address

    return None
    
    return None        
def remote_ip_gen():
    gen_path = "/etc/sys.sh"
    
    if not os.path.isfile(gen_path):
        return None
    
    with open(gen_path, "r") as gen_sh:
        for line in gen_sh:
            if "remote" in line:
                remote_ip = line.split()[-1].strip('"')
                return remote_ip
    
    return None
def genz_uninstall():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Geneve Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    delufw(prefix)
    remote_ip = remote_ip_gen()

    if remote_ip is None:
        print("Unable to retrieve remote IP")
    else:
        delufw(remote_ip)

    remote2_ip = prefix_ip_gen()

    if remote2_ip is None:
        print("Unable to retrieve prefix")
    else:
        delufw(remote2_ip)

    delufw("80.200.1.1")
    delufw("80.200.1.2")
    delufw("80.200.2.1")
    

    try:
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_sys.sh", shell=True)

        subprocess.run("systemctl disable ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_gen.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("sudo ip link delete azumigen > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))
        
def remove_test():
    genz_uninstall()
    gen6_uninstall()
    ipsecs_uninstall()

def gen4_uninstall():
    remove_private()
    remove_gre621()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Geneve + \033[92mGRE6 + IP6tnl \033[93m+ \033[96mTunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    delufw(prefix)
    remote_ip = remote_ip_gen()

    if remote_ip is None:
        print("Unable to retrieve remote IP")
    else:
        delufw(remote_ip)

    remote2_ip = prefix_ip_gen()

    if remote2_ip is None:
        print("Unable to retrieve prefix")
    else:
        delufw(remote2_ip)

    delufw("80.200.1.1")
    delufw("80.200.2.1")
    delufw("2002:831a::1")
    delufw("2002:831a::2")
    delufw("2001:831b::2")
    delufw("2001:831b::1")
    

    try:
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)

        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)

        subprocess.run("sudo rm /etc/ping_sys.sh", shell=True)

        subprocess.run("systemctl disable ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_gen.service > /dev/null 2>&1", shell=True)

        subprocess.run("systemctl daemon-reload", shell=True)

        subprocess.run("sudo ip link delete azumigen > /dev/null", shell=True)

        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))
        
def gen2_uninstall():
    remove_gre621()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Geneve + \033[92mGRE6 \033[93m+ \033[96mNATIVE Tunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    delufw(prefix)
    remote_ip = remote_ip_gen()
    
    if remote_ip is None:
        print("Unable to retrieve remote IP")
    else:
        delufw(remote_ip)
        prefix = prefix_ip_gen()
        
        if prefix is None:
            print("Unable to retrieve prefix")
        else:
            delufw(prefix)
            delufw("80.200.1.1")
            delufw("80.200.2.1")
            delufw("2002:831a::1")
            delufw("2002:831a::2")
            
    
    try:
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_sys.sh", shell=True)
        
        subprocess.run("systemctl disable ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_gen.service > /dev/null 2>&1", shell=True)
  
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("sudo ip link delete azumigen > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))

def gen6_uninstall():
    remove_private()
    remove_gre6()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Geneve + \033[92mGRE6 \033[93m+ \033[96mIPV4\033[93m Tunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    delufw("80.200.1.1")
    delufw("80.200.2.1")
    delufw("2002:831a::1")
    delufw("2002:831a::2")
    delufw("2001:831b::1")
    delufw("2001:831b::2")
    ipv4 = subprocess.run(['curl', '-s', 'https://api.ipify.org'], capture_output=True, text=True).stdout.strip()
    prefix = "2002:{:02x}{:02x}:{:02x}{:02x}::1".format(*map(int, ipv4.split('.')))
    delufw(prefix)
    remote_ip = remote_ip_gen()
    
    if remote_ip is None:
        print("Unable to retrieve remote IP")
    else:
        delufw(remote_ip)
        prefix = prefix_ip_gen()
        
        if prefix is None:
            print("Unable to retrieve prefix")
        else:
            delufw(prefix)
            
    
    try:
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_sys.sh", shell=True)
        
        subprocess.run("systemctl disable ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_gen.service > /dev/null 2>&1", shell=True)
  
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("sudo ip link delete azumigen > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    except Exception as e:
        print("Error:", str(e))
        
def gen3_uninstall():
    remove_gre6()
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Geneve + \033[92mGRE6 \033[93m+ \033[96mNative\033[93m Tunnel\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    delufw("80.200.1.1")
    delufw("80.200.2.1")
    delufw("2002:831a::1")
    delufw("2002:831a::2")
    
    try:
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)

            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_sys.sh", shell=True)
        
        subprocess.run("systemctl disable ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_gen.service > /dev/null 2>&1", shell=True)
  
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("sudo ip link delete azumigen > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
        
def gen_icmp():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Geneve + ICMP Tunnel...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")
    remove_icmp()


    subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/icmp.sh\" | crontab -", shell=True)

    remote2_ip = prefix_ip_gen()
    
    if remote2_ip is None:
        print("Unable to retrieve prefix")
        return
    delufw(remote2_ip)
    delufw("80.200.1.1")
    delufw("80.200.2.1")
    delufw("70.0.0.1")
    delufw("70.0.0.2")
    
    try:
        if subprocess.call("test -f /etc/sys.sh", shell=True) == 0:
            subprocess.run("rm /etc/sys.sh", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/sys.sh\" | crontab -", shell=True)
        
        subprocess.run("sudo rm /etc/ping_sys.sh", shell=True)
        
        subprocess.run("systemctl disable ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("systemctl stop ping_gen.service > /dev/null 2>&1", shell=True)
        subprocess.run("rm /etc/systemd/system/ping_gen.service > /dev/null 2>&1", shell=True)
  
        subprocess.run("systemctl daemon-reload", shell=True)
        
        subprocess.run("sudo ip link delete azumigen > /dev/null", shell=True)
        
        print("Progress: ", end="")
        
        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 1  
        end_time = time.time() + duration
        
        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)
        
        display_checkmark("\033[92mUninstall completed!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())        
def extra_uninstall():
    os.system("clear")
    print("\033[93m───────────────────────────────────────\033[0m")
    display_notification("\033[93mRemoving Extra IP addresses...\033[0m")
    print("\033[93m───────────────────────────────────────\033[0m")

    try:
        interface = subprocess.check_output("ip route | awk '/default/ {print $5; exit}'", shell=True).decode().strip()
        addresses = subprocess.check_output(f"ip addr show dev {interface} | awk '/inet6 .* global/ {{print $2}}'", shell=True).decode().splitlines()

        for address in addresses:
            subprocess.run(f"ip addr del {address} dev {interface}", shell=True)
            
        display_notification("\033[93mRemoving cronjob...\033[0m")
        subprocess.run("crontab -l | grep -v \"@reboot /bin/bash /etc/ipv6.sh\" | crontab -", shell=True)    

        sleep(1)
        subprocess.run("sudo rm /etc/ipv6.sh", shell=True)
        
        display_notification("\033[93mRemoving Extra ip, Working in the background..\033[0m")
        print("Progress: ", end="")

        frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
        delay = 0.1
        duration = 3 
        end_time = time.time() + duration

        while time.time() < end_time:
            for frame in frames:
                print("\r[%s] Loading...  " % frame, end="")
                time.sleep(delay)
                print("\r[%s]             " % frame, end="")
                time.sleep(delay)

        display_checkmark("\033[92mExtra IP addresses removed successfully!\033[0m")
    except subprocess.CalledProcessError as e:
        print("Error:", e.output.decode().strip())
    
main_menu()
